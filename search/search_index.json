{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u6bcf\u4e00\u9897\u51ac\u5929\u7684\u79cd\u5b50\uff0c\u90fd\u6709\u4e00\u4e2a\u5173\u4e8e\u6625\u5929\u7684\u68a6\u60f3\u3002 OI \u662f\u4e00\u4e2a\u5947\u5999\u7684\u4e16\u754c\uff0c\u68a6\u60f3\u5728\u8fd9\u91cc\u751f\u6839\u53d1\u82bd\uff0c\u50cf\u4e00\u9897\u9897\u84b2\u516c\u82f1\uff0c\u5728\u6625\u98ce\u7684\u5439\u62c2\u4e0b\uff0c\u62e5\u62b1\u7740\u84dd\u5929\uff0c\u53bb\u5230\u5f88\u8fdc\u5f88\u8fdc\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u603b\u662f\u5145\u6ee1\u7740\u4e0d\u671f\u800c\u81f3\u7684\u6e29\u6696\u548c\u751f\u751f\u4e0d\u606f\u7684\u5e0c\u671b\u3002 \u5173\u4e8e\u52a0\u5bc6\u4fe1\u606f\uff0c \u70b9\u6b64\u67e5\u770b \u94fe\u63a5 \u00b6 Online Judge: \u6d1b\u8c37 \uff0c Codeforces \uff0c LibreOJ \u3002 \u8d44\u6e90\u7f51\u7ad9\uff1a OI Wiki \uff0c MY OI \u3002 \u4e2a\u4eba\u8d44\u6e90\uff1a \u535a\u5ba2\u4ed3\u5e93 \uff0c \u4ee3\u7801\u4ed3\u5e93 \u7ec3\u4e60\u6570\u636e \u00b6 OI \u751f\u6daf\u5927\u4e8b\u8bb0 \u00b6 \u505a\u9898 \u00b6 \u6d1b\u8c37\u4e24\u767e\u9898\u796d\uff1a P1120 \u5c0f\u6728\u68cd \uff3b\u6570\u636e\u52a0\u5f3a\u7248\uff3d 2021/7/23 \u6d1b\u8c37\u4e09\u767e\u9898\u796d\uff1a CF1619F Let\u2019s Play the Hat? 2021/12/22 \u7ade\u8d5b \u00b6 CSP-J 2020 \u4e00\u5e06\u98ce\u987a \u4e00\u7b49 240 \u5206 CSP-S 2021 \u53d1\u6325\u5931\u5e38 \u4e8c\u7b49 \u4e0d\u5230 100 \u5206 NOIP 2021 \u72af\u4e86\u201c\u5c0f\u201d\u9519\u8bef puts(\"-1\\n\"); \u6bc1\u6211\u9752\u6625 \u65ad\u6211\u524d\u9014 \u9057\u6068\u7ec8\u751f","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u6bcf\u4e00\u9897\u51ac\u5929\u7684\u79cd\u5b50\uff0c\u90fd\u6709\u4e00\u4e2a\u5173\u4e8e\u6625\u5929\u7684\u68a6\u60f3\u3002 OI \u662f\u4e00\u4e2a\u5947\u5999\u7684\u4e16\u754c\uff0c\u68a6\u60f3\u5728\u8fd9\u91cc\u751f\u6839\u53d1\u82bd\uff0c\u50cf\u4e00\u9897\u9897\u84b2\u516c\u82f1\uff0c\u5728\u6625\u98ce\u7684\u5439\u62c2\u4e0b\uff0c\u62e5\u62b1\u7740\u84dd\u5929\uff0c\u53bb\u5230\u5f88\u8fdc\u5f88\u8fdc\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u603b\u662f\u5145\u6ee1\u7740\u4e0d\u671f\u800c\u81f3\u7684\u6e29\u6696\u548c\u751f\u751f\u4e0d\u606f\u7684\u5e0c\u671b\u3002 \u5173\u4e8e\u52a0\u5bc6\u4fe1\u606f\uff0c \u70b9\u6b64\u67e5\u770b","title":"\u7b80\u4ecb"},{"location":"#_2","text":"Online Judge: \u6d1b\u8c37 \uff0c Codeforces \uff0c LibreOJ \u3002 \u8d44\u6e90\u7f51\u7ad9\uff1a OI Wiki \uff0c MY OI \u3002 \u4e2a\u4eba\u8d44\u6e90\uff1a \u535a\u5ba2\u4ed3\u5e93 \uff0c \u4ee3\u7801\u4ed3\u5e93","title":"\u94fe\u63a5"},{"location":"#_3","text":"","title":"\u7ec3\u4e60\u6570\u636e"},{"location":"#oi","text":"","title":"OI \u751f\u6daf\u5927\u4e8b\u8bb0"},{"location":"#_4","text":"\u6d1b\u8c37\u4e24\u767e\u9898\u796d\uff1a P1120 \u5c0f\u6728\u68cd \uff3b\u6570\u636e\u52a0\u5f3a\u7248\uff3d 2021/7/23 \u6d1b\u8c37\u4e09\u767e\u9898\u796d\uff1a CF1619F Let\u2019s Play the Hat? 2021/12/22","title":"\u505a\u9898"},{"location":"#_5","text":"CSP-J 2020 \u4e00\u5e06\u98ce\u987a \u4e00\u7b49 240 \u5206 CSP-S 2021 \u53d1\u6325\u5931\u5e38 \u4e8c\u7b49 \u4e0d\u5230 100 \u5206 NOIP 2021 \u72af\u4e86\u201c\u5c0f\u201d\u9519\u8bef puts(\"-1\\n\"); \u6bc1\u6211\u9752\u6625 \u65ad\u6211\u524d\u9014 \u9057\u6068\u7ec8\u751f","title":"\u7ade\u8d5b"},{"location":"%E7%AC%94%E8%AE%B0/","text":"\u7b14\u8bb0\u5927\u7eb2 \u00b6 \u6ce8\u610f\u4e8b\u9879 \u00b6 \u8bed\u8a00 \u00b6 \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff1a\u56db\u5219\u8fd0\u7b97 \\(>\\) \u5173\u7cfb\u8fd0\u7b97 \\(>\\) \u4f4d\u8fd0\u7b97 \\(>\\) \u903b\u8f91\u8fd0\u7b97\u3002 \u8f93\u51fa\uff1a\u5c3d\u91cf\u5c11\u6df7\u7528\uff1b puts \u4f1a\u81ea\u52a8\u6362\u884c\u3002 \u6570\u7ec4\uff1a\u5c3d\u91cf\u5f00\u6700\u5927\u4f7f\u7528 \\(+ 7\\) \u3002 \u5c40\u90e8\u53d8\u91cf\u8981\u521d\u59cb\u5316\u3002 memset \u5c3d\u91cf\u53ea\u521d\u59cb\u5316 \\(0\\) \u548c \\(-1\\) \u3002 STL\uff1a\u65e0\u5173\u7d27\u8981\u7684\u5c11\u7528\uff08\u5982\u5b58\u56fe\uff0c stack \uff09\u3002 \u7b97\u6cd5 \u00b6 Tarjan\uff1a\u5f3a\u8fde\u901a\u5206\u91cf \\(=\\) \u53cc\u8fde\u901a\u5206\u91cf\u3002\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002\u6ce8\u610f\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6 if(dfn[v] < dfn[u] && v != fa) \u624d\u662f\u6b63\u786e\u7684\uff0c\u4e00\u822c\u5efa\u8bae\u5199 if(ins[v]) \u3002 \u6700\u77ed\u8def\uff1aSPFA \u7528 queue \uff0c\u52a0 vis \uff0cDijkstra \u7528 priority_queue \uff0c\u4e0d\u52a0 vis \u3002 \u500d\u589e\u6c42 LCA\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002 \u6570\u636e\u7ed3\u6784 \u00b6 ST \u8868\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002 \u4ee3\u7801\u6a21\u677f \u00b6 \u8be6\u89c1 \u4ee3\u7801\u6a21\u677f","title":"\u7b14\u8bb0\u5927\u7eb2"},{"location":"%E7%AC%94%E8%AE%B0/#_1","text":"","title":"\u7b14\u8bb0\u5927\u7eb2"},{"location":"%E7%AC%94%E8%AE%B0/#_2","text":"","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"%E7%AC%94%E8%AE%B0/#_3","text":"\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff1a\u56db\u5219\u8fd0\u7b97 \\(>\\) \u5173\u7cfb\u8fd0\u7b97 \\(>\\) \u4f4d\u8fd0\u7b97 \\(>\\) \u903b\u8f91\u8fd0\u7b97\u3002 \u8f93\u51fa\uff1a\u5c3d\u91cf\u5c11\u6df7\u7528\uff1b puts \u4f1a\u81ea\u52a8\u6362\u884c\u3002 \u6570\u7ec4\uff1a\u5c3d\u91cf\u5f00\u6700\u5927\u4f7f\u7528 \\(+ 7\\) \u3002 \u5c40\u90e8\u53d8\u91cf\u8981\u521d\u59cb\u5316\u3002 memset \u5c3d\u91cf\u53ea\u521d\u59cb\u5316 \\(0\\) \u548c \\(-1\\) \u3002 STL\uff1a\u65e0\u5173\u7d27\u8981\u7684\u5c11\u7528\uff08\u5982\u5b58\u56fe\uff0c stack \uff09\u3002","title":"\u8bed\u8a00"},{"location":"%E7%AC%94%E8%AE%B0/#_4","text":"Tarjan\uff1a\u5f3a\u8fde\u901a\u5206\u91cf \\(=\\) \u53cc\u8fde\u901a\u5206\u91cf\u3002\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002\u6ce8\u610f\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6 if(dfn[v] < dfn[u] && v != fa) \u624d\u662f\u6b63\u786e\u7684\uff0c\u4e00\u822c\u5efa\u8bae\u5199 if(ins[v]) \u3002 \u6700\u77ed\u8def\uff1aSPFA \u7528 queue \uff0c\u52a0 vis \uff0cDijkstra \u7528 priority_queue \uff0c\u4e0d\u52a0 vis \u3002 \u500d\u589e\u6c42 LCA\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002","title":"\u7b97\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/#_5","text":"ST \u8868\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/#_6","text":"\u8be6\u89c1 \u4ee3\u7801\u6a21\u677f","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/","text":"\u4ee3\u7801\u6a21\u677f \u00b6 \u6570\u636e\u7ed3\u6784 \u00b6 ST \u8868 \u00b6 \u5b9a\u4e49\uff1a 1 int s [ MAXN ][ MAXLOG ]; \u9884\u5904\u7406\uff08\u6b64\u5904 max \u51fd\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u6ee1\u8db3\u53ef\u91cd\u590d\u8d21\u732e\u6027\u7684\u51fd\u6570\uff0c\u5982 min \uff0c gcd \uff09\uff1a 1 2 3 4 5 6 7 slim = ( int )( log (( double ) n ) / log ( 2.0 )); for ( int i = 1 ; i <= n ; i ++ ) s [ i ][ 0 ] = a [ i ]; for ( int j = 1 ; j <= slim ; j ++ ) for ( int i = 1 ; i <= n ; i ++ ) if ( i + ( 1 << ( j -1 )) <= n ) s [ i ][ j ] = max ( s [ i ][ j -1 ], s [ i + ( 1 << ( j -1 ))][ j -1 ]); \u67e5\u8be2\uff08\u6709\u5173 max \u51fd\u6570\u540c\u4e0a\uff09\uff1a 1 2 3 4 5 int query ( int l , int r ) { int qlim = ( int )( log (( double )( r - l + 1 )) / log ( 2.0 )); return max ( s [ l ][ qlim ], s [ r - ( 1 << qlim ) + 1 ][ qlim ]); } \u56fe\u8bba \u00b6 \u6811\u7684\u91cd\u5fc3 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; } \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe \u00b6 1 2 3 4 5 6 7 int head [ MAXN ], nxt [ MAXM ], to [ MAXM ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } \u4ece 1 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a 0\uff1b\u4ece 0 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a -1\u3002 \u56fe\u7684\u8fde\u901a\u6027 \u00b6 \u7f29\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int dfn [ MAXN ], low [ MAXN ], dcnt ; int s [ MAXN ], ins [ MAXN ], scnt ; int belong [ MAXN ], bs [ MAXN ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v , u ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; } } \u4e0d\u5efa\u8bae\u5199 if(dfn[v] < dfn[u] && v != fa) \uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6\u624d\u6b63\u786e\u3002","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_1","text":"","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#st","text":"\u5b9a\u4e49\uff1a 1 int s [ MAXN ][ MAXLOG ]; \u9884\u5904\u7406\uff08\u6b64\u5904 max \u51fd\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u6ee1\u8db3\u53ef\u91cd\u590d\u8d21\u732e\u6027\u7684\u51fd\u6570\uff0c\u5982 min \uff0c gcd \uff09\uff1a 1 2 3 4 5 6 7 slim = ( int )( log (( double ) n ) / log ( 2.0 )); for ( int i = 1 ; i <= n ; i ++ ) s [ i ][ 0 ] = a [ i ]; for ( int j = 1 ; j <= slim ; j ++ ) for ( int i = 1 ; i <= n ; i ++ ) if ( i + ( 1 << ( j -1 )) <= n ) s [ i ][ j ] = max ( s [ i ][ j -1 ], s [ i + ( 1 << ( j -1 ))][ j -1 ]); \u67e5\u8be2\uff08\u6709\u5173 max \u51fd\u6570\u540c\u4e0a\uff09\uff1a 1 2 3 4 5 int query ( int l , int r ) { int qlim = ( int )( log (( double )( r - l + 1 )) / log ( 2.0 )); return max ( s [ l ][ qlim ], s [ r - ( 1 << qlim ) + 1 ][ qlim ]); }","title":"ST \u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_3","text":"","title":"\u56fe\u8bba"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; }","title":"\u6811\u7684\u91cd\u5fc3"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_5","text":"1 2 3 4 5 6 7 int head [ MAXN ], nxt [ MAXM ], to [ MAXM ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } \u4ece 1 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a 0\uff1b\u4ece 0 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a -1\u3002","title":"\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_6","text":"\u7f29\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int dfn [ MAXN ], low [ MAXN ], dcnt ; int s [ MAXN ], ins [ MAXN ], scnt ; int belong [ MAXN ], bs [ MAXN ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v , u ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; } } \u4e0d\u5efa\u8bae\u5199 if(dfn[v] < dfn[u] && v != fa) \uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6\u624d\u6b63\u786e\u3002","title":"\u56fe\u7684\u8fde\u901a\u6027"},{"location":"%E7%AC%94%E8%AE%B0/%E6%9D%82%E6%96%87/%E7%94%9F%E6%88%90%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%8E%92%E5%88%97/","text":"\u751f\u6210\u6c49\u660e\u91cd\u91cf\u987a\u5e8f\u7684\u6392\u5217 \u00b6 \u6c49\u660e\u91cd\u91cf \u00b6 \u6c49\u660e\u91cd\u91cf\u662f\u4e00\u4e32\u7b26\u53f7\u4e2d\u975e\u96f6\u7b26\u53f7\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u5b83\u7684\u6c49\u660e\u91cd\u91cf\u5c31\u7b49\u4e8e\u5b83 \\(1\\) \u7684\u4e2a\u6570\uff08\u5373 popcount \uff09\u3002 \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u53ef\u4ee5\u5faa\u73af\u6c42\u89e3\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u9664\u4ee52\uff0c\u7ef4\u62a4\u4e00\u4e2a\u7b54\u6848\u53d8\u91cf\uff0c\u5728\u9664\u7684\u8fc7\u7a0b\u4e2d\u6839\u636e\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a \\(1\\) \u66f4\u65b0\u7b54\u6848\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt += x & 1 ; x >>= 1 ; } return cnt ; } \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u8fd8\u53ef\u4ee5\u4f7f\u7528 lowbit \u64cd\u4f5c\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u51cf\u53bb\u5b83\u7684 lowbit 1 \uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u53d8\u4e3a \\(0\\) \u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt ++ ; x -= x & - x ; } return cnt ; } \u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217 \u00b6 \u5728 \u72b6\u538b DP \u4e2d\uff0c\u6309\u7167 popcount \u9012\u589e\u7684\u987a\u5e8f\u679a\u4e3e\u6709\u65f6\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u679a\u4e3e\u72b6\u6001\u3002\u8fd9\u662f\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u4e00\u5927\u4f5c\u7528\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u5177\u4f53\u63a2\u7a76\u5982\u4f55\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6c49\u660e\u91cd\u91cf\u4e3a \\(n\\) \u7684\u6700\u5c0f\u7684\u6574\u6570\u4e3a \\(2^n-1\\) \u3002\u53ea\u8981\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u6784\u9020\u51fa\u4e00\u4e2a\u6574\u6570\u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u6c49\u660e\u91cd\u91cf\uff0c\u4ece \\(2^n-1\\) \u5f00\u59cb\u4e0d\u65ad\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65b9\u5f0f\uff0c\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u51fa \\(0-n\\) \u7684\u7b26\u5408\u8981\u6c42\u7684\u6392\u5217\u3002 \u800c\u627e\u51fa\u4e00\u4e2a\u6570 \\(x\\) \u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\u6709\u8fd9\u6837\u7684\u601d\u8def\uff0c\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff1a \u628a \\((10110)_2\\) \u6700\u53f3\u8fb9\u7684 \\(1\\) \u5411\u5de6\u79fb\u52a8\uff0c\u5982\u679c\u4e0d\u80fd\u79fb\u52a8\uff0c\u79fb\u52a8\u5b83\u5de6\u8fb9\u7684 \\(1\\) \uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f97\u5230 \\((11010)_2\\) \u3002 \u628a\u5f97\u5230\u7684 \\((11010)_2\\) \u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u5148\u7684\u4f4d\u7f6e\u4e00\u76f4\u5230\u6700\u4f4e\u4f4d\u7684\u6240\u6709 \\(1\\) \u90fd\u79fb\u5230\u6700\u53f3\u8fb9\u3002\u8fd9\u91cc\u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u6765\u5728\u7b2c\u4e09\u4f4d\uff0c\u6240\u4ee5\u6700\u540e\u4e09\u4f4d \\(010\\) \u8981\u53d8\u6210 \\(001\\) \uff0c\u5f97\u5230 \\((11001)_2\\) \u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1a 1 2 int t = x + ( x & - x ); x = t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 ); \u7b2c\u4e00\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u628a\u6570 \\(x\\) \u52a0\u4e0a\u5b83\u7684 lowbit \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a \\(x\\) \u6700\u53f3\u8fb9\u7684\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6362\u6210\u5b83\u5de6\u8fb9\u7684\u4e00\u4e2a \\(1\\) \u3002\u5982\u521a\u624d\u63d0\u5230\u7684\u4e8c\u8fdb\u5236\u6570 \\((10110)_2\\) \uff0c\u5b83\u5728\u52a0\u4e0a\u5b83\u7684 lowbit \u540e\u662f \\((11000)_2\\) \u3002\u8fd9\u5176\u5b9e\u5f97\u5230\u4e86\u6211\u4eec\u7b54\u6848\u7684\u524d\u534a\u90e8\u5206\u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u8981\u628a\u7b54\u6848\u540e\u9762\u7684 \\(1\\) \u8865\u9f50\uff0c \\(t\\) \u7684 lowbit \u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684 \\(1\\) \u79fb\u52a8\u540e\u7684\u4f4d\u7f6e\uff0c\u800c \\(x\\) \u7684 lowbit \u5219\u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u3002\u8fd8\u662f\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff0c \\(t = (11000)_2\\) \uff0c \\(\\operatorname{lowbit}(t) = (01000)_2\\) \uff0c \\(\\operatorname{lowbit}(x)=(00010)_2\\) \u3002 \u63a5\u4e0b\u6765\u7684\u9664\u6cd5\u64cd\u4f5c\u662f\u8fd9\u79cd\u4f4d\u8fd0\u7b97\u4e2d\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\uff0c\u4f46\u4e5f\u662f\u6700\u5173\u952e\u7684\u90e8\u5206\u3002\u6211\u4eec\u8bbe \u539f\u6570 \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u9ad8\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(r\\) \u4f4d\u4e0a\uff08\u4f4d\u6570\u4ece \\(0\\) \u5f00\u59cb\uff09\uff0c\u6700\u4f4e\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(l\\) \u4f4d\uff0c \\(t\\) \u7684 lowbit \u7b49\u4e8e 1 << (r+1) \uff0c \\(x\\) \u7684 lowbit \u7b49\u4e8e 1 << l \uff0c ((t&-t)>>1)/(x&-x) \u5f97\u5230\u7684\uff0c\u5c31\u662f (1<<r)/(1<<l) = 1<<(r-l) \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u5c31\u662f \\(1\\) \u540e\u9762\u8ddf\u4e0a \\(r-l\\) \u4e2a\u96f6\uff0c\u96f6\u7684\u4e2a\u6570\u6b63\u597d\u7b49\u4e8e\u8fde\u7eed \\(1\\) \u7684\u4e2a\u6570\u51cf\u53bb \\(1\\) \u3002\u4e3e\u6211\u4eec\u521a\u624d\u7684\u6570\u4e3a\u4f8b\uff0c \\(\\frac{\\operatorname{lowbit(t)\\div 2}}{\\operatorname{lowbit(x)}} = \\frac{(00100)_2}{(00010)_2} = (00010)_2\\) \u3002\u628a\u8fd9\u4e2a\u6570\u51cf\u53bb \\(1\\) \u5f97\u5230\u7684\u5c31\u662f\u6211\u4eec\u8981\u8865\u5168\u7684\u4f4e\u4f4d\uff0c\u6216\u4e0a\u539f\u6765\u7684\u6570\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u6240\u4ee5\u679a\u4e3e \\(0-n\\) \u6309\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u5b8c\u6574\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 for ( int i = 0 ; ( 1 << i ) -1 <= n ; i ++ ) { for ( int x = ( 1 << i ) -1 , t ; x <= n ; t = x + ( x &- x ), x = x ? ( t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 )) : ( n + 1 )) { // \u5199\u4e0b\u9700\u8981\u5b8c\u6210\u7684\u64cd\u4f5c } } \u5176\u4e2d\u8981\u6ce8\u610f \\(0\\) \u7684\u7279\u5224\uff0c\u56e0\u4e3a \\(0\\) \u6ca1\u6709\u76f8\u540c\u6c49\u660e\u91cd\u91cf\u7684\u540e\u7ee7\u3002 \u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u4f4e\u5f80\u9ad8\u7684\u7b2c\u4e00\u4e2a \\(1\\) \u8fde\u540c\u540e\u9762\u7684\u96f6\uff0c\u5982 \\((1010)_2\\) \u7684 lowbit \u662f \\((0010)_2\\) \uff0c\u8be6\u89c1 \u6811\u72b6\u6570\u7ec4 \u3002 \u21a9","title":"\u751f\u6210\u6c49\u660e\u91cd\u91cf\u987a\u5e8f\u7684\u6392\u5217"},{"location":"%E7%AC%94%E8%AE%B0/%E6%9D%82%E6%96%87/%E7%94%9F%E6%88%90%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%8E%92%E5%88%97/#_1","text":"","title":"\u751f\u6210\u6c49\u660e\u91cd\u91cf\u987a\u5e8f\u7684\u6392\u5217"},{"location":"%E7%AC%94%E8%AE%B0/%E6%9D%82%E6%96%87/%E7%94%9F%E6%88%90%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%8E%92%E5%88%97/#_2","text":"\u6c49\u660e\u91cd\u91cf\u662f\u4e00\u4e32\u7b26\u53f7\u4e2d\u975e\u96f6\u7b26\u53f7\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u5b83\u7684\u6c49\u660e\u91cd\u91cf\u5c31\u7b49\u4e8e\u5b83 \\(1\\) \u7684\u4e2a\u6570\uff08\u5373 popcount \uff09\u3002 \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u53ef\u4ee5\u5faa\u73af\u6c42\u89e3\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u9664\u4ee52\uff0c\u7ef4\u62a4\u4e00\u4e2a\u7b54\u6848\u53d8\u91cf\uff0c\u5728\u9664\u7684\u8fc7\u7a0b\u4e2d\u6839\u636e\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a \\(1\\) \u66f4\u65b0\u7b54\u6848\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt += x & 1 ; x >>= 1 ; } return cnt ; } \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u8fd8\u53ef\u4ee5\u4f7f\u7528 lowbit \u64cd\u4f5c\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u51cf\u53bb\u5b83\u7684 lowbit 1 \uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u53d8\u4e3a \\(0\\) \u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt ++ ; x -= x & - x ; } return cnt ; }","title":"\u6c49\u660e\u91cd\u91cf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%9D%82%E6%96%87/%E7%94%9F%E6%88%90%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%8E%92%E5%88%97/#_3","text":"\u5728 \u72b6\u538b DP \u4e2d\uff0c\u6309\u7167 popcount \u9012\u589e\u7684\u987a\u5e8f\u679a\u4e3e\u6709\u65f6\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u679a\u4e3e\u72b6\u6001\u3002\u8fd9\u662f\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u4e00\u5927\u4f5c\u7528\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u5177\u4f53\u63a2\u7a76\u5982\u4f55\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6c49\u660e\u91cd\u91cf\u4e3a \\(n\\) \u7684\u6700\u5c0f\u7684\u6574\u6570\u4e3a \\(2^n-1\\) \u3002\u53ea\u8981\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u6784\u9020\u51fa\u4e00\u4e2a\u6574\u6570\u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u6c49\u660e\u91cd\u91cf\uff0c\u4ece \\(2^n-1\\) \u5f00\u59cb\u4e0d\u65ad\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65b9\u5f0f\uff0c\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u51fa \\(0-n\\) \u7684\u7b26\u5408\u8981\u6c42\u7684\u6392\u5217\u3002 \u800c\u627e\u51fa\u4e00\u4e2a\u6570 \\(x\\) \u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\u6709\u8fd9\u6837\u7684\u601d\u8def\uff0c\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff1a \u628a \\((10110)_2\\) \u6700\u53f3\u8fb9\u7684 \\(1\\) \u5411\u5de6\u79fb\u52a8\uff0c\u5982\u679c\u4e0d\u80fd\u79fb\u52a8\uff0c\u79fb\u52a8\u5b83\u5de6\u8fb9\u7684 \\(1\\) \uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f97\u5230 \\((11010)_2\\) \u3002 \u628a\u5f97\u5230\u7684 \\((11010)_2\\) \u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u5148\u7684\u4f4d\u7f6e\u4e00\u76f4\u5230\u6700\u4f4e\u4f4d\u7684\u6240\u6709 \\(1\\) \u90fd\u79fb\u5230\u6700\u53f3\u8fb9\u3002\u8fd9\u91cc\u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u6765\u5728\u7b2c\u4e09\u4f4d\uff0c\u6240\u4ee5\u6700\u540e\u4e09\u4f4d \\(010\\) \u8981\u53d8\u6210 \\(001\\) \uff0c\u5f97\u5230 \\((11001)_2\\) \u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1a 1 2 int t = x + ( x & - x ); x = t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 ); \u7b2c\u4e00\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u628a\u6570 \\(x\\) \u52a0\u4e0a\u5b83\u7684 lowbit \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a \\(x\\) \u6700\u53f3\u8fb9\u7684\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6362\u6210\u5b83\u5de6\u8fb9\u7684\u4e00\u4e2a \\(1\\) \u3002\u5982\u521a\u624d\u63d0\u5230\u7684\u4e8c\u8fdb\u5236\u6570 \\((10110)_2\\) \uff0c\u5b83\u5728\u52a0\u4e0a\u5b83\u7684 lowbit \u540e\u662f \\((11000)_2\\) \u3002\u8fd9\u5176\u5b9e\u5f97\u5230\u4e86\u6211\u4eec\u7b54\u6848\u7684\u524d\u534a\u90e8\u5206\u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u8981\u628a\u7b54\u6848\u540e\u9762\u7684 \\(1\\) \u8865\u9f50\uff0c \\(t\\) \u7684 lowbit \u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684 \\(1\\) \u79fb\u52a8\u540e\u7684\u4f4d\u7f6e\uff0c\u800c \\(x\\) \u7684 lowbit \u5219\u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u3002\u8fd8\u662f\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff0c \\(t = (11000)_2\\) \uff0c \\(\\operatorname{lowbit}(t) = (01000)_2\\) \uff0c \\(\\operatorname{lowbit}(x)=(00010)_2\\) \u3002 \u63a5\u4e0b\u6765\u7684\u9664\u6cd5\u64cd\u4f5c\u662f\u8fd9\u79cd\u4f4d\u8fd0\u7b97\u4e2d\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\uff0c\u4f46\u4e5f\u662f\u6700\u5173\u952e\u7684\u90e8\u5206\u3002\u6211\u4eec\u8bbe \u539f\u6570 \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u9ad8\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(r\\) \u4f4d\u4e0a\uff08\u4f4d\u6570\u4ece \\(0\\) \u5f00\u59cb\uff09\uff0c\u6700\u4f4e\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(l\\) \u4f4d\uff0c \\(t\\) \u7684 lowbit \u7b49\u4e8e 1 << (r+1) \uff0c \\(x\\) \u7684 lowbit \u7b49\u4e8e 1 << l \uff0c ((t&-t)>>1)/(x&-x) \u5f97\u5230\u7684\uff0c\u5c31\u662f (1<<r)/(1<<l) = 1<<(r-l) \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u5c31\u662f \\(1\\) \u540e\u9762\u8ddf\u4e0a \\(r-l\\) \u4e2a\u96f6\uff0c\u96f6\u7684\u4e2a\u6570\u6b63\u597d\u7b49\u4e8e\u8fde\u7eed \\(1\\) \u7684\u4e2a\u6570\u51cf\u53bb \\(1\\) \u3002\u4e3e\u6211\u4eec\u521a\u624d\u7684\u6570\u4e3a\u4f8b\uff0c \\(\\frac{\\operatorname{lowbit(t)\\div 2}}{\\operatorname{lowbit(x)}} = \\frac{(00100)_2}{(00010)_2} = (00010)_2\\) \u3002\u628a\u8fd9\u4e2a\u6570\u51cf\u53bb \\(1\\) \u5f97\u5230\u7684\u5c31\u662f\u6211\u4eec\u8981\u8865\u5168\u7684\u4f4e\u4f4d\uff0c\u6216\u4e0a\u539f\u6765\u7684\u6570\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u6240\u4ee5\u679a\u4e3e \\(0-n\\) \u6309\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u5b8c\u6574\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 for ( int i = 0 ; ( 1 << i ) -1 <= n ; i ++ ) { for ( int x = ( 1 << i ) -1 , t ; x <= n ; t = x + ( x &- x ), x = x ? ( t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 )) : ( n + 1 )) { // \u5199\u4e0b\u9700\u8981\u5b8c\u6210\u7684\u64cd\u4f5c } } \u5176\u4e2d\u8981\u6ce8\u610f \\(0\\) \u7684\u7279\u5224\uff0c\u56e0\u4e3a \\(0\\) \u6ca1\u6709\u76f8\u540c\u6c49\u660e\u91cd\u91cf\u7684\u540e\u7ee7\u3002 \u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u4f4e\u5f80\u9ad8\u7684\u7b2c\u4e00\u4e2a \\(1\\) \u8fde\u540c\u540e\u9762\u7684\u96f6\uff0c\u5982 \\((1010)_2\\) \u7684 lowbit \u662f \\((0010)_2\\) \uff0c\u8be6\u89c1 \u6811\u72b6\u6570\u7ec4 \u3002 \u21a9","title":"\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217"},{"location":"%E9%A2%98%E8%A7%A3/","text":"\u9898\u89e3\u5927\u7eb2 \u00b6","title":"\u9898\u89e3\u5927\u7eb2"},{"location":"%E9%A2%98%E8%A7%A3/#_1","text":"","title":"\u9898\u89e3\u5927\u7eb2"},{"location":"%E9%A2%98%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A6%82%E7%8E%87%20DP/","text":"\u6982\u7387 DP \u00b6 P1654 OSU! \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \\((n\\leq 10^5)\\) \u7684 01 \u4e32\uff0c\u6bcf\u4e00\u4f4d\u4e0a\u51fa\u73b0 1 \u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u6982\u7387\uff0c\u8fde\u7eed\u7684 \\(x\\) \u4e2a \\(1\\) \u53ef\u4ee5\u8d21\u732e \\(x^3\\) \u7684\u5206\u6570\uff0c\u6c42\u5206\u6570\u548c\u7684\u671f\u671b\u3002 \u89e3\u6cd5\uff1a\u8003\u8651","title":"\u6982\u7387\u00a0DP"},{"location":"%E9%A2%98%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A6%82%E7%8E%87%20DP/#dp","text":"","title":"\u6982\u7387\u00a0DP"},{"location":"%E9%A2%98%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A6%82%E7%8E%87%20DP/#p1654-osu","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \\((n\\leq 10^5)\\) \u7684 01 \u4e32\uff0c\u6bcf\u4e00\u4f4d\u4e0a\u51fa\u73b0 1 \u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u6982\u7387\uff0c\u8fde\u7eed\u7684 \\(x\\) \u4e2a \\(1\\) \u53ef\u4ee5\u8d21\u732e \\(x^3\\) \u7684\u5206\u6570\uff0c\u6c42\u5206\u6570\u548c\u7684\u671f\u671b\u3002 \u89e3\u6cd5\uff1a\u8003\u8651","title":"P1654\u00a0OSU!"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/2-SAT%20%E9%97%AE%E9%A2%98/","text":"2-SAT \u95ee\u9898 \u00b6 \u6a21\u677f\u9898 \u00b6 P4782 \u3010\u6a21\u677f\u30112-SAT \u95ee\u9898 P5782 [POI2001] \u548c\u5e73\u59d4\u5458\u4f1a P4171 [JSOI2010] \u6ee1\u6c49\u5168\u5e2d \u53c2\u8003\u4ee3\u7801 P4782 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> #include <stack> #include <vector> using namespace std ; int n , m , _i , a , _j , b ; vector < int > g [ 2000007 ]; int s [ 2000007 ], scnt ; int dfn [ 2000007 ], low [ 2000007 ], q [ 2000007 ]; int belong [ 2000007 ], bs [ 2000007 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 ; s [ ++ scnt ] = cur ; for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s [ scnt ] != cur ) belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; } } int iv ( int i , int v ) { return i + v * n ; } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> _i >> a >> _j >> b ; g [ _i + n * ( a ^ 1 )]. push_back ( _j + n * ( b & 1 )); g [ _j + n * ( b ^ 1 )]. push_back ( _i + n * ( a & 1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"IMPOSSIBLE\" << endl ; return 0 ; } cout << \"POSSIBLE\" << endl ; for ( int i = 1 ; i <= n ; i ++ ) cout << ( belong [ i ] > belong [ i + n ]) << ' ' ; cout << endl ; } P5782 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <stdio.h> #include <string.h> #define min(a, b) (((a) < (b)) ? (a) : (b)) int n , m , a , b ; const int maxn = 8e3 + 7 ; const int maxm = 2e4 + 7 ; int head [ maxn * 2 ], nxt [ maxm * 4 ], to [ maxm * 4 ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], ins [ maxn * 2 ], scnt ; int belong [ maxn * 2 ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; ~ i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( low [ u ] == dfn [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int main () { bool flag = 1 ; memset ( head , -1 , sizeof ( head )); memset ( to , -1 , sizeof ( to )); scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ), a -- , b -- ; add ( a , b ^ 1 ), add ( b , a ^ 1 ); } for ( int i = 0 ; i < n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] == belong [ i ^ 1 ]) flag = 0 ; if ( flag ) { for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] < belong [ i ^ 1 ]) printf ( \"%d \\n \" , i + 1 ); else printf ( \"%d \\n \" , ( i ^ 1 ) + 1 ); } else puts ( \"NIE\" ); } P4171 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <iostream> #include <stack> #include <vector> using namespace std ; int k ; int n , m , id1 , id2 ; char t1 , t2 ; vector < int > g [ 207 ]; stack < int > s ; int dfn [ 207 ], low [ 207 ], belong [ 207 ], bs [ 207 ], q [ 207 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 , s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s . top () != cur ) belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); } } inline int iv ( char t , int i ) { if ( t == 'h' || t == 'l' ) return i ; else return n + i ; } int main () { cin >> k ; while ( k -- ) { cin >> n >> m ; bcnt = cnt = 0 ; for (; s . size (); s . pop ()) ; for ( int i = 1 ; i <= n * 2 ; i ++ ) g [ i ]. clear (), q [ i ] = dfn [ i ] = low [ i ] = belong [ i ] = bs [ i ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> t1 >> id1 >> t2 >> id2 ; g [ iv ( t1 - 1 , id1 )]. push_back ( iv ( t2 , id2 )); g [ iv ( t2 - 1 , id2 )]. push_back ( iv ( t1 , id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"BAD\" << endl ; goto flag ; } cout << \"GOOD\" << endl ; flag :; } } P3825 [NOI2017] \u6e38\u620f \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u5c0f L \u6709 A\u3001B\u3001C \u4e09\u8f86\u8d5b\u8f66\uff0cn \u573a\u6e38\u620f\u4e2d\u6709 d \u573a \\((d \\leq 8, n \\leq 5 \\times 10^4)\\) \u4e0d\u9650\u5236\u8d5b\u8f66\uff0c\u5176\u4f59\u7684\u573a\u6b21\u4f1a\u7981\u6b62\u67d0\u4e00\u8f86\u8d5b\u8f66\u3002\u8fd8\u6709 m \u6761 \\((m \\leq 10^4)\\) \u89c4\u5219\u9650\u5236\u5982\u679c\u5728\u573a\u6b21 \\(i\\) \u4f7f\u7528\u67d0\u4e00\u8d5b\u8f66\uff0c\u5728\u573a\u6b21 \\(j\\) \u5fc5\u987b\u4f7f\u7528\u67d0\u79cd\u8d5b\u8f66\u3002\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u82e5\u6709\u89e3\uff0c\u8f93\u51fa\u4e00\u79cd\u65b9\u6848\u3002 \u89e3\u6cd5\uff1a\u8003\u8651\u5230\u7edd\u5927\u591a\u6570\u573a\u6b21\u53ea\u80fd\u4f7f\u7528\u4e24\u8f66\u4e4b\u4e00\uff0c\u679a\u4e3e \\(d\\) \u573a\u4e0d\u9650\u8d5b\u8f66\u7684\u573a\u6b21\u9650\u5236 A \u6216\u9650\u5236 B\uff0c\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O((n+m)\\cdot 2^d)\\) \u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 ; char S [ maxn ]; int n , d , m ; int head [ maxn * 2 ], nxt [ maxm * 2 ], to [ maxm * 2 ], cnt ; struct sat { int i , j ; char hi , hj ; } q [ maxm ]; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int anti ( int u ) { if ( u > n ) return u - n ; else return u + n ; } int id ( int u , char c ) { if ( c == (( S [ u ] == 'a' ) ? 'b' : 'a' )) return u ; return u + n ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], belong [ maxn * 2 ], bcnt , scnt , ins [ maxn * 2 ]; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { ++ bcnt ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int solve () { cnt = 0 , dcnt = 0 , bcnt = 0 , scnt = 0 ; memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); memset ( s , 0 , sizeof ( s )); memset ( belong , 0 , sizeof ( belong )); memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); for ( int i = 1 ; i <= m ; i ++ ) { if ( q [ i ]. i == q [ i ]. j && q [ i ]. hi == q [ i ]. hj ) continue ; if ( q [ i ]. hi == S [ q [ i ]. i ]) continue ; int id1 = id ( q [ i ]. i , q [ i ]. hi ), id2 = id ( q [ i ]. j , q [ i ]. hj ); if ( q [ i ]. hj == S [ q [ i ]. j ]) add ( id1 , anti ( id1 )); else add ( id1 , id2 ), add ( anti ( id2 ), anti ( id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( belong [ i ] == belong [ anti ( i )]) return 0 ; } return 1 ; } int xpos [ 9 ], xcnt ; bool flag ; int main () { scanf ( \"%d %d \\n %s \\n %d\" , & n , & d , S + 1 , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %c %d %c\" , & ( q [ i ]. i ), & ( q [ i ]. hi ), & ( q [ i ]. j ), & ( q [ i ]. hj )); q [ i ]. hi += 32 , q [ i ]. hj += 32 ; } for ( int i = 1 ; i <= n ; i ++ ) if ( S [ i ] == 'x' ) xpos [ xcnt ++ ] = i ; for ( int i = 0 ; i < ( 1 << d ); i ++ ) { for ( int j = 0 ; j < d ; j ++ ) if ( i & ( 1 << j )) S [ xpos [ j ]] = 'a' ; else S [ xpos [ j ]] = 'b' ; flag = flag || solve (); if ( flag ) break ; } if ( flag ) for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%c\" , ( belong [ i ] < belong [ anti ( i )]) ? (( S [ i ] == 'a' ) ? 'B' : 'A' ) : (( S [ i ] == 'c' ) ? 'B' : 'C' )); else puts ( \"-1 \\n \" ); } P3209 [HNOI2010] \u5e73\u9762\u56fe\u5224\u5b9a \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1aT \u7ec4\u6570\u636e \\((T\\leq 300)\\) \uff0c\u7ed9\u4f60\u4e00\u4e2a\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u548c\u5176\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5224\u65ad\u8be5\u56fe\u662f\u5426\u4e3a\u5e73\u9762\u56fe\u3002 \\(N\\leq 200\\) \u3002 \u89e3\u6cd5\uff1a\u4e3a\u4e86\u7b80\u5316\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u9762\u56fe\u5b9a\u7406 \\(m \\leq 3\\times n - 6\\) \uff0c\u521d\u6b65\u6392\u9664\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u60c5\u51b5\u3002\u4e00\u6761\u8fb9\u53ef\u4ee5\u5728\u73af\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u73af\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fb9\u7684\u77db\u76fe\u5efa\u7acb\u5173\u7cfb\uff0c\u4ece\u800c\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\u6c42\u89e3\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 120007 ; int t , n , m ; int _t1 , _t2 ; int head [ maxn ], nxt [ maxn ], to [ maxn ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn ], low [ maxn ], dcnt ; int s [ maxn ], ins [ maxn ], scnt ; int belong [ maxn ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ cnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } void init () { cnt = 0 , dcnt = 0 , bcnt = 0 ; memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); } int l [ maxn ], r [ maxn ]; int hid [ maxn ]; int flag ; int main () { scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); assert ( n <= 200 ); if ( m <= n * 3 - 6 ) flag = 1 ; else flag = 0 ; for ( int i = 1 ; i <= m ; i ++ ) if ( flag ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); else scanf ( \"%d%d\" , & _t1 , & _t2 ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & _t1 ), hid [ _t1 ] = i ; if ( ! flag ) { puts ( \"NO\" ); continue ; } init (); for ( int i = 1 ; i < m ; i ++ ) for ( int j = i + 1 ; j <= m ; j ++ ) { int a , b , c , d ; a = l [ i ], b = r [ i ], c = l [ j ], d = r [ j ]; a = hid [ a ], b = hid [ b ], c = hid [ c ], d = hid [ d ]; if ( b < a ) swap ( a , b ); if ( d < c ) swap ( c , d ); if (( a < c && c < b && b < d ) || ( c < a && a < d && d < b )) add ( i , j + m ), add ( i + m , j ), add ( j , i + m ), add ( j + m , i ); } for ( int i = 1 ; i <= m * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= m ; i ++ ) if ( belong [ i ] == belong [ i + m ]) { puts ( \"NO\" ), flag = 0 ; break ; } if ( flag ) puts ( \"YES\" ); } }","title":"2-SAT \u95ee\u9898"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/2-SAT%20%E9%97%AE%E9%A2%98/#2-sat","text":"","title":"2-SAT \u95ee\u9898"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/2-SAT%20%E9%97%AE%E9%A2%98/#_1","text":"P4782 \u3010\u6a21\u677f\u30112-SAT \u95ee\u9898 P5782 [POI2001] \u548c\u5e73\u59d4\u5458\u4f1a P4171 [JSOI2010] \u6ee1\u6c49\u5168\u5e2d \u53c2\u8003\u4ee3\u7801 P4782 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> #include <stack> #include <vector> using namespace std ; int n , m , _i , a , _j , b ; vector < int > g [ 2000007 ]; int s [ 2000007 ], scnt ; int dfn [ 2000007 ], low [ 2000007 ], q [ 2000007 ]; int belong [ 2000007 ], bs [ 2000007 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 ; s [ ++ scnt ] = cur ; for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s [ scnt ] != cur ) belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; } } int iv ( int i , int v ) { return i + v * n ; } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> _i >> a >> _j >> b ; g [ _i + n * ( a ^ 1 )]. push_back ( _j + n * ( b & 1 )); g [ _j + n * ( b ^ 1 )]. push_back ( _i + n * ( a & 1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"IMPOSSIBLE\" << endl ; return 0 ; } cout << \"POSSIBLE\" << endl ; for ( int i = 1 ; i <= n ; i ++ ) cout << ( belong [ i ] > belong [ i + n ]) << ' ' ; cout << endl ; } P5782 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <stdio.h> #include <string.h> #define min(a, b) (((a) < (b)) ? (a) : (b)) int n , m , a , b ; const int maxn = 8e3 + 7 ; const int maxm = 2e4 + 7 ; int head [ maxn * 2 ], nxt [ maxm * 4 ], to [ maxm * 4 ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], ins [ maxn * 2 ], scnt ; int belong [ maxn * 2 ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; ~ i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( low [ u ] == dfn [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int main () { bool flag = 1 ; memset ( head , -1 , sizeof ( head )); memset ( to , -1 , sizeof ( to )); scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ), a -- , b -- ; add ( a , b ^ 1 ), add ( b , a ^ 1 ); } for ( int i = 0 ; i < n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] == belong [ i ^ 1 ]) flag = 0 ; if ( flag ) { for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] < belong [ i ^ 1 ]) printf ( \"%d \\n \" , i + 1 ); else printf ( \"%d \\n \" , ( i ^ 1 ) + 1 ); } else puts ( \"NIE\" ); } P4171 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <iostream> #include <stack> #include <vector> using namespace std ; int k ; int n , m , id1 , id2 ; char t1 , t2 ; vector < int > g [ 207 ]; stack < int > s ; int dfn [ 207 ], low [ 207 ], belong [ 207 ], bs [ 207 ], q [ 207 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 , s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s . top () != cur ) belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); } } inline int iv ( char t , int i ) { if ( t == 'h' || t == 'l' ) return i ; else return n + i ; } int main () { cin >> k ; while ( k -- ) { cin >> n >> m ; bcnt = cnt = 0 ; for (; s . size (); s . pop ()) ; for ( int i = 1 ; i <= n * 2 ; i ++ ) g [ i ]. clear (), q [ i ] = dfn [ i ] = low [ i ] = belong [ i ] = bs [ i ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> t1 >> id1 >> t2 >> id2 ; g [ iv ( t1 - 1 , id1 )]. push_back ( iv ( t2 , id2 )); g [ iv ( t2 - 1 , id2 )]. push_back ( iv ( t1 , id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"BAD\" << endl ; goto flag ; } cout << \"GOOD\" << endl ; flag :; } }","title":"\u6a21\u677f\u9898"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/2-SAT%20%E9%97%AE%E9%A2%98/#p3825-noi2017","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u5c0f L \u6709 A\u3001B\u3001C \u4e09\u8f86\u8d5b\u8f66\uff0cn \u573a\u6e38\u620f\u4e2d\u6709 d \u573a \\((d \\leq 8, n \\leq 5 \\times 10^4)\\) \u4e0d\u9650\u5236\u8d5b\u8f66\uff0c\u5176\u4f59\u7684\u573a\u6b21\u4f1a\u7981\u6b62\u67d0\u4e00\u8f86\u8d5b\u8f66\u3002\u8fd8\u6709 m \u6761 \\((m \\leq 10^4)\\) \u89c4\u5219\u9650\u5236\u5982\u679c\u5728\u573a\u6b21 \\(i\\) \u4f7f\u7528\u67d0\u4e00\u8d5b\u8f66\uff0c\u5728\u573a\u6b21 \\(j\\) \u5fc5\u987b\u4f7f\u7528\u67d0\u79cd\u8d5b\u8f66\u3002\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u82e5\u6709\u89e3\uff0c\u8f93\u51fa\u4e00\u79cd\u65b9\u6848\u3002 \u89e3\u6cd5\uff1a\u8003\u8651\u5230\u7edd\u5927\u591a\u6570\u573a\u6b21\u53ea\u80fd\u4f7f\u7528\u4e24\u8f66\u4e4b\u4e00\uff0c\u679a\u4e3e \\(d\\) \u573a\u4e0d\u9650\u8d5b\u8f66\u7684\u573a\u6b21\u9650\u5236 A \u6216\u9650\u5236 B\uff0c\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O((n+m)\\cdot 2^d)\\) \u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 ; char S [ maxn ]; int n , d , m ; int head [ maxn * 2 ], nxt [ maxm * 2 ], to [ maxm * 2 ], cnt ; struct sat { int i , j ; char hi , hj ; } q [ maxm ]; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int anti ( int u ) { if ( u > n ) return u - n ; else return u + n ; } int id ( int u , char c ) { if ( c == (( S [ u ] == 'a' ) ? 'b' : 'a' )) return u ; return u + n ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], belong [ maxn * 2 ], bcnt , scnt , ins [ maxn * 2 ]; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { ++ bcnt ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int solve () { cnt = 0 , dcnt = 0 , bcnt = 0 , scnt = 0 ; memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); memset ( s , 0 , sizeof ( s )); memset ( belong , 0 , sizeof ( belong )); memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); for ( int i = 1 ; i <= m ; i ++ ) { if ( q [ i ]. i == q [ i ]. j && q [ i ]. hi == q [ i ]. hj ) continue ; if ( q [ i ]. hi == S [ q [ i ]. i ]) continue ; int id1 = id ( q [ i ]. i , q [ i ]. hi ), id2 = id ( q [ i ]. j , q [ i ]. hj ); if ( q [ i ]. hj == S [ q [ i ]. j ]) add ( id1 , anti ( id1 )); else add ( id1 , id2 ), add ( anti ( id2 ), anti ( id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( belong [ i ] == belong [ anti ( i )]) return 0 ; } return 1 ; } int xpos [ 9 ], xcnt ; bool flag ; int main () { scanf ( \"%d %d \\n %s \\n %d\" , & n , & d , S + 1 , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %c %d %c\" , & ( q [ i ]. i ), & ( q [ i ]. hi ), & ( q [ i ]. j ), & ( q [ i ]. hj )); q [ i ]. hi += 32 , q [ i ]. hj += 32 ; } for ( int i = 1 ; i <= n ; i ++ ) if ( S [ i ] == 'x' ) xpos [ xcnt ++ ] = i ; for ( int i = 0 ; i < ( 1 << d ); i ++ ) { for ( int j = 0 ; j < d ; j ++ ) if ( i & ( 1 << j )) S [ xpos [ j ]] = 'a' ; else S [ xpos [ j ]] = 'b' ; flag = flag || solve (); if ( flag ) break ; } if ( flag ) for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%c\" , ( belong [ i ] < belong [ anti ( i )]) ? (( S [ i ] == 'a' ) ? 'B' : 'A' ) : (( S [ i ] == 'c' ) ? 'B' : 'C' )); else puts ( \"-1 \\n \" ); }","title":"P3825 [NOI2017] \u6e38\u620f"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/2-SAT%20%E9%97%AE%E9%A2%98/#p3209-hnoi2010","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1aT \u7ec4\u6570\u636e \\((T\\leq 300)\\) \uff0c\u7ed9\u4f60\u4e00\u4e2a\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u548c\u5176\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5224\u65ad\u8be5\u56fe\u662f\u5426\u4e3a\u5e73\u9762\u56fe\u3002 \\(N\\leq 200\\) \u3002 \u89e3\u6cd5\uff1a\u4e3a\u4e86\u7b80\u5316\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u9762\u56fe\u5b9a\u7406 \\(m \\leq 3\\times n - 6\\) \uff0c\u521d\u6b65\u6392\u9664\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u60c5\u51b5\u3002\u4e00\u6761\u8fb9\u53ef\u4ee5\u5728\u73af\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u73af\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fb9\u7684\u77db\u76fe\u5efa\u7acb\u5173\u7cfb\uff0c\u4ece\u800c\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\u6c42\u89e3\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 120007 ; int t , n , m ; int _t1 , _t2 ; int head [ maxn ], nxt [ maxn ], to [ maxn ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn ], low [ maxn ], dcnt ; int s [ maxn ], ins [ maxn ], scnt ; int belong [ maxn ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ cnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } void init () { cnt = 0 , dcnt = 0 , bcnt = 0 ; memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); } int l [ maxn ], r [ maxn ]; int hid [ maxn ]; int flag ; int main () { scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); assert ( n <= 200 ); if ( m <= n * 3 - 6 ) flag = 1 ; else flag = 0 ; for ( int i = 1 ; i <= m ; i ++ ) if ( flag ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); else scanf ( \"%d%d\" , & _t1 , & _t2 ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & _t1 ), hid [ _t1 ] = i ; if ( ! flag ) { puts ( \"NO\" ); continue ; } init (); for ( int i = 1 ; i < m ; i ++ ) for ( int j = i + 1 ; j <= m ; j ++ ) { int a , b , c , d ; a = l [ i ], b = r [ i ], c = l [ j ], d = r [ j ]; a = hid [ a ], b = hid [ b ], c = hid [ c ], d = hid [ d ]; if ( b < a ) swap ( a , b ); if ( d < c ) swap ( c , d ); if (( a < c && c < b && b < d ) || ( c < a && a < d && d < b )) add ( i , j + m ), add ( i + m , j ), add ( j , i + m ), add ( j + m , i ); } for ( int i = 1 ; i <= m * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= m ; i ++ ) if ( belong [ i ] == belong [ i + m ]) { puts ( \"NO\" ), flag = 0 ; break ; } if ( flag ) puts ( \"YES\" ); } }","title":"P3209 [HNOI2010] \u5e73\u9762\u56fe\u5224\u5b9a"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/%E7%82%B9%E5%88%86%E6%B2%BB/","text":"\u70b9\u5206\u6cbb \u00b6 \u6a21\u677f\u9898 \u00b6 P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1 P4178 Tree \u53c2\u8003\u4ee3\u7801 P3806 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #include <algorithm> #include <iostream> using namespace std ; const int maxn = 1e4 + 7 , maxm = 2e4 + 7 , maxq = 1e2 + 7 ; int n ; int head [ maxn ], nxt [ maxm ], to [ maxm ], w [ maxm ], cnt ; bool blocked [ maxn ]; void add ( int u , int v , int a ) { nxt [ ++ cnt ] = head [ u ], head [ u ] = cnt ; to [ cnt ] = v , w [ cnt ] = a ; } int m ; int q [ maxq ], ans [ maxq ]; int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; } struct p { int dis , id , belong ; const bool operator < ( const p & b ) const { return dis < b . dis ; } } dis [ maxn ]; int dcnt , ust ; void get_dis ( int u , int fa , int d ) { if ( u == root ) dcnt = 0 , dis [ ++ dcnt ] = p { d , u , u }; else dis [ ++ dcnt ] = p { d , u , ust }; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( u == root ) ust = v ; if ( v != fa && ! blocked [ v ]) get_dis ( v , u , d + w [ i ]); } } void calc ( int u ) { get_dis ( u , 0 , 0 ); sort ( dis + 1 , dis + dcnt + 1 ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ! ans [ i ]) { int l = 1 , r = dcnt ; while ( l < r ) { if ( dis [ l ]. dis + dis [ r ]. dis > q [ i ]) r -- ; else if ( dis [ l ]. dis + dis [ r ]. dis < q [ i ]) l ++ ; else if ( dis [ l ]. belong == dis [ r ]. belong ) { if ( dis [ r ]. dis == dis [ r - 1 ]. dis ) r -- ; else l ++ ; } else { ans [ i ] = 1 ; break ; } } } } } void solve ( int u ) { blocked [ u ] = 1 ; calc ( u ); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! blocked [ v ]) { minch = n , tsiz = siz [ v ]; get_root ( v , 0 ); solve ( root ); } } } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i < n ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & q [ i ]); if ( q [ i ] == 0 ) ans [ i ] = 1 ; } minch = n , tsiz = n ; get_root ( 1 , 0 ); solve ( root ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ans [ i ]) puts ( \"AYE\" ); else puts ( \"NAY\" ); } }","title":"\u70b9\u5206\u6cbb"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/%E7%82%B9%E5%88%86%E6%B2%BB/#_1","text":"","title":"\u70b9\u5206\u6cbb"},{"location":"%E9%A2%98%E8%A7%A3/%E5%9B%BE%E8%AE%BA/%E7%82%B9%E5%88%86%E6%B2%BB/#_2","text":"P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1 P4178 Tree \u53c2\u8003\u4ee3\u7801 P3806 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #include <algorithm> #include <iostream> using namespace std ; const int maxn = 1e4 + 7 , maxm = 2e4 + 7 , maxq = 1e2 + 7 ; int n ; int head [ maxn ], nxt [ maxm ], to [ maxm ], w [ maxm ], cnt ; bool blocked [ maxn ]; void add ( int u , int v , int a ) { nxt [ ++ cnt ] = head [ u ], head [ u ] = cnt ; to [ cnt ] = v , w [ cnt ] = a ; } int m ; int q [ maxq ], ans [ maxq ]; int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; } struct p { int dis , id , belong ; const bool operator < ( const p & b ) const { return dis < b . dis ; } } dis [ maxn ]; int dcnt , ust ; void get_dis ( int u , int fa , int d ) { if ( u == root ) dcnt = 0 , dis [ ++ dcnt ] = p { d , u , u }; else dis [ ++ dcnt ] = p { d , u , ust }; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( u == root ) ust = v ; if ( v != fa && ! blocked [ v ]) get_dis ( v , u , d + w [ i ]); } } void calc ( int u ) { get_dis ( u , 0 , 0 ); sort ( dis + 1 , dis + dcnt + 1 ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ! ans [ i ]) { int l = 1 , r = dcnt ; while ( l < r ) { if ( dis [ l ]. dis + dis [ r ]. dis > q [ i ]) r -- ; else if ( dis [ l ]. dis + dis [ r ]. dis < q [ i ]) l ++ ; else if ( dis [ l ]. belong == dis [ r ]. belong ) { if ( dis [ r ]. dis == dis [ r - 1 ]. dis ) r -- ; else l ++ ; } else { ans [ i ] = 1 ; break ; } } } } } void solve ( int u ) { blocked [ u ] = 1 ; calc ( u ); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! blocked [ v ]) { minch = n , tsiz = siz [ v ]; get_root ( v , 0 ); solve ( root ); } } } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i < n ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & q [ i ]); if ( q [ i ] == 0 ) ans [ i ] = 1 ; } minch = n , tsiz = n ; get_root ( 1 , 0 ); solve ( root ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ans [ i ]) puts ( \"AYE\" ); else puts ( \"NAY\" ); } }","title":"\u6a21\u677f\u9898"},{"location":"%E9%A2%98%E8%A7%A3/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"","title":"Index"},{"location":"%E9%A2%98%E8%A7%A3/%E6%90%9C%E7%B4%A2/","text":"","title":"Index"},{"location":"%E9%A2%98%E8%A7%A3/%E6%95%B0%E5%AD%A6/","text":"","title":"Index"},{"location":"%E9%A2%98%E8%A7%A3/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"","title":"Index"},{"location":"%E9%A2%98%E8%A7%A3/%E7%AE%97%E6%B3%95%E6%9D%82%E9%A1%B9/","text":"","title":"Index"},{"location":"%E9%A2%98%E8%A7%A3/%E8%AE%B2%E8%AF%BE%E5%86%85%E5%AE%B9/2022-3-5%20%E9%A2%98%E7%9B%AE/","text":"2022/3/5 \u00b6","title":"2022/3/5"},{"location":"%E9%A2%98%E8%A7%A3/%E8%AE%B2%E8%AF%BE%E5%86%85%E5%AE%B9/2022-3-5%20%E9%A2%98%E7%9B%AE/#202235","text":"","title":"2022/3/5"}]}