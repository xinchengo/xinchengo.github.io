{"config":{"indexing":"full","lang":["en","jp"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u6bcf\u4e00\u4e2a\u5e73\u51e1\u7684\u5b66\u751f\uff0c\u90fd\u6709\u4e00\u9897\u6210\u4e3a\u5377\u738b\uff0c\u6539\u5929\u6362\u547d\u7684\u96c4\u5fc3\u3002 OI \u662f\u4e00\u4e2a\u5947\u5999\u7684\u4e16\u754c\uff0c\u68a6\u60f3\u5728\u8fd9\u91cc\u751f\u6839\u53d1\u82bd\uff0c\u50cf\u4e00\u9897\u9897\u84b2\u516c\u82f1\uff0c\u5728\u6625\u98ce\u7684\u5439\u62c2\u4e0b\uff0c\u62e5\u62b1\u7740\u84dd\u5929\uff0c\u53bb\u5230\u5f88\u8fdc\u5f88\u8fdc\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u603b\u662f\u5145\u6ee1\u7740\u4e0d\u671f\u800c\u81f3\u7684\u6e29\u6696\u548c\u751f\u751f\u4e0d\u606f\u7684\u5e0c\u671b\u3002 \u94fe\u63a5 \u00b6 Online Judge: \u6d1b\u8c37 \uff0c Codeforces \uff0c LibreOJ \u3002 \u8d44\u6e90\u7f51\u7ad9\uff1a OI Wiki \uff0c MY OI \u3002 \u4e2a\u4eba\u8d44\u6e90\uff1a \u535a\u5ba2\u4ed3\u5e93 \uff0c \u4ee3\u7801\u4ed3\u5e93 \u7ec3\u4e60\u6570\u636e \u00b6 OI \u751f\u6daf\u5927\u4e8b\u8bb0 \u00b6 \u505a\u9898 \u00b6 \u6d1b\u8c37\u4e24\u767e\u9898\u796d\uff1a P1120 \u5c0f\u6728\u68cd \uff3b\u6570\u636e\u52a0\u5f3a\u7248\uff3d 2021/7/23 \u6d1b\u8c37\u4e09\u767e\u9898\u796d\uff1a CF1619F Let\u2019s Play the Hat? 2021/12/22 \u7ade\u8d5b \u00b6 CSP-J 2020 \u4e00\u5e06\u98ce\u987a \u4e00\u7b49 240 \u5206 CSP-S 2021 \u53d1\u6325\u5931\u5e38 \u4e8c\u7b49 \u4e0d\u5230 100 \u5206 NOIP 2021 \u72af\u4e86\u201c\u5c0f\u201d\u9519\u8bef puts(\"-1\\n\"); \u6bc1\u6211\u9752\u6625 \u65ad\u6211\u524d\u9014 \u9057\u6068\u7ec8\u751f","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u6bcf\u4e00\u4e2a\u5e73\u51e1\u7684\u5b66\u751f\uff0c\u90fd\u6709\u4e00\u9897\u6210\u4e3a\u5377\u738b\uff0c\u6539\u5929\u6362\u547d\u7684\u96c4\u5fc3\u3002 OI \u662f\u4e00\u4e2a\u5947\u5999\u7684\u4e16\u754c\uff0c\u68a6\u60f3\u5728\u8fd9\u91cc\u751f\u6839\u53d1\u82bd\uff0c\u50cf\u4e00\u9897\u9897\u84b2\u516c\u82f1\uff0c\u5728\u6625\u98ce\u7684\u5439\u62c2\u4e0b\uff0c\u62e5\u62b1\u7740\u84dd\u5929\uff0c\u53bb\u5230\u5f88\u8fdc\u5f88\u8fdc\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u603b\u662f\u5145\u6ee1\u7740\u4e0d\u671f\u800c\u81f3\u7684\u6e29\u6696\u548c\u751f\u751f\u4e0d\u606f\u7684\u5e0c\u671b\u3002","title":"\u7b80\u4ecb"},{"location":"#_2","text":"Online Judge: \u6d1b\u8c37 \uff0c Codeforces \uff0c LibreOJ \u3002 \u8d44\u6e90\u7f51\u7ad9\uff1a OI Wiki \uff0c MY OI \u3002 \u4e2a\u4eba\u8d44\u6e90\uff1a \u535a\u5ba2\u4ed3\u5e93 \uff0c \u4ee3\u7801\u4ed3\u5e93","title":"\u94fe\u63a5"},{"location":"#_3","text":"","title":"\u7ec3\u4e60\u6570\u636e"},{"location":"#oi","text":"","title":"OI \u751f\u6daf\u5927\u4e8b\u8bb0"},{"location":"#_4","text":"\u6d1b\u8c37\u4e24\u767e\u9898\u796d\uff1a P1120 \u5c0f\u6728\u68cd \uff3b\u6570\u636e\u52a0\u5f3a\u7248\uff3d 2021/7/23 \u6d1b\u8c37\u4e09\u767e\u9898\u796d\uff1a CF1619F Let\u2019s Play the Hat? 2021/12/22","title":"\u505a\u9898"},{"location":"#_5","text":"CSP-J 2020 \u4e00\u5e06\u98ce\u987a \u4e00\u7b49 240 \u5206 CSP-S 2021 \u53d1\u6325\u5931\u5e38 \u4e8c\u7b49 \u4e0d\u5230 100 \u5206 NOIP 2021 \u72af\u4e86\u201c\u5c0f\u201d\u9519\u8bef puts(\"-1\\n\"); \u6bc1\u6211\u9752\u6625 \u65ad\u6211\u524d\u9014 \u9057\u6068\u7ec8\u751f","title":"\u7ade\u8d5b"},{"location":"summary/","text":"\u7b80\u4ecb \u7b14\u8bb0 \u7b14\u8bb0\u5927\u7eb2 \u4ee3\u7801\u6a21\u677f \u6570\u5b66\u77e5\u8bc6 \u4e13\u9898 \u6742\u6587 \u9898\u89e3 solutions/*.md \u52a8\u6001\u89c4\u5212 \u6570\u5b66 \u56fe\u8bba","title":"Summary"},{"location":"draft/math1.md/","text":"","title":"Math1.md"},{"location":"notes/","text":"\u7b14\u8bb0\u5927\u7eb2 \u00b6 \u6ce8\u610f\u4e8b\u9879 \u00b6 \u8bed\u8a00 \u00b6 \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff1a\u56db\u5219\u8fd0\u7b97 \\(>\\) \u5173\u7cfb\u8fd0\u7b97 \\(>\\) \u4f4d\u8fd0\u7b97 \\(>\\) \u903b\u8f91\u8fd0\u7b97\u3002 \u8f93\u51fa\uff1a\u5c3d\u91cf\u5c11\u6df7\u7528\uff1b puts \u4f1a\u81ea\u52a8\u6362\u884c\u3002 \u6570\u7ec4\uff1a\u5c3d\u91cf\u5f00\u6700\u5927\u4f7f\u7528 \\(+ 7\\) \u3002 \u4e8c\u7ef4\u6570\u7ec4\uff1a\u6ce8\u610f\u5fc5\u987b\u8981\u52a0 2 \u4e2a\u62ec\u53f7\uff0c\u53ea\u52a0\u4e00\u4e2a\u62ec\u53f7\u8fd4\u56de\u7684\u662f\u6307\u9488\uff0c\u6052\u5927\u4e8e0\uff0c\u4e14\u4e0d\u62a5\u9519\u3002 \u5c40\u90e8\u53d8\u91cf\u8981\u521d\u59cb\u5316\u3002 \u53d8\u91cf\u4e0d\u8981\u91cd\u540d\uff0c\u907f\u514d\u4f7f\u7528\u5982 cnt \u7b49\u53ef\u80fd\u5f15\u8d77\u6df7\u6dc6\u7684\u53d8\u91cf\u540d\u3002 memset \u5c3d\u91cf\u53ea\u521d\u59cb\u5316 \\(0\\) \u548c \\(-1\\) \u3002 STL\uff1a\u65e0\u5173\u7d27\u8981\u7684\u5c11\u7528\uff08\u5982\u5b58\u56fe\uff0c stack \uff09\u3002 \u7b97\u6cd5 \u00b6 Tarjan\uff1a\u5f3a\u8fde\u901a\u5206\u91cf \\(=\\) \u53cc\u8fde\u901a\u5206\u91cf\u3002\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002\u6ce8\u610f\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6 if(dfn[v] < dfn[u] && v != fa) \u624d\u662f\u6b63\u786e\u7684\uff0c\u4e00\u822c\u5efa\u8bae\u5199 if(ins[v]) \u3002 \u6700\u77ed\u8def\uff1aSPFA \u7528 queue \uff0c\u52a0 vis \uff0cDijkstra \u7528 priority_queue \uff0c\u4e0d\u52a0 vis \u3002 \u500d\u589e\u6c42 LCA\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002 \u6570\u636e\u7ed3\u6784 \u00b6 ST \u8868\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff1a\u5bf9\u4e8e\u6d89\u53ca\u8d1f\u6570\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u6ce8\u610f\u7528\u53f3\u79fb\u8fd0\u7b97\u7b26\uff0c\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7684\u662f\u201c \u5411\u4e0b \u53d6\u6574\u201d\uff0c\u4e0d\u662f\u201c \u5411\u96f6 \u53d6\u6574\u201d\u3002 \u6570\u5b66 \u00b6 \u516c\u5f0f\u6c42\u7ec4\u5408\u6570\uff1a\u9884\u5904\u7406\u9636\u4e58\u548c\u9636\u4e58\u9006\u5143\u65f6\uff0c\u4e00\u5b9a\u8981\u8bbe pinv[0]=1 \u3002 \u4ee3\u7801\u6a21\u677f \u00b6 \u8be6\u89c1 \u4ee3\u7801\u6a21\u677f","title":"\u7b14\u8bb0\u5927\u7eb2"},{"location":"notes/#_1","text":"","title":"\u7b14\u8bb0\u5927\u7eb2"},{"location":"notes/#_2","text":"","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"notes/#_3","text":"\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff1a\u56db\u5219\u8fd0\u7b97 \\(>\\) \u5173\u7cfb\u8fd0\u7b97 \\(>\\) \u4f4d\u8fd0\u7b97 \\(>\\) \u903b\u8f91\u8fd0\u7b97\u3002 \u8f93\u51fa\uff1a\u5c3d\u91cf\u5c11\u6df7\u7528\uff1b puts \u4f1a\u81ea\u52a8\u6362\u884c\u3002 \u6570\u7ec4\uff1a\u5c3d\u91cf\u5f00\u6700\u5927\u4f7f\u7528 \\(+ 7\\) \u3002 \u4e8c\u7ef4\u6570\u7ec4\uff1a\u6ce8\u610f\u5fc5\u987b\u8981\u52a0 2 \u4e2a\u62ec\u53f7\uff0c\u53ea\u52a0\u4e00\u4e2a\u62ec\u53f7\u8fd4\u56de\u7684\u662f\u6307\u9488\uff0c\u6052\u5927\u4e8e0\uff0c\u4e14\u4e0d\u62a5\u9519\u3002 \u5c40\u90e8\u53d8\u91cf\u8981\u521d\u59cb\u5316\u3002 \u53d8\u91cf\u4e0d\u8981\u91cd\u540d\uff0c\u907f\u514d\u4f7f\u7528\u5982 cnt \u7b49\u53ef\u80fd\u5f15\u8d77\u6df7\u6dc6\u7684\u53d8\u91cf\u540d\u3002 memset \u5c3d\u91cf\u53ea\u521d\u59cb\u5316 \\(0\\) \u548c \\(-1\\) \u3002 STL\uff1a\u65e0\u5173\u7d27\u8981\u7684\u5c11\u7528\uff08\u5982\u5b58\u56fe\uff0c stack \uff09\u3002","title":"\u8bed\u8a00"},{"location":"notes/#_4","text":"Tarjan\uff1a\u5f3a\u8fde\u901a\u5206\u91cf \\(=\\) \u53cc\u8fde\u901a\u5206\u91cf\u3002\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002\u6ce8\u610f\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6 if(dfn[v] < dfn[u] && v != fa) \u624d\u662f\u6b63\u786e\u7684\uff0c\u4e00\u822c\u5efa\u8bae\u5199 if(ins[v]) \u3002 \u6700\u77ed\u8def\uff1aSPFA \u7528 queue \uff0c\u52a0 vis \uff0cDijkstra \u7528 priority_queue \uff0c\u4e0d\u52a0 vis \u3002 \u500d\u589e\u6c42 LCA\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002","title":"\u7b97\u6cd5"},{"location":"notes/#_5","text":"ST \u8868\uff1a\u6570\u7ec4 log \u4e00\u7ef4\u8981\u5f00 \\(\\log(n)+1\\) \u3002 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff1a\u5bf9\u4e8e\u6d89\u53ca\u8d1f\u6570\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u6ce8\u610f\u7528\u53f3\u79fb\u8fd0\u7b97\u7b26\uff0c\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7684\u662f\u201c \u5411\u4e0b \u53d6\u6574\u201d\uff0c\u4e0d\u662f\u201c \u5411\u96f6 \u53d6\u6574\u201d\u3002","title":"\u6570\u636e\u7ed3\u6784"},{"location":"notes/#_6","text":"\u516c\u5f0f\u6c42\u7ec4\u5408\u6570\uff1a\u9884\u5904\u7406\u9636\u4e58\u548c\u9636\u4e58\u9006\u5143\u65f6\uff0c\u4e00\u5b9a\u8981\u8bbe pinv[0]=1 \u3002","title":"\u6570\u5b66"},{"location":"notes/#_7","text":"\u8be6\u89c1 \u4ee3\u7801\u6a21\u677f","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"notes/maths/","text":"\u6570\u5b66\u77e5\u8bc6 \u00b6 \u540c\u4f59 \u00b6 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5 \u00b6 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08Extended Euclidean algorithm, EXGCD\uff09\uff0c\u5e38\u7528\u4e8e\u6c42 \\(ax+by=\\gcd(a,b)\\) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 1 \u63a8\u5bfc\u5982\u4e0b\uff1a \\[ \\begin{aligned} \\because\\ &ax_1+by_1=gcd(a,b)\\\\ &bx_2+(a\\bmod b)y_2=gcd(b,a\\bmod b)\\\\ \\therefore\\ &ax_1+by_1=bx_2+(a\\bmod b)y_2\\\\ \\textsf{\u53c8}\\because\\ & a\\bmod b=a-(\\lfloor\\frac{a}{b}\\rfloor\\times b)\\\\ \\therefore\\ &ax_1+by_1=bx_2+(a-(\\lfloor\\frac{a}{b}\\rfloor\\times b))y_2\\\\ \\textsf{\u5373}\\ &ax_1+by_1=ay_2-b(x_2-\\lfloor\\frac{a}{b}\\rfloor y_2) \\end{aligned} \\] \u6545\u56de\u6eaf\u8fc7\u7a0b\u4e3a\uff1a \\(x_1=y_2,y_1=x_2-\\lfloor\\frac{a}{b}\\rfloor y_2\\) \u3002 1 2 3 4 5 6 7 8 9 10 long long exgcd ( long long a , long long b , long long & x , long long & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return a ; } exgcd ( b , a % b , y , x ); y -= a / b * x ; } \u4e58\u6cd5\u9006\u5143 \u00b6 \u9006\u5143\u7684\u5b58\u5728\u6761\u4ef6\uff1aa \u4e0e p \u4e92\u8d28\u3002 \u5355\u4e2a\u6570\u7684\u9006\u5143\u6c42\u6cd5\uff1a\u5feb\u901f\u5e42\u6cd5\uff08\u8981\u6c42\u662f\u8d28\u6570\uff09\u548c\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\uff08\u4e0d\u8981\u6c42\u662f\u8d28\u6570\uff09\u3002 \u9006\u5143\u7684\u7ebf\u6027\u9012\u63a8\uff1a inv[i]=(p-p/i)*inv[p%i]%p \u3002 \u9636\u4e58\u9006\u5143\uff1a \u6c42\u51fa 1~n \u7684\u9636\u4e58\uff1b \u6c42\u51fa n! \u7684\u9006\u5143\uff1b \u7531 i! \u7684\u9006\u5143\u9006\u63a8\u51fa (i-1)! \u7684\u9006\u5143\u3002 1~n \u7684\u9636\u4e58\u9006\u5143\u53ef\u4ee5\u53cd\u63a8\u51fa 1~n \u7684\u9006\u5143\u3002\u524d\u7f00\u79ef\u9006\u5143\u53ef\u4ee5\u53cd\u63a8\u51fa\u4efb\u610f n \u4e2a\u6570\u7684\u9006\u5143\u3002 \u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(n)\uff0c\u65b9\u6cd5 1 \u66f4\u4e3a\u7b80\u5355\uff0c\u4f46\u65b9\u6cd5 2 \u7684\u7406\u89e3\u66f4\u4e3a\u76f4\u89c2\u3002 \u9006\u5143\u7684\u4f7f\u7528\u573a\u666f\uff1a \\(C_n^m=\\dfrac{n!}{m!\\cdot(n-m)!}\\) \u7ebf\u6027\u6c42 1~n \u7684\u9006\u5143\uff1a 1 2 3 inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = 1L L * ( p - p / i ) * inv [ p % i ] % p ; \u6c42\u9636\u4e58\u9006\u5143\u548c 1~n \u7684\u9006\u5143\uff1a 1 2 3 4 5 6 7 8 9 10 pmod [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) pmod [ i ] = 1L L * pmod [ i -1 ] * i % p ; exgcd ( pmod [ n ], p , x , y ); pinv [ n ] = ( x % p + p ) % p ; for ( int i = n ; i >= 1 ; i -- ) pinv [ i -1 ] = 1L L * i * pinv [ i ] % p ; inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = 1L L * pmod [ i -1 ] * pinv [ i ] % p ; Lucas \u5b9a\u7406 \u00b6 \\[ C_n^m=\\prod_{i=0}^{k}{C_{n_i}^{m_i}}\\bmod p \\] \u5728 OI \u4e2d\u5e38\u7528\u7684\u5f62\u5f0f\u662f \\[ C_n^m=C_{n/p}^{m/p}\\cdot C_{n\\ \\bmod\\ p}^{m\\ \\bmod\\ p}\\bmod p \\] \u4e24\u516c\u5f0f\u662f\u7b49\u4ef7\u7684\uff0cOI \u4e2d\u7684\u516c\u5f0f\u53ef\u5316\u4e3a \\[ C_n^m=\\left(\\prod_{i=1}^{k}{C_{n_i}^{m_i}}\\right)\\cdot C_{n_0}^{m_0}\\bmod p \\] 1 2 3 4 5 long long Lucas ( long long n , long long m , long long p ) { if ( m == 0 ) return 1 ; else return C ( n % p , m % p , p ) * Lucas ( n / p , m / p , p ) % p ; } \u8be5\u7b97\u6cd5\u9002\u7528\u4e8e p \u4e0d\u5927\u7684\u60c5\u51b5\u3002 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u6a21\u7ebf\u6027\u65b9\u7a0b\u7ec4 \\[ \\begin{cases}x\\equiv a_1\\;\\;(mod\\;\\;m_1)\\\\x\\equiv a_2\\;\\;(mod\\;\\;m_2)\\\\ \\cdots \\cdots\\\\x\\equiv a_k\\;\\;(mod\\;\\;m_k)\\\\\\end{cases} \\] \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u7684\u601d\u60f3\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u6a21\u6570\uff0c\u6784\u9020\u4e00\u4e2a\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5e76\u662f\u5176\u5b83\u6240\u6709\u6a21\u6570\u7684\u500d\u6570\u7684\u6570\u5b57\u3002\u5b83\u4eec\u7684\u548c\u663e\u7136\u7b26\u5408\u8981\u6c42\u3002 OI Wiki \u4e2d\u7684\u6709\u5173\u63cf\u8ff0 \u21a9","title":"\u6570\u5b66\u77e5\u8bc6"},{"location":"notes/maths/#_1","text":"","title":"\u6570\u5b66\u77e5\u8bc6"},{"location":"notes/maths/#_2","text":"","title":"\u540c\u4f59"},{"location":"notes/maths/#_3","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08Extended Euclidean algorithm, EXGCD\uff09\uff0c\u5e38\u7528\u4e8e\u6c42 \\(ax+by=\\gcd(a,b)\\) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 1 \u63a8\u5bfc\u5982\u4e0b\uff1a \\[ \\begin{aligned} \\because\\ &ax_1+by_1=gcd(a,b)\\\\ &bx_2+(a\\bmod b)y_2=gcd(b,a\\bmod b)\\\\ \\therefore\\ &ax_1+by_1=bx_2+(a\\bmod b)y_2\\\\ \\textsf{\u53c8}\\because\\ & a\\bmod b=a-(\\lfloor\\frac{a}{b}\\rfloor\\times b)\\\\ \\therefore\\ &ax_1+by_1=bx_2+(a-(\\lfloor\\frac{a}{b}\\rfloor\\times b))y_2\\\\ \\textsf{\u5373}\\ &ax_1+by_1=ay_2-b(x_2-\\lfloor\\frac{a}{b}\\rfloor y_2) \\end{aligned} \\] \u6545\u56de\u6eaf\u8fc7\u7a0b\u4e3a\uff1a \\(x_1=y_2,y_1=x_2-\\lfloor\\frac{a}{b}\\rfloor y_2\\) \u3002 1 2 3 4 5 6 7 8 9 10 long long exgcd ( long long a , long long b , long long & x , long long & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return a ; } exgcd ( b , a % b , y , x ); y -= a / b * x ; }","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5"},{"location":"notes/maths/#_4","text":"\u9006\u5143\u7684\u5b58\u5728\u6761\u4ef6\uff1aa \u4e0e p \u4e92\u8d28\u3002 \u5355\u4e2a\u6570\u7684\u9006\u5143\u6c42\u6cd5\uff1a\u5feb\u901f\u5e42\u6cd5\uff08\u8981\u6c42\u662f\u8d28\u6570\uff09\u548c\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\uff08\u4e0d\u8981\u6c42\u662f\u8d28\u6570\uff09\u3002 \u9006\u5143\u7684\u7ebf\u6027\u9012\u63a8\uff1a inv[i]=(p-p/i)*inv[p%i]%p \u3002 \u9636\u4e58\u9006\u5143\uff1a \u6c42\u51fa 1~n \u7684\u9636\u4e58\uff1b \u6c42\u51fa n! \u7684\u9006\u5143\uff1b \u7531 i! \u7684\u9006\u5143\u9006\u63a8\u51fa (i-1)! \u7684\u9006\u5143\u3002 1~n \u7684\u9636\u4e58\u9006\u5143\u53ef\u4ee5\u53cd\u63a8\u51fa 1~n \u7684\u9006\u5143\u3002\u524d\u7f00\u79ef\u9006\u5143\u53ef\u4ee5\u53cd\u63a8\u51fa\u4efb\u610f n \u4e2a\u6570\u7684\u9006\u5143\u3002 \u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(n)\uff0c\u65b9\u6cd5 1 \u66f4\u4e3a\u7b80\u5355\uff0c\u4f46\u65b9\u6cd5 2 \u7684\u7406\u89e3\u66f4\u4e3a\u76f4\u89c2\u3002 \u9006\u5143\u7684\u4f7f\u7528\u573a\u666f\uff1a \\(C_n^m=\\dfrac{n!}{m!\\cdot(n-m)!}\\) \u7ebf\u6027\u6c42 1~n \u7684\u9006\u5143\uff1a 1 2 3 inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = 1L L * ( p - p / i ) * inv [ p % i ] % p ; \u6c42\u9636\u4e58\u9006\u5143\u548c 1~n \u7684\u9006\u5143\uff1a 1 2 3 4 5 6 7 8 9 10 pmod [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) pmod [ i ] = 1L L * pmod [ i -1 ] * i % p ; exgcd ( pmod [ n ], p , x , y ); pinv [ n ] = ( x % p + p ) % p ; for ( int i = n ; i >= 1 ; i -- ) pinv [ i -1 ] = 1L L * i * pinv [ i ] % p ; inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = 1L L * pmod [ i -1 ] * pinv [ i ] % p ;","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"notes/maths/#lucas","text":"\\[ C_n^m=\\prod_{i=0}^{k}{C_{n_i}^{m_i}}\\bmod p \\] \u5728 OI \u4e2d\u5e38\u7528\u7684\u5f62\u5f0f\u662f \\[ C_n^m=C_{n/p}^{m/p}\\cdot C_{n\\ \\bmod\\ p}^{m\\ \\bmod\\ p}\\bmod p \\] \u4e24\u516c\u5f0f\u662f\u7b49\u4ef7\u7684\uff0cOI \u4e2d\u7684\u516c\u5f0f\u53ef\u5316\u4e3a \\[ C_n^m=\\left(\\prod_{i=1}^{k}{C_{n_i}^{m_i}}\\right)\\cdot C_{n_0}^{m_0}\\bmod p \\] 1 2 3 4 5 long long Lucas ( long long n , long long m , long long p ) { if ( m == 0 ) return 1 ; else return C ( n % p , m % p , p ) * Lucas ( n / p , m / p , p ) % p ; } \u8be5\u7b97\u6cd5\u9002\u7528\u4e8e p \u4e0d\u5927\u7684\u60c5\u51b5\u3002","title":"Lucas \u5b9a\u7406"},{"location":"notes/maths/#_5","text":"\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u7ebf\u6027\u65b9\u7a0b\u7ec4 \\[ \\begin{cases}x\\equiv a_1\\;\\;(mod\\;\\;m_1)\\\\x\\equiv a_2\\;\\;(mod\\;\\;m_2)\\\\ \\cdots \\cdots\\\\x\\equiv a_k\\;\\;(mod\\;\\;m_k)\\\\\\end{cases} \\] \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u7684\u601d\u60f3\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u6a21\u6570\uff0c\u6784\u9020\u4e00\u4e2a\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5e76\u662f\u5176\u5b83\u6240\u6709\u6a21\u6570\u7684\u500d\u6570\u7684\u6570\u5b57\u3002\u5b83\u4eec\u7684\u548c\u663e\u7136\u7b26\u5408\u8981\u6c42\u3002 OI Wiki \u4e2d\u7684\u6709\u5173\u63cf\u8ff0 \u21a9","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"notes/snippets/","text":"\u4ee3\u7801\u6a21\u677f \u00b6 \u6570\u636e\u7ed3\u6784 \u00b6 ST \u8868 \u00b6 \u5b9a\u4e49\uff1a 1 int s [ MAXN ][ MAXLOG ]; \u9884\u5904\u7406\uff08\u6b64\u5904 max \u51fd\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u6ee1\u8db3\u53ef\u91cd\u590d\u8d21\u732e\u6027\u7684\u51fd\u6570\uff0c\u5982 min \uff0c gcd \uff09\uff1a 1 2 3 4 5 6 7 slim = ( int )( log (( double ) n ) / log ( 2.0 )); for ( int i = 1 ; i <= n ; i ++ ) s [ i ][ 0 ] = a [ i ]; for ( int j = 1 ; j <= slim ; j ++ ) for ( int i = 1 ; i <= n ; i ++ ) if ( i + ( 1 << ( j - 1 )) <= n ) s [ i ][ j ] = max ( s [ i ][ j - 1 ], s [ i + ( 1 << ( j - 1 ))][ j - 1 ]); \u67e5\u8be2\uff08\u6709\u5173 max \u51fd\u6570\u540c\u4e0a\uff09\uff1a 1 2 3 4 5 int query ( int l , int r ) { int qlim = ( int )( log (( double )( r - l + 1 )) / log ( 2.0 )); return max ( s [ l ][ qlim ], s [ r - ( 1 << qlim ) + 1 ][ qlim ]); } \u6811\u72b6\u6570\u7ec4 \u00b6 \u57fa\u672c\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int c [ maxn ]; void add ( int x , int k ) { for (; x <= n ; x += x & - x ) c [ x ] += k ; } int ask ( int x ) { int k = 0 ; for (; x ; x -= x & - x ) k += c [ x ]; return k ; } \u500d\u589e\uff08\u4ee5 kth \u4e3a\u4f8b\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int kth ( int x ) { int p = 0 ; for ( int k = maxlog ; k >= 0 ; k -- ) { p += ( 1 << k ); if ( p > n || c [ p ] >= x ) p -= ( 1 << k ); else x -= c [ p ]; } return p + 1 ; } \u89e3\u91ca \u500d\u589e\u7684\u601d\u60f3\u5c31\u662f\u5982\u679c\u8d85\u51fa\u5c31\u56de\u9000\uff0c\u5728\u4e0a\u8ff0\u793a\u4f8b\u7684\u4ee3\u7801\u4e2d\uff0c\u4f4d\u7f6e\u5982\u679c\u8d85\u51fa\u8303\u56f4\u6216\u8005\u5927\u5c0f\u592a\u5927\u5c31\u6267\u884c\u56de\u9000\u3002 \u7ebf\u6bb5\u6811 \u00b6 \u4ee5 \u6d1b\u8c37\u6a21\u677f \u4e3a\u4f8b\u3002 \u5efa\u6811\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 long long a [ maxn ]; long long d [ maxn * 4 ], z [ maxn * 4 ]; void build ( int id , int l , int r ) { if ( l == r ) { d [ id ] = a [ l ]; return ; } int m = ( l + r ) / 2 ; build ( id << 1 , l , m ); build ( id << 1 | 1 , m + 1 , r ); d [ id ] = d [ id << 1 ] + d [ id << 1 | 1 ]; } \u5efa\u6811\u65f6\u53ea\u6d89\u53ca pushup \u64cd\u4f5c\uff0c\u800c\u4e0d\u6d89\u53ca pushdown \u64cd\u4f5c\u3002 \u4e0b\u9762\u662f\u5176\u4ed6\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 void add ( int id , int l , int r , int ql , int qr , long long k ) { if ( ql <= l && r <= qr ) { d [ id ] += 1L L * ( r - l + 1 ) * k ; z [ id ] += k ; return ; } int m = ( l + r ) / 2 ; if ( z [ id ] && l != r ) { d [ id << 1 ] += z [ id ] * ( m - l + 1 ); d [ id << 1 | 1 ] += z [ id ] * ( r - m ); z [ id << 1 ] += z [ id ]; z [ id << 1 | 1 ] += z [ id ]; z [ id ] = 0 ; } if ( ql <= m ) add ( id << 1 , l , m , ql , qr , k ); if ( m < qr ) add ( id << 1 | 1 , m + 1 , r , ql , qr , k ); d [ id ] = d [ id << 1 ] + d [ id << 1 | 1 ]; } long long ask ( int id , int l , int r , int ql , int qr ) { if ( ql <= l && r <= qr ) return d [ id ]; int m = ( l + r ) / 2 ; long long sum = 0 ; if ( z [ id ] && l != r ) { d [ id << 1 ] += z [ id ] * ( m - l + 1 ); d [ id << 1 | 1 ] += z [ id ] * ( r - m ); z [ id << 1 ] += z [ id ]; z [ id << 1 | 1 ] += z [ id ]; z [ id ] = 0 ; } if ( ql <= m ) sum += ask ( id << 1 , l , m , ql , qr ); if ( m < qr ) sum += ask ( id << 1 | 1 , m + 1 , r , ql , qr ); return sum ; } pushdown \u64cd\u4f5c\u7684\u6027\u8d28\u662f \u64cd\u4f5c\u524d\u540e\uff0c\u6811\u7684\u672c\u8d28\u4e0d\u53d8 \u3002\u53ea\u8981\u6d89\u53ca\u4ece\u4e0a\u5f80\u4e0b\u7684\u8bbf\u95ee\uff0c\u90fd\u9700\u8981\u8fdb\u884c pushdown \u64cd\u4f5c\u3002\u800c pushup \u64cd\u4f5c\u53ea\u6709\u5728\u6d89\u53ca\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u9700\u8981\u8fdb\u884c\u3002\u7279\u522b\u7684\u662f\uff0c\u5355\u7eaf pushdown \u4e4b\u540e\u4e0d\u9700\u8981 pushup \u3002 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811 \u00b6 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0d\u63d0\u524d\u5efa\u6811\uff0c\u800c\u662f\u5728\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u5efa\u7acb\uff0c\u5982\u679c\u6ca1\u6709\u5219\u65b0\u5f00\u8fd9\u4e2a\u8282\u70b9\u3002\u4ee5 P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811 \u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 int d [ maxn ], cnt = 1 , rt = 1 ; int ls [ maxn ], rs [ maxn ]; void add ( int & id , int l , int r , int x , int k ) { if ( ! id ) id =++ cnt ; if ( l == r ) { d [ id ] += k ; return ; } int m = ( l + r ) >> 1 ; if ( x <= m ) add ( ls [ id ], l , m , x , k ); else add ( rs [ id ], m + 1 , r , x , k ); d [ id ] = d [ ls [ id ]] + d [ rs [ id ]]; } int ask ( int id , int l , int r , int ql , int qr ) { if ( ! id ) return 0 ; if ( ql <= l && r <= qr ) return d [ id ]; int m = ( l + r ) >> 1 , sum = 0 ; if ( ql <= m ) sum += ask ( ls [ id ], l , m , ql , qr ); if ( m < qr ) sum += ask ( rs [ id ], m + 1 , r , ql , qr ); return sum ; } int kth ( int id , int l , int r , int k ) { if ( ! id ) return -1 ; if ( l == r ) return l ; int m = ( l + r ) >> 1 ; if ( k <= d [ ls [ id ]]) return kth ( ls [ id ], l , m , k ); else return kth ( rs [ id ], m + 1 , r , k - d [ ls [ id ]]); } \u6ce8\u610f \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5f80\u5f80\u9700\u8981\u5e94\u5bf9\u8d1f\u6570\u533a\u95f4\uff0c\u6ce8\u610f\u5728\u9664\u4ee5 2 \u7684\u65f6\u5019\u4f7f\u7528\u53f3\u79fb\u8fd0\u7b97\u7b26\uff0c\u800c\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7684\u662f\u201c \u5411\u4e0b \u53d6\u6574\u201d\uff0c\u4e0d\u662f\u201c \u5411\u96f6 \u53d6\u6574\u201d\u3002C++ \u7684 / \u8fd0\u7b97\u7b26\u662f \u5411\u96f6\u53d6\u6574 \u7684\u3002 Splay \u6811 \u00b6 \u76ee\u524d\u6211\u4f7f\u7528\u7684 Splay \u662f\u6307\u9488\u7248\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 struct node { node * ch [ 2 ]; int val , cnt , siz ; node ( int v ) : ch { nullptr , nullptr }, val ( v ), cnt ( 1 ), siz ( 1 ) {} void pushup () { siz = ( ch [ 0 ] == nullptr ? 0 : ch [ 0 ] -> siz ) + cnt + ( ch [ 1 ] == nullptr ? 0 : ch [ 1 ] -> siz ); } int find ( int v ) { return v == val ? -1 : v > val ; } int chsiz ( int x ) { return ch [ x ] == nullptr ? 0 : ch [ x ] -> siz ; } } * root = nullptr ; void rotate ( node *& cur , bool type ) { node * rt = cur -> ch [ type ]; cur -> ch [ type ] = rt -> ch [ ! type ], rt -> ch [ ! type ] = cur , cur = rt ; cur -> ch [ ! type ] -> pushup (), cur -> pushup (); } void splay ( node *& cur , int val ) { int type1 = cur -> find ( val ); if ( type1 == -1 || cur -> ch [ type1 ] == nullptr ) return ; int type2 = cur -> ch [ type1 ] -> find ( val ); if ( type2 == -1 || cur -> ch [ type1 ] -> ch [ type2 ] == nullptr ) { rotate ( cur , type1 ); return ; } splay ( cur -> ch [ type1 ] -> ch [ type2 ], val ); if ( type1 == type2 ) rotate ( cur , type1 ), rotate ( cur , type2 ); else rotate ( cur -> ch [ type1 ], type2 ), rotate ( cur , type1 ); } \u56fe\u8bba \u00b6 \u6811\u7684\u91cd\u5fc3 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; } \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe \u00b6 1 2 3 4 5 6 7 int head [ MAXN ], nxt [ MAXM ], to [ MAXM ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } \u4ece 1 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a 0\uff1b\u4ece 0 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a -1\u3002 \u56fe\u7684\u8fde\u901a\u6027 \u00b6 \u7f29\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int dfn [ MAXN ], low [ MAXN ], dcnt ; int s [ MAXN ], ins [ MAXN ], scnt ; int belong [ MAXN ], bs [ MAXN ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v , u ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; } } \u4e0d\u5efa\u8bae\u5199 if(dfn[v] < dfn[u] && v != fa) \uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6\u624d\u6b63\u786e\u3002 \u91cd\u94fe\u5256\u5206 \u00b6 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u9884\u5904\u7406 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void predfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { predfs ( v , u ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"notes/snippets/#_1","text":"","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"notes/snippets/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"notes/snippets/#st","text":"\u5b9a\u4e49\uff1a 1 int s [ MAXN ][ MAXLOG ]; \u9884\u5904\u7406\uff08\u6b64\u5904 max \u51fd\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u6ee1\u8db3\u53ef\u91cd\u590d\u8d21\u732e\u6027\u7684\u51fd\u6570\uff0c\u5982 min \uff0c gcd \uff09\uff1a 1 2 3 4 5 6 7 slim = ( int )( log (( double ) n ) / log ( 2.0 )); for ( int i = 1 ; i <= n ; i ++ ) s [ i ][ 0 ] = a [ i ]; for ( int j = 1 ; j <= slim ; j ++ ) for ( int i = 1 ; i <= n ; i ++ ) if ( i + ( 1 << ( j - 1 )) <= n ) s [ i ][ j ] = max ( s [ i ][ j - 1 ], s [ i + ( 1 << ( j - 1 ))][ j - 1 ]); \u67e5\u8be2\uff08\u6709\u5173 max \u51fd\u6570\u540c\u4e0a\uff09\uff1a 1 2 3 4 5 int query ( int l , int r ) { int qlim = ( int )( log (( double )( r - l + 1 )) / log ( 2.0 )); return max ( s [ l ][ qlim ], s [ r - ( 1 << qlim ) + 1 ][ qlim ]); }","title":"ST \u8868"},{"location":"notes/snippets/#_3","text":"\u57fa\u672c\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int c [ maxn ]; void add ( int x , int k ) { for (; x <= n ; x += x & - x ) c [ x ] += k ; } int ask ( int x ) { int k = 0 ; for (; x ; x -= x & - x ) k += c [ x ]; return k ; } \u500d\u589e\uff08\u4ee5 kth \u4e3a\u4f8b\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int kth ( int x ) { int p = 0 ; for ( int k = maxlog ; k >= 0 ; k -- ) { p += ( 1 << k ); if ( p > n || c [ p ] >= x ) p -= ( 1 << k ); else x -= c [ p ]; } return p + 1 ; } \u89e3\u91ca \u500d\u589e\u7684\u601d\u60f3\u5c31\u662f\u5982\u679c\u8d85\u51fa\u5c31\u56de\u9000\uff0c\u5728\u4e0a\u8ff0\u793a\u4f8b\u7684\u4ee3\u7801\u4e2d\uff0c\u4f4d\u7f6e\u5982\u679c\u8d85\u51fa\u8303\u56f4\u6216\u8005\u5927\u5c0f\u592a\u5927\u5c31\u6267\u884c\u56de\u9000\u3002","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"notes/snippets/#_4","text":"\u4ee5 \u6d1b\u8c37\u6a21\u677f \u4e3a\u4f8b\u3002 \u5efa\u6811\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 long long a [ maxn ]; long long d [ maxn * 4 ], z [ maxn * 4 ]; void build ( int id , int l , int r ) { if ( l == r ) { d [ id ] = a [ l ]; return ; } int m = ( l + r ) / 2 ; build ( id << 1 , l , m ); build ( id << 1 | 1 , m + 1 , r ); d [ id ] = d [ id << 1 ] + d [ id << 1 | 1 ]; } \u5efa\u6811\u65f6\u53ea\u6d89\u53ca pushup \u64cd\u4f5c\uff0c\u800c\u4e0d\u6d89\u53ca pushdown \u64cd\u4f5c\u3002 \u4e0b\u9762\u662f\u5176\u4ed6\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 void add ( int id , int l , int r , int ql , int qr , long long k ) { if ( ql <= l && r <= qr ) { d [ id ] += 1L L * ( r - l + 1 ) * k ; z [ id ] += k ; return ; } int m = ( l + r ) / 2 ; if ( z [ id ] && l != r ) { d [ id << 1 ] += z [ id ] * ( m - l + 1 ); d [ id << 1 | 1 ] += z [ id ] * ( r - m ); z [ id << 1 ] += z [ id ]; z [ id << 1 | 1 ] += z [ id ]; z [ id ] = 0 ; } if ( ql <= m ) add ( id << 1 , l , m , ql , qr , k ); if ( m < qr ) add ( id << 1 | 1 , m + 1 , r , ql , qr , k ); d [ id ] = d [ id << 1 ] + d [ id << 1 | 1 ]; } long long ask ( int id , int l , int r , int ql , int qr ) { if ( ql <= l && r <= qr ) return d [ id ]; int m = ( l + r ) / 2 ; long long sum = 0 ; if ( z [ id ] && l != r ) { d [ id << 1 ] += z [ id ] * ( m - l + 1 ); d [ id << 1 | 1 ] += z [ id ] * ( r - m ); z [ id << 1 ] += z [ id ]; z [ id << 1 | 1 ] += z [ id ]; z [ id ] = 0 ; } if ( ql <= m ) sum += ask ( id << 1 , l , m , ql , qr ); if ( m < qr ) sum += ask ( id << 1 | 1 , m + 1 , r , ql , qr ); return sum ; } pushdown \u64cd\u4f5c\u7684\u6027\u8d28\u662f \u64cd\u4f5c\u524d\u540e\uff0c\u6811\u7684\u672c\u8d28\u4e0d\u53d8 \u3002\u53ea\u8981\u6d89\u53ca\u4ece\u4e0a\u5f80\u4e0b\u7684\u8bbf\u95ee\uff0c\u90fd\u9700\u8981\u8fdb\u884c pushdown \u64cd\u4f5c\u3002\u800c pushup \u64cd\u4f5c\u53ea\u6709\u5728\u6d89\u53ca\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u9700\u8981\u8fdb\u884c\u3002\u7279\u522b\u7684\u662f\uff0c\u5355\u7eaf pushdown \u4e4b\u540e\u4e0d\u9700\u8981 pushup \u3002","title":"\u7ebf\u6bb5\u6811"},{"location":"notes/snippets/#_5","text":"\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0d\u63d0\u524d\u5efa\u6811\uff0c\u800c\u662f\u5728\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u5efa\u7acb\uff0c\u5982\u679c\u6ca1\u6709\u5219\u65b0\u5f00\u8fd9\u4e2a\u8282\u70b9\u3002\u4ee5 P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811 \u4e3a\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 int d [ maxn ], cnt = 1 , rt = 1 ; int ls [ maxn ], rs [ maxn ]; void add ( int & id , int l , int r , int x , int k ) { if ( ! id ) id =++ cnt ; if ( l == r ) { d [ id ] += k ; return ; } int m = ( l + r ) >> 1 ; if ( x <= m ) add ( ls [ id ], l , m , x , k ); else add ( rs [ id ], m + 1 , r , x , k ); d [ id ] = d [ ls [ id ]] + d [ rs [ id ]]; } int ask ( int id , int l , int r , int ql , int qr ) { if ( ! id ) return 0 ; if ( ql <= l && r <= qr ) return d [ id ]; int m = ( l + r ) >> 1 , sum = 0 ; if ( ql <= m ) sum += ask ( ls [ id ], l , m , ql , qr ); if ( m < qr ) sum += ask ( rs [ id ], m + 1 , r , ql , qr ); return sum ; } int kth ( int id , int l , int r , int k ) { if ( ! id ) return -1 ; if ( l == r ) return l ; int m = ( l + r ) >> 1 ; if ( k <= d [ ls [ id ]]) return kth ( ls [ id ], l , m , k ); else return kth ( rs [ id ], m + 1 , r , k - d [ ls [ id ]]); } \u6ce8\u610f \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5f80\u5f80\u9700\u8981\u5e94\u5bf9\u8d1f\u6570\u533a\u95f4\uff0c\u6ce8\u610f\u5728\u9664\u4ee5 2 \u7684\u65f6\u5019\u4f7f\u7528\u53f3\u79fb\u8fd0\u7b97\u7b26\uff0c\u800c\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7684\u662f\u201c \u5411\u4e0b \u53d6\u6574\u201d\uff0c\u4e0d\u662f\u201c \u5411\u96f6 \u53d6\u6574\u201d\u3002C++ \u7684 / \u8fd0\u7b97\u7b26\u662f \u5411\u96f6\u53d6\u6574 \u7684\u3002","title":"\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811"},{"location":"notes/snippets/#splay","text":"\u76ee\u524d\u6211\u4f7f\u7528\u7684 Splay \u662f\u6307\u9488\u7248\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 struct node { node * ch [ 2 ]; int val , cnt , siz ; node ( int v ) : ch { nullptr , nullptr }, val ( v ), cnt ( 1 ), siz ( 1 ) {} void pushup () { siz = ( ch [ 0 ] == nullptr ? 0 : ch [ 0 ] -> siz ) + cnt + ( ch [ 1 ] == nullptr ? 0 : ch [ 1 ] -> siz ); } int find ( int v ) { return v == val ? -1 : v > val ; } int chsiz ( int x ) { return ch [ x ] == nullptr ? 0 : ch [ x ] -> siz ; } } * root = nullptr ; void rotate ( node *& cur , bool type ) { node * rt = cur -> ch [ type ]; cur -> ch [ type ] = rt -> ch [ ! type ], rt -> ch [ ! type ] = cur , cur = rt ; cur -> ch [ ! type ] -> pushup (), cur -> pushup (); } void splay ( node *& cur , int val ) { int type1 = cur -> find ( val ); if ( type1 == -1 || cur -> ch [ type1 ] == nullptr ) return ; int type2 = cur -> ch [ type1 ] -> find ( val ); if ( type2 == -1 || cur -> ch [ type1 ] -> ch [ type2 ] == nullptr ) { rotate ( cur , type1 ); return ; } splay ( cur -> ch [ type1 ] -> ch [ type2 ], val ); if ( type1 == type2 ) rotate ( cur , type1 ), rotate ( cur , type2 ); else rotate ( cur -> ch [ type1 ], type2 ), rotate ( cur , type1 ); }","title":"Splay \u6811"},{"location":"notes/snippets/#_6","text":"","title":"\u56fe\u8bba"},{"location":"notes/snippets/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; }","title":"\u6811\u7684\u91cd\u5fc3"},{"location":"notes/snippets/#_8","text":"1 2 3 4 5 6 7 int head [ MAXN ], nxt [ MAXM ], to [ MAXM ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } \u4ece 1 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a 0\uff1b\u4ece 0 \u5f00\u59cb\uff0c\u9884\u5904\u7406\u4e3a -1\u3002","title":"\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe"},{"location":"notes/snippets/#_9","text":"\u7f29\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int dfn [ MAXN ], low [ MAXN ], dcnt ; int s [ MAXN ], ins [ MAXN ], scnt ; int belong [ MAXN ], bs [ MAXN ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v , u ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , bs [ bcnt ] ++ , belong [ s [ scnt -- ]] = bcnt ; } } \u4e0d\u5efa\u8bae\u5199 if(dfn[v] < dfn[u] && v != fa) \uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u56fe \u8fde\u901a \u65f6\u624d\u6b63\u786e\u3002","title":"\u56fe\u7684\u8fde\u901a\u6027"},{"location":"notes/snippets/#_10","text":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u9884\u5904\u7406 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void predfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { predfs ( v , u ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } }","title":"\u91cd\u94fe\u5256\u5206"},{"location":"notes/blogs/hamming/","text":"\u751f\u6210\u6c49\u660e\u91cd\u91cf\u987a\u5e8f\u7684\u6392\u5217 \u00b6 \u6c49\u660e\u91cd\u91cf \u00b6 \u6c49\u660e\u91cd\u91cf\u662f\u4e00\u4e32\u7b26\u53f7\u4e2d\u975e\u96f6\u7b26\u53f7\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u5b83\u7684\u6c49\u660e\u91cd\u91cf\u5c31\u7b49\u4e8e\u5b83 \\(1\\) \u7684\u4e2a\u6570\uff08\u5373 popcount \uff09\u3002 \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u53ef\u4ee5\u5faa\u73af\u6c42\u89e3\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u9664\u4ee52\uff0c\u7ef4\u62a4\u4e00\u4e2a\u7b54\u6848\u53d8\u91cf\uff0c\u5728\u9664\u7684\u8fc7\u7a0b\u4e2d\u6839\u636e\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a \\(1\\) \u66f4\u65b0\u7b54\u6848\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt += x & 1 ; x >>= 1 ; } return cnt ; } \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u8fd8\u53ef\u4ee5\u4f7f\u7528 lowbit \u64cd\u4f5c\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u51cf\u53bb\u5b83\u7684 lowbit 1 \uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u53d8\u4e3a \\(0\\) \u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt ++ ; x -= x & - x ; } return cnt ; } \u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217 \u00b6 \u5728 \u72b6\u538b DP \u4e2d\uff0c\u6309\u7167 popcount \u9012\u589e\u7684\u987a\u5e8f\u679a\u4e3e\u6709\u65f6\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u679a\u4e3e\u72b6\u6001\u3002\u8fd9\u662f\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u4e00\u5927\u4f5c\u7528\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u5177\u4f53\u63a2\u7a76\u5982\u4f55\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6c49\u660e\u91cd\u91cf\u4e3a \\(n\\) \u7684\u6700\u5c0f\u7684\u6574\u6570\u4e3a \\(2^n-1\\) \u3002\u53ea\u8981\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u6784\u9020\u51fa\u4e00\u4e2a\u6574\u6570\u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u6c49\u660e\u91cd\u91cf\uff0c\u4ece \\(2^n-1\\) \u5f00\u59cb\u4e0d\u65ad\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65b9\u5f0f\uff0c\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u51fa \\(0-n\\) \u7684\u7b26\u5408\u8981\u6c42\u7684\u6392\u5217\u3002 \u800c\u627e\u51fa\u4e00\u4e2a\u6570 \\(x\\) \u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\u6709\u8fd9\u6837\u7684\u601d\u8def\uff0c\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff1a \u628a \\((10110)_2\\) \u6700\u53f3\u8fb9\u7684 \\(1\\) \u5411\u5de6\u79fb\u52a8\uff0c\u5982\u679c\u4e0d\u80fd\u79fb\u52a8\uff0c\u79fb\u52a8\u5b83\u5de6\u8fb9\u7684 \\(1\\) \uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f97\u5230 \\((11010)_2\\) \u3002 \u628a\u5f97\u5230\u7684 \\((11010)_2\\) \u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u5148\u7684\u4f4d\u7f6e\u4e00\u76f4\u5230\u6700\u4f4e\u4f4d\u7684\u6240\u6709 \\(1\\) \u90fd\u79fb\u5230\u6700\u53f3\u8fb9\u3002\u8fd9\u91cc\u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u6765\u5728\u7b2c\u4e09\u4f4d\uff0c\u6240\u4ee5\u6700\u540e\u4e09\u4f4d \\(010\\) \u8981\u53d8\u6210 \\(001\\) \uff0c\u5f97\u5230 \\((11001)_2\\) \u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1a 1 2 int t = x + ( x & - x ); x = t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 ); \u7b2c\u4e00\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u628a\u6570 \\(x\\) \u52a0\u4e0a\u5b83\u7684 lowbit \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a \\(x\\) \u6700\u53f3\u8fb9\u7684\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6362\u6210\u5b83\u5de6\u8fb9\u7684\u4e00\u4e2a \\(1\\) \u3002\u5982\u521a\u624d\u63d0\u5230\u7684\u4e8c\u8fdb\u5236\u6570 \\((10110)_2\\) \uff0c\u5b83\u5728\u52a0\u4e0a\u5b83\u7684 lowbit \u540e\u662f \\((11000)_2\\) \u3002\u8fd9\u5176\u5b9e\u5f97\u5230\u4e86\u6211\u4eec\u7b54\u6848\u7684\u524d\u534a\u90e8\u5206\u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u8981\u628a\u7b54\u6848\u540e\u9762\u7684 \\(1\\) \u8865\u9f50\uff0c \\(t\\) \u7684 lowbit \u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684 \\(1\\) \u79fb\u52a8\u540e\u7684\u4f4d\u7f6e\uff0c\u800c \\(x\\) \u7684 lowbit \u5219\u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u3002\u8fd8\u662f\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff0c \\(t = (11000)_2\\) \uff0c \\(\\operatorname{lowbit}(t) = (01000)_2\\) \uff0c \\(\\operatorname{lowbit}(x)=(00010)_2\\) \u3002 \u63a5\u4e0b\u6765\u7684\u9664\u6cd5\u64cd\u4f5c\u662f\u8fd9\u79cd\u4f4d\u8fd0\u7b97\u4e2d\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\uff0c\u4f46\u4e5f\u662f\u6700\u5173\u952e\u7684\u90e8\u5206\u3002\u6211\u4eec\u8bbe \u539f\u6570 \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u9ad8\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(r\\) \u4f4d\u4e0a\uff08\u4f4d\u6570\u4ece \\(0\\) \u5f00\u59cb\uff09\uff0c\u6700\u4f4e\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(l\\) \u4f4d\uff0c \\(t\\) \u7684 lowbit \u7b49\u4e8e 1 << (r+1) \uff0c \\(x\\) \u7684 lowbit \u7b49\u4e8e 1 << l \uff0c ((t&-t)>>1)/(x&-x) \u5f97\u5230\u7684\uff0c\u5c31\u662f (1<<r)/(1<<l) = 1<<(r-l) \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u5c31\u662f \\(1\\) \u540e\u9762\u8ddf\u4e0a \\(r-l\\) \u4e2a\u96f6\uff0c\u96f6\u7684\u4e2a\u6570\u6b63\u597d\u7b49\u4e8e\u8fde\u7eed \\(1\\) \u7684\u4e2a\u6570\u51cf\u53bb \\(1\\) \u3002\u4e3e\u6211\u4eec\u521a\u624d\u7684\u6570\u4e3a\u4f8b\uff0c \\(\\frac{\\operatorname{lowbit(t)\\div 2}}{\\operatorname{lowbit(x)}} = \\frac{(00100)_2}{(00010)_2} = (00010)_2\\) \u3002\u628a\u8fd9\u4e2a\u6570\u51cf\u53bb \\(1\\) \u5f97\u5230\u7684\u5c31\u662f\u6211\u4eec\u8981\u8865\u5168\u7684\u4f4e\u4f4d\uff0c\u6216\u4e0a\u539f\u6765\u7684\u6570\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u6240\u4ee5\u679a\u4e3e \\(0-n\\) \u6309\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u5b8c\u6574\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 for ( int i = 0 ; ( 1 << i ) -1 <= n ; i ++ ) { for ( int x = ( 1 << i ) -1 , t ; x <= n ; t = x + ( x &- x ), x = x ? ( t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 )) : ( n + 1 )) { // \u5199\u4e0b\u9700\u8981\u5b8c\u6210\u7684\u64cd\u4f5c } } \u5176\u4e2d\u8981\u6ce8\u610f \\(0\\) \u7684\u7279\u5224\uff0c\u56e0\u4e3a \\(0\\) \u6ca1\u6709\u76f8\u540c\u6c49\u660e\u91cd\u91cf\u7684\u540e\u7ee7\u3002 \u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u4f4e\u5f80\u9ad8\u7684\u7b2c\u4e00\u4e2a \\(1\\) \u8fde\u540c\u540e\u9762\u7684\u96f6\uff0c\u5982 \\((1010)_2\\) \u7684 lowbit \u662f \\((0010)_2\\) \uff0c\u8be6\u89c1 \u6811\u72b6\u6570\u7ec4 \u3002 \u21a9","title":"\u751f\u6210\u6c49\u660e\u91cd\u91cf\u987a\u5e8f\u7684\u6392\u5217"},{"location":"notes/blogs/hamming/#_1","text":"","title":"\u751f\u6210\u6c49\u660e\u91cd\u91cf\u987a\u5e8f\u7684\u6392\u5217"},{"location":"notes/blogs/hamming/#_2","text":"\u6c49\u660e\u91cd\u91cf\u662f\u4e00\u4e32\u7b26\u53f7\u4e2d\u975e\u96f6\u7b26\u53f7\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u5b83\u7684\u6c49\u660e\u91cd\u91cf\u5c31\u7b49\u4e8e\u5b83 \\(1\\) \u7684\u4e2a\u6570\uff08\u5373 popcount \uff09\u3002 \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u53ef\u4ee5\u5faa\u73af\u6c42\u89e3\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u9664\u4ee52\uff0c\u7ef4\u62a4\u4e00\u4e2a\u7b54\u6848\u53d8\u91cf\uff0c\u5728\u9664\u7684\u8fc7\u7a0b\u4e2d\u6839\u636e\u6700\u4f4e\u4f4d\u662f\u5426\u4e3a \\(1\\) \u66f4\u65b0\u7b54\u6848\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt += x & 1 ; x >>= 1 ; } return cnt ; } \u6c42\u4e00\u4e2a\u6570\u7684\u6c49\u660e\u91cd\u91cf\u8fd8\u53ef\u4ee5\u4f7f\u7528 lowbit \u64cd\u4f5c\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u4e0d\u65ad\u5730\u51cf\u53bb\u5b83\u7684 lowbit 1 \uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u53d8\u4e3a \\(0\\) \u3002 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // \u6c42 x \u7684\u6c49\u660e\u91cd\u91cf int popcount ( int x ) { int cnt = 0 ; while ( x ) { cnt ++ ; x -= x & - x ; } return cnt ; }","title":"\u6c49\u660e\u91cd\u91cf"},{"location":"notes/blogs/hamming/#_3","text":"\u5728 \u72b6\u538b DP \u4e2d\uff0c\u6309\u7167 popcount \u9012\u589e\u7684\u987a\u5e8f\u679a\u4e3e\u6709\u65f6\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u679a\u4e3e\u72b6\u6001\u3002\u8fd9\u662f\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u4e00\u5927\u4f5c\u7528\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u5177\u4f53\u63a2\u7a76\u5982\u4f55\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6c49\u660e\u91cd\u91cf\u4e3a \\(n\\) \u7684\u6700\u5c0f\u7684\u6574\u6570\u4e3a \\(2^n-1\\) \u3002\u53ea\u8981\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u6784\u9020\u51fa\u4e00\u4e2a\u6574\u6570\u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u6c49\u660e\u91cd\u91cf\uff0c\u4ece \\(2^n-1\\) \u5f00\u59cb\u4e0d\u65ad\u5bfb\u627e\u4e0b\u4e00\u4e2a\u6570\u7684\u65b9\u5f0f\uff0c\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u6784\u9020\u51fa \\(0-n\\) \u7684\u7b26\u5408\u8981\u6c42\u7684\u6392\u5217\u3002 \u800c\u627e\u51fa\u4e00\u4e2a\u6570 \\(x\\) \u6c49\u660e\u91cd\u91cf\u76f8\u7b49\u7684\u540e\u7ee7\u6709\u8fd9\u6837\u7684\u601d\u8def\uff0c\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff1a \u628a \\((10110)_2\\) \u6700\u53f3\u8fb9\u7684 \\(1\\) \u5411\u5de6\u79fb\u52a8\uff0c\u5982\u679c\u4e0d\u80fd\u79fb\u52a8\uff0c\u79fb\u52a8\u5b83\u5de6\u8fb9\u7684 \\(1\\) \uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f97\u5230 \\((11010)_2\\) \u3002 \u628a\u5f97\u5230\u7684 \\((11010)_2\\) \u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u5148\u7684\u4f4d\u7f6e\u4e00\u76f4\u5230\u6700\u4f4e\u4f4d\u7684\u6240\u6709 \\(1\\) \u90fd\u79fb\u5230\u6700\u53f3\u8fb9\u3002\u8fd9\u91cc\u6700\u540e\u79fb\u52a8\u7684 \\(1\\) \u539f\u6765\u5728\u7b2c\u4e09\u4f4d\uff0c\u6240\u4ee5\u6700\u540e\u4e09\u4f4d \\(010\\) \u8981\u53d8\u6210 \\(001\\) \uff0c\u5f97\u5230 \\((11001)_2\\) \u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1a 1 2 int t = x + ( x & - x ); x = t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 ); \u7b2c\u4e00\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u628a\u6570 \\(x\\) \u52a0\u4e0a\u5b83\u7684 lowbit \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a \\(x\\) \u6700\u53f3\u8fb9\u7684\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6362\u6210\u5b83\u5de6\u8fb9\u7684\u4e00\u4e2a \\(1\\) \u3002\u5982\u521a\u624d\u63d0\u5230\u7684\u4e8c\u8fdb\u5236\u6570 \\((10110)_2\\) \uff0c\u5b83\u5728\u52a0\u4e0a\u5b83\u7684 lowbit \u540e\u662f \\((11000)_2\\) \u3002\u8fd9\u5176\u5b9e\u5f97\u5230\u4e86\u6211\u4eec\u7b54\u6848\u7684\u524d\u534a\u90e8\u5206\u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u8981\u628a\u7b54\u6848\u540e\u9762\u7684 \\(1\\) \u8865\u9f50\uff0c \\(t\\) \u7684 lowbit \u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684 \\(1\\) \u79fb\u52a8\u540e\u7684\u4f4d\u7f6e\uff0c\u800c \\(x\\) \u7684 lowbit \u5219\u662f \\(x\\) \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u3002\u8fd8\u662f\u4ee5 \\((10110)_2\\) \u4e3a\u4f8b\uff0c \\(t = (11000)_2\\) \uff0c \\(\\operatorname{lowbit}(t) = (01000)_2\\) \uff0c \\(\\operatorname{lowbit}(x)=(00010)_2\\) \u3002 \u63a5\u4e0b\u6765\u7684\u9664\u6cd5\u64cd\u4f5c\u662f\u8fd9\u79cd\u4f4d\u8fd0\u7b97\u4e2d\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\uff0c\u4f46\u4e5f\u662f\u6700\u5173\u952e\u7684\u90e8\u5206\u3002\u6211\u4eec\u8bbe \u539f\u6570 \u6700\u53f3\u8fb9\u8fde\u7eed\u4e00\u6bb5 \\(1\\) \u6700\u9ad8\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(r\\) \u4f4d\u4e0a\uff08\u4f4d\u6570\u4ece \\(0\\) \u5f00\u59cb\uff09\uff0c\u6700\u4f4e\u4f4d\u7684 \\(1\\) \u5728\u7b2c \\(l\\) \u4f4d\uff0c \\(t\\) \u7684 lowbit \u7b49\u4e8e 1 << (r+1) \uff0c \\(x\\) \u7684 lowbit \u7b49\u4e8e 1 << l \uff0c ((t&-t)>>1)/(x&-x) \u5f97\u5230\u7684\uff0c\u5c31\u662f (1<<r)/(1<<l) = 1<<(r-l) \uff0c\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u5c31\u662f \\(1\\) \u540e\u9762\u8ddf\u4e0a \\(r-l\\) \u4e2a\u96f6\uff0c\u96f6\u7684\u4e2a\u6570\u6b63\u597d\u7b49\u4e8e\u8fde\u7eed \\(1\\) \u7684\u4e2a\u6570\u51cf\u53bb \\(1\\) \u3002\u4e3e\u6211\u4eec\u521a\u624d\u7684\u6570\u4e3a\u4f8b\uff0c \\(\\frac{\\operatorname{lowbit(t)\\div 2}}{\\operatorname{lowbit(x)}} = \\frac{(00100)_2}{(00010)_2} = (00010)_2\\) \u3002\u628a\u8fd9\u4e2a\u6570\u51cf\u53bb \\(1\\) \u5f97\u5230\u7684\u5c31\u662f\u6211\u4eec\u8981\u8865\u5168\u7684\u4f4e\u4f4d\uff0c\u6216\u4e0a\u539f\u6765\u7684\u6570\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u6240\u4ee5\u679a\u4e3e \\(0-n\\) \u6309\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217\u7684\u5b8c\u6574\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 for ( int i = 0 ; ( 1 << i ) -1 <= n ; i ++ ) { for ( int x = ( 1 << i ) -1 , t ; x <= n ; t = x + ( x &- x ), x = x ? ( t | (((( t &- t ) / ( x &- x )) >> 1 ) -1 )) : ( n + 1 )) { // \u5199\u4e0b\u9700\u8981\u5b8c\u6210\u7684\u64cd\u4f5c } } \u5176\u4e2d\u8981\u6ce8\u610f \\(0\\) \u7684\u7279\u5224\uff0c\u56e0\u4e3a \\(0\\) \u6ca1\u6709\u76f8\u540c\u6c49\u660e\u91cd\u91cf\u7684\u540e\u7ee7\u3002 \u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4ece\u4f4e\u5f80\u9ad8\u7684\u7b2c\u4e00\u4e2a \\(1\\) \u8fde\u540c\u540e\u9762\u7684\u96f6\uff0c\u5982 \\((1010)_2\\) \u7684 lowbit \u662f \\((0010)_2\\) \uff0c\u8be6\u89c1 \u6811\u72b6\u6570\u7ec4 \u3002 \u21a9","title":"\u6784\u9020\u6c49\u660e\u91cd\u91cf\u9012\u589e\u7684\u6392\u5217"},{"location":"notes/topics/count-on-graphs/","text":"\u56fe\u4e0a\u7edf\u8ba1\u4e13\u9898 \u00b6 \u6811\u4e0a\u7edf\u8ba1 \u00b6 \u95ee\u9898 1 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u4e0d\u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 CF161D Distance in Tree \u6cd5 1\uff1a\u6811\u5f62 DP \u00b6 \u53ef\u4ee5\u5e94\u7528\u6811\u5f62 DP \u6c42\u89e3\u8fd9\u7c7b\u9898\u76ee\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7ef4\u62a4\u5176\u5b50\u6811\u4e0a\u8ddd\u79bb\u4e3a k \u7684\u70b9\u7684\u6570\u91cf\uff0c\u8bbe \\(f(u,i)\\) \u4e3a\u5728\u70b9 u \u7684\u5b50\u6811\u4e0a\uff0c\u4e0e u \u8ddd\u79bb\u4e3a i \\((0\\leq i\\leq k)\\) \u7684\u70b9\u7684\u6570\u76ee\u3002\u5219\u7b54\u6848\u4e3a: \\[ \\sum_{u=1}^{n}(f(u,k)+\\frac{1}{2} \\times \\sum_{x=1}^{k-1}(f(v,x-1)\\times(f(u,k-x)-f(v,k-x-1)) )) \\] \u5b9e\u9645\u5b9e\u73b0\u53ea\u9700\u8981\u4e00\u904d DFS\uff0c\u5728\u679a\u4e3e\u5b50\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\u5c06\u4e4b\u524d\u5b50\u6811\u7684\u4fe1\u606f\u548c\u5f53\u524d\u5b50\u6811\u7684\u4fe1\u606f\u76f8\u4e58\uff0c\u4e0d\u9700\u8981\u5bf9\u7cfb\u6570 \\(\\frac{1}{2}\\) \u8fdb\u884c\u5904\u7406\u3002 \u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\cdot k)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\cdot k)\\) \uff0c\u53ea\u9002\u7528\u4e8e k \u5f88\u5c0f\u7684\u60c5\u51b5\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 , maxk = 5e2 + 7 ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int n , k ; int f [ maxn ][ maxk ]; unsigned long long ans ; void dfs ( int u , int fa ) { f [ u ][ 0 ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { dfs ( v , u ); for ( int x = 1 ; x <= k ; x ++ ) ans += f [ v ][ x - 1 ] * f [ u ][ k - x ]; for ( int x = 1 ; x <= k ; x ++ ) f [ u ][ x ] += f [ v ][ x - 1 ]; } } } int main () { cin >> n >> k ; int a , b ; for ( int i = 1 ; i < n ; i ++ ) { cin >> a >> b ; add ( a , b ), add ( b , a ); } dfs ( 1 , 0 ); cout << ans << endl ; } \u6cd5 2\uff1a\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u91cd\u94fe\u5256\u5206\u4f18\u5316\uff09 \u00b6 \u4e0a\u8ff0\u65b9\u6cd5\u7684\u74f6\u9888\u4e3b\u8981\u5728\u4e8e k\uff0c\u53ef\u4ee5\u8003\u8651\u53ea\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\uff08dis\uff09\u8bb0\u5f55\u5404\u6df1\u5ea6\u70b9\u7684\u6570\u91cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u7ed3\u5408\u4e86\u91cd\u94fe\u5256\u5206\u7684\u601d\u60f3\u3002\u5177\u4f53\u89c1[[dsu-on-tree#_2|\u6b64\u6587\u7ae0]]\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n \\log{n})\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\text{\u6811\u7684\u6df1\u5ea6})\\) \u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 , maxk = 5e2 + 7 ; int n , k ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int siz [ maxn ], heavy [ maxn ], dep [ maxn ]; void predfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { predfs ( v , u ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } } bool inc [ maxn ]; int dis [ maxn ]; unsigned long long ans ; void calc ( int u , int fa , int top , int add ) { if ( add == 1 || add == -1 ) dis [ dep [ u ]] += add ; else if ( k - dep [ u ] + 2 * dep [ top ] >= 0 ) ans += dis [ k - dep [ u ] + 2 * dep [ top ]]; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! inc [ v ] && v != fa ) calc ( v , u , top , add ); } } void dfs ( int u , int fa , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ] && v != fa ) dfs ( v , u , false ); } if ( heavy [ u ]) { dfs ( heavy [ u ], u , true ); inc [ heavy [ u ]] = true ; } ans += dis [ k + dep [ u ]]; dis [ dep [ u ]] ++ ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ] && v != fa ) calc ( v , u , u , 0 ), calc ( v , u , u , 1 ); } if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u , fa , u , -1 ); } int main () { cin >> n >> k ; int a , b ; for ( int i = 1 ; i < n ; i ++ ) { cin >> a >> b ; add ( a , b ), add ( b , a ); } predfs ( 1 , 0 ); dfs ( 1 , 0 , false ); cout << ans << endl ; } \u6cd5 3\uff1a\u957f\u94fe\u5256\u5206\u4f18\u5316 \u00b6 \uff08\u5f85\u8865\uff09 \u6cd5 4\uff1a\u70b9\u5206\u6cbb \u00b6 \uff08\u5f85\u8865\uff09 \u95ee\u9898 2 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 \uff08\u5f85\u8865\uff09 \u95ee\u9898 3 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u4e0d\u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u5c0f\u4e8e\u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 \uff08\u5f85\u8865\uff09 \u95ee\u9898 4 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u5c0f\u4e8e\u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 \uff08\u5f85\u8865\uff09","title":"\u56fe\u4e0a\u7edf\u8ba1\u4e13\u9898"},{"location":"notes/topics/count-on-graphs/#_1","text":"","title":"\u56fe\u4e0a\u7edf\u8ba1\u4e13\u9898"},{"location":"notes/topics/count-on-graphs/#_2","text":"","title":"\u6811\u4e0a\u7edf\u8ba1"},{"location":"notes/topics/count-on-graphs/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u4e0d\u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 CF161D Distance in Tree","title":"\u95ee\u9898 1"},{"location":"notes/topics/count-on-graphs/#1-dp","text":"\u53ef\u4ee5\u5e94\u7528\u6811\u5f62 DP \u6c42\u89e3\u8fd9\u7c7b\u9898\u76ee\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7ef4\u62a4\u5176\u5b50\u6811\u4e0a\u8ddd\u79bb\u4e3a k \u7684\u70b9\u7684\u6570\u91cf\uff0c\u8bbe \\(f(u,i)\\) \u4e3a\u5728\u70b9 u \u7684\u5b50\u6811\u4e0a\uff0c\u4e0e u \u8ddd\u79bb\u4e3a i \\((0\\leq i\\leq k)\\) \u7684\u70b9\u7684\u6570\u76ee\u3002\u5219\u7b54\u6848\u4e3a: \\[ \\sum_{u=1}^{n}(f(u,k)+\\frac{1}{2} \\times \\sum_{x=1}^{k-1}(f(v,x-1)\\times(f(u,k-x)-f(v,k-x-1)) )) \\] \u5b9e\u9645\u5b9e\u73b0\u53ea\u9700\u8981\u4e00\u904d DFS\uff0c\u5728\u679a\u4e3e\u5b50\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\u5c06\u4e4b\u524d\u5b50\u6811\u7684\u4fe1\u606f\u548c\u5f53\u524d\u5b50\u6811\u7684\u4fe1\u606f\u76f8\u4e58\uff0c\u4e0d\u9700\u8981\u5bf9\u7cfb\u6570 \\(\\frac{1}{2}\\) \u8fdb\u884c\u5904\u7406\u3002 \u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\cdot k)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\cdot k)\\) \uff0c\u53ea\u9002\u7528\u4e8e k \u5f88\u5c0f\u7684\u60c5\u51b5\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 , maxk = 5e2 + 7 ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int n , k ; int f [ maxn ][ maxk ]; unsigned long long ans ; void dfs ( int u , int fa ) { f [ u ][ 0 ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { dfs ( v , u ); for ( int x = 1 ; x <= k ; x ++ ) ans += f [ v ][ x - 1 ] * f [ u ][ k - x ]; for ( int x = 1 ; x <= k ; x ++ ) f [ u ][ x ] += f [ v ][ x - 1 ]; } } } int main () { cin >> n >> k ; int a , b ; for ( int i = 1 ; i < n ; i ++ ) { cin >> a >> b ; add ( a , b ), add ( b , a ); } dfs ( 1 , 0 ); cout << ans << endl ; }","title":"\u6cd5 1\uff1a\u6811\u5f62 DP"},{"location":"notes/topics/count-on-graphs/#2","text":"\u4e0a\u8ff0\u65b9\u6cd5\u7684\u74f6\u9888\u4e3b\u8981\u5728\u4e8e k\uff0c\u53ef\u4ee5\u8003\u8651\u53ea\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\uff08dis\uff09\u8bb0\u5f55\u5404\u6df1\u5ea6\u70b9\u7684\u6570\u91cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u7ed3\u5408\u4e86\u91cd\u94fe\u5256\u5206\u7684\u601d\u60f3\u3002\u5177\u4f53\u89c1[[dsu-on-tree#_2|\u6b64\u6587\u7ae0]]\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n \\log{n})\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\text{\u6811\u7684\u6df1\u5ea6})\\) \u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 , maxk = 5e2 + 7 ; int n , k ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int siz [ maxn ], heavy [ maxn ], dep [ maxn ]; void predfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { predfs ( v , u ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } } bool inc [ maxn ]; int dis [ maxn ]; unsigned long long ans ; void calc ( int u , int fa , int top , int add ) { if ( add == 1 || add == -1 ) dis [ dep [ u ]] += add ; else if ( k - dep [ u ] + 2 * dep [ top ] >= 0 ) ans += dis [ k - dep [ u ] + 2 * dep [ top ]]; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! inc [ v ] && v != fa ) calc ( v , u , top , add ); } } void dfs ( int u , int fa , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ] && v != fa ) dfs ( v , u , false ); } if ( heavy [ u ]) { dfs ( heavy [ u ], u , true ); inc [ heavy [ u ]] = true ; } ans += dis [ k + dep [ u ]]; dis [ dep [ u ]] ++ ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ] && v != fa ) calc ( v , u , u , 0 ), calc ( v , u , u , 1 ); } if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u , fa , u , -1 ); } int main () { cin >> n >> k ; int a , b ; for ( int i = 1 ; i < n ; i ++ ) { cin >> a >> b ; add ( a , b ), add ( b , a ); } predfs ( 1 , 0 ); dfs ( 1 , 0 , false ); cout << ans << endl ; }","title":"\u6cd5 2\uff1a\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u91cd\u94fe\u5256\u5206\u4f18\u5316\uff09"},{"location":"notes/topics/count-on-graphs/#3","text":"\uff08\u5f85\u8865\uff09","title":"\u6cd5 3\uff1a\u957f\u94fe\u5256\u5206\u4f18\u5316"},{"location":"notes/topics/count-on-graphs/#4","text":"\uff08\u5f85\u8865\uff09","title":"\u6cd5 4\uff1a\u70b9\u5206\u6cbb"},{"location":"notes/topics/count-on-graphs/#2_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 \uff08\u5f85\u8865\uff09","title":"\u95ee\u9898 2"},{"location":"notes/topics/count-on-graphs/#3_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u4e0d\u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u5c0f\u4e8e\u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 \uff08\u5f85\u8865\uff09","title":"\u95ee\u9898 3"},{"location":"notes/topics/count-on-graphs/#4_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u5e26\u6743\u6811 G\uff0c\u6c42 G \u4e0a\u6240\u6709\u957f\u5ea6 \u5c0f\u4e8e\u7b49\u4e8e k \u7684\u7b80\u5355\u8def\u5f84\u6570\u91cf\u3002 \uff08\u5f85\u8865\uff09","title":"\u95ee\u9898 4"},{"location":"notes/topics/hld/","text":"\u6811\u94fe\u5256\u5206 \u00b6 \u4e24\u79cd\u5256\u5206\u65b9\u5f0f \u00b6 \u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u91cd\u94fe\u5256\u5206\u548c\u957f\u94fe\u5256\u5206\u7684\u5b9a\u4e49\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u91cd\u94fe\u5256\u5206\u4f9d\u7167\u7684\u662f\u5b50\u6811\u5927\u5c0f\uff0c\u800c\u957f\u94fe\u5256\u5206\u4f9d\u7167\u7684\u662f\u5b50\u6811\u6df1\u5ea6\u3002 \u5171\u540c \u7684\u6027\u8d28\u6709\uff1a \u6240\u6709\u94fe\u957f\u5ea6\u7684\u548c\u662f \\(O(n)\\) \u7ea7\u522b\u7684\u3002 \u8bc1\u660e\uff1a\u7531\u4e8e\u6240\u6709\u7684\u70b9\u5728\u4e14\u4ec5\u5728\u4e00\u6761\u91cd\u94fe\u4e2d\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u94fe\u957f\u7684\u603b\u548c\u7b49\u4e8e\u8282\u70b9\u7684\u603b\u6570\uff0c\u4e5f\u5c31\u662f \\(O(n)\\) \u7ea7\u522b\u3002 \u91cd\u94fe\u5256\u5206 \u7684\u6027\u8d28\u6709\uff1a \u6839\u5230\u4efb\u610f\u8282\u70b9\u8f7b\u8fb9\u7684\u4e2a\u6570 \u5c0f\u4e8e \\(\\log{n}\\) \u3002 \u8bc1\u660e\uff1a\u8bbe\u8282\u70b9 \\(u\\) \u7684\u7236\u8282\u70b9\u4e3a \\(u'\\) \uff0c\u82e5\u8fde\u63a5\u8be5\u4e24\u70b9\u7684\u8fb9\u4e3a\u8f7b\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} \\times 2 + 1 > siz_{u} \\times 2\\) \uff0c\u82e5\u4e3a\u91cd\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} + 1 > siz_{u}\\) \u3002\u82e5\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709 \\(k\\) \u6761\u8f7b\u8fb9\uff0c\u5219\u6811\u7684\u5927\u5c0f\u6ee1\u8db3\u5173\u7cfb \\(n = siz_{root} > 2^k \\times siz_{u} \\geq 2^k\\) \uff0c\u5373 \\(k < \\log_{2}{n}\\) \u3002 \u957f\u94fe\u5256\u5206 \u7684\u6027\u8d28\u6709\uff1a \u6839\u5230\u4efb\u610f\u8282\u70b9\u8f7b\u8fb9\u7684\u4e2a\u6570 \u4e0d\u4f1a\u8d85\u8fc7 \\(\\sqrt{2n}\\) \u3002 \u8bc1\u660e\uff1a\u8bbe\u8282\u70b9 \\(u\\) \u7684\u6df1\u5ea6\u4e3a \\(dep_{u}\\) \uff0c\u7236\u8282\u70b9\u4e3a \\(u'\\) \uff0c\u82e5\u8fde\u63a5\u8be5\u4e24\u70b9\u7684\u8fb9\u4e3a\u8f7b\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} + dep_{u} + 1\\) \u3002\u82e5\u4e3a\u91cd\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} + 1\\) \uff0c\u82e5\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709 \\(k\\) \u6761\u8f7b\u8fb9\uff0c\u5219\u6811\u7684\u5927\u5c0f\u6ee1\u8db3\u5173\u7cfb \\(n \\geq 1 + \\sum_{x=2}^{k}x = \\frac{x(x+1)}{2}\\) \uff0c\u5373 \\(x\\leq \\sqrt{2n}\\) \u3002 \u4efb\u610f\u70b9\u7684 \\(k\\) \u7ea7\u7956\u5148\u6240\u5728\u7684\u957f\u94fe\u957f\u5ea6 \u5927\u4e8e\u7b49\u4e8e \\(k\\) \u3002 \u8bc1\u660e\uff1a\u91c7\u7528\u53cd\u8bc1\u6cd5\uff0c\u82e5\u957f\u94fe\u957f\u5ea6\u5c0f\u4e8e \\(k\\) \uff0c\u5219\u7ecf\u8fc7\u8be5\u70b9\u957f\u5ea6\u7b49\u4e8e\uff08\u6216\u5927\u4e8e\uff09 \\(k\\) \u7684\u65b9\u6848\u4e00\u5b9a\u66f4\u4f18\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u91cd\u94fe\u5256\u5206\u7684\u5e94\u7528 \u00b6 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u5bf9\u4e8e\u6811\u4e0a\u7edf\u8ba1\u7684\u95ee\u9898\uff0c\u5355\u7eaf\u7684\u6811\u5f62 DP \u53ef\u80fd\u4f1a\u6709\u7a7a\u95f4\u4e0a\u7684\u9650\u5236\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u4e0d\u59a8\u91c7\u53d6\u5148\u7edf\u8ba1\uff0c\u518d\u8bb0\u5f55\u7684\u7b56\u7565\uff0c\u4ece\u800c\u8282\u7701\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u6b64\u65f6\u53c8\u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u57fa\u672c\u601d\u8def\u5982\u4e0b\uff1a \u904d\u5386 u \u7684\u8f7b\u5b50\u6811\uff0c\u6b64\u65f6\u6570\u7ec4\u4e00\u5b9a\u662f\u7a7a\u7684\uff0c\u8ba1\u7b97\u7b54\u6848\uff0c\u8ba1\u7b97\u5b8c\u540e\u6e05\u7a7a\u6570\u7ec4\u3002 \u904d\u5386 u \u7684\u91cd\u5b50\u6811\uff0c\u8ba1\u7b97\u7b54\u6848\uff0c\u5e76\u8bb0\u5f55\u6570\u7ec4\u3002 \u8bb0\u5f55 u \u7684\u8f7b\u5b50\u6811\u3002 \u7531\u4e8e\u91cd\u94fe\u5256\u5206\u6709\u7740\u201c\u6839\u8282\u70b9\u5230\u6811\u4e0a\u4efb\u610f\u8282\u70b9\u7684\u8f7b\u8fb9\u6570\u4e0d\u8d85\u8fc7 \\(\\log{n}\\) \u6761\u201d\u7684\u6027\u8d28\uff0c\u800c\u6bcf\u4e2a\u8282\u70b9\u88ab\u904d\u5386\u7684\u6b21\u6570\u53c8\u7b49\u4e8e\u5b83\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\u6570 \\(+1\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n \\log{n})\\) \u3002 \u6709\u5173\u9898\u76ee\uff0c\u89c1 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u3002","title":"\u6811\u94fe\u5256\u5206"},{"location":"notes/topics/hld/#_1","text":"","title":"\u6811\u94fe\u5256\u5206"},{"location":"notes/topics/hld/#_2","text":"\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u91cd\u94fe\u5256\u5206\u548c\u957f\u94fe\u5256\u5206\u7684\u5b9a\u4e49\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u91cd\u94fe\u5256\u5206\u4f9d\u7167\u7684\u662f\u5b50\u6811\u5927\u5c0f\uff0c\u800c\u957f\u94fe\u5256\u5206\u4f9d\u7167\u7684\u662f\u5b50\u6811\u6df1\u5ea6\u3002 \u5171\u540c \u7684\u6027\u8d28\u6709\uff1a \u6240\u6709\u94fe\u957f\u5ea6\u7684\u548c\u662f \\(O(n)\\) \u7ea7\u522b\u7684\u3002 \u8bc1\u660e\uff1a\u7531\u4e8e\u6240\u6709\u7684\u70b9\u5728\u4e14\u4ec5\u5728\u4e00\u6761\u91cd\u94fe\u4e2d\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u94fe\u957f\u7684\u603b\u548c\u7b49\u4e8e\u8282\u70b9\u7684\u603b\u6570\uff0c\u4e5f\u5c31\u662f \\(O(n)\\) \u7ea7\u522b\u3002 \u91cd\u94fe\u5256\u5206 \u7684\u6027\u8d28\u6709\uff1a \u6839\u5230\u4efb\u610f\u8282\u70b9\u8f7b\u8fb9\u7684\u4e2a\u6570 \u5c0f\u4e8e \\(\\log{n}\\) \u3002 \u8bc1\u660e\uff1a\u8bbe\u8282\u70b9 \\(u\\) \u7684\u7236\u8282\u70b9\u4e3a \\(u'\\) \uff0c\u82e5\u8fde\u63a5\u8be5\u4e24\u70b9\u7684\u8fb9\u4e3a\u8f7b\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} \\times 2 + 1 > siz_{u} \\times 2\\) \uff0c\u82e5\u4e3a\u91cd\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} + 1 > siz_{u}\\) \u3002\u82e5\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709 \\(k\\) \u6761\u8f7b\u8fb9\uff0c\u5219\u6811\u7684\u5927\u5c0f\u6ee1\u8db3\u5173\u7cfb \\(n = siz_{root} > 2^k \\times siz_{u} \\geq 2^k\\) \uff0c\u5373 \\(k < \\log_{2}{n}\\) \u3002 \u957f\u94fe\u5256\u5206 \u7684\u6027\u8d28\u6709\uff1a \u6839\u5230\u4efb\u610f\u8282\u70b9\u8f7b\u8fb9\u7684\u4e2a\u6570 \u4e0d\u4f1a\u8d85\u8fc7 \\(\\sqrt{2n}\\) \u3002 \u8bc1\u660e\uff1a\u8bbe\u8282\u70b9 \\(u\\) \u7684\u6df1\u5ea6\u4e3a \\(dep_{u}\\) \uff0c\u7236\u8282\u70b9\u4e3a \\(u'\\) \uff0c\u82e5\u8fde\u63a5\u8be5\u4e24\u70b9\u7684\u8fb9\u4e3a\u8f7b\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} + dep_{u} + 1\\) \u3002\u82e5\u4e3a\u91cd\u8fb9\uff0c\u5219 \\(siz_{u'} \\geq siz_{u} + 1\\) \uff0c\u82e5\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709 \\(k\\) \u6761\u8f7b\u8fb9\uff0c\u5219\u6811\u7684\u5927\u5c0f\u6ee1\u8db3\u5173\u7cfb \\(n \\geq 1 + \\sum_{x=2}^{k}x = \\frac{x(x+1)}{2}\\) \uff0c\u5373 \\(x\\leq \\sqrt{2n}\\) \u3002 \u4efb\u610f\u70b9\u7684 \\(k\\) \u7ea7\u7956\u5148\u6240\u5728\u7684\u957f\u94fe\u957f\u5ea6 \u5927\u4e8e\u7b49\u4e8e \\(k\\) \u3002 \u8bc1\u660e\uff1a\u91c7\u7528\u53cd\u8bc1\u6cd5\uff0c\u82e5\u957f\u94fe\u957f\u5ea6\u5c0f\u4e8e \\(k\\) \uff0c\u5219\u7ecf\u8fc7\u8be5\u70b9\u957f\u5ea6\u7b49\u4e8e\uff08\u6216\u5927\u4e8e\uff09 \\(k\\) \u7684\u65b9\u6848\u4e00\u5b9a\u66f4\u4f18\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002","title":"\u4e24\u79cd\u5256\u5206\u65b9\u5f0f"},{"location":"notes/topics/hld/#_3","text":"","title":"\u91cd\u94fe\u5256\u5206\u7684\u5e94\u7528"},{"location":"notes/topics/hld/#_4","text":"\u5bf9\u4e8e\u6811\u4e0a\u7edf\u8ba1\u7684\u95ee\u9898\uff0c\u5355\u7eaf\u7684\u6811\u5f62 DP \u53ef\u80fd\u4f1a\u6709\u7a7a\u95f4\u4e0a\u7684\u9650\u5236\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u4e0d\u59a8\u91c7\u53d6\u5148\u7edf\u8ba1\uff0c\u518d\u8bb0\u5f55\u7684\u7b56\u7565\uff0c\u4ece\u800c\u8282\u7701\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u6b64\u65f6\u53c8\u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u57fa\u672c\u601d\u8def\u5982\u4e0b\uff1a \u904d\u5386 u \u7684\u8f7b\u5b50\u6811\uff0c\u6b64\u65f6\u6570\u7ec4\u4e00\u5b9a\u662f\u7a7a\u7684\uff0c\u8ba1\u7b97\u7b54\u6848\uff0c\u8ba1\u7b97\u5b8c\u540e\u6e05\u7a7a\u6570\u7ec4\u3002 \u904d\u5386 u \u7684\u91cd\u5b50\u6811\uff0c\u8ba1\u7b97\u7b54\u6848\uff0c\u5e76\u8bb0\u5f55\u6570\u7ec4\u3002 \u8bb0\u5f55 u \u7684\u8f7b\u5b50\u6811\u3002 \u7531\u4e8e\u91cd\u94fe\u5256\u5206\u6709\u7740\u201c\u6839\u8282\u70b9\u5230\u6811\u4e0a\u4efb\u610f\u8282\u70b9\u7684\u8f7b\u8fb9\u6570\u4e0d\u8d85\u8fc7 \\(\\log{n}\\) \u6761\u201d\u7684\u6027\u8d28\uff0c\u800c\u6bcf\u4e2a\u8282\u70b9\u88ab\u904d\u5386\u7684\u6b21\u6570\u53c8\u7b49\u4e8e\u5b83\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\u6570 \\(+1\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n \\log{n})\\) \u3002 \u6709\u5173\u9898\u76ee\uff0c\u89c1 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u3002","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"solutions/","text":"\u9898\u89e3\u5927\u7eb2 \u00b6 \u5f85\u8865 \u00b6 graph/dfz dp/probability \u5f85\u5b8c\u5584 \u00b6 graph/2-sat maths/bit graph/count-on-graphs graph/dsu-on-tree","title":"\u9898\u89e3\u5927\u7eb2"},{"location":"solutions/#_1","text":"","title":"\u9898\u89e3\u5927\u7eb2"},{"location":"solutions/#_2","text":"graph/dfz dp/probability","title":"\u5f85\u8865"},{"location":"solutions/#_3","text":"graph/2-sat maths/bit graph/count-on-graphs graph/dsu-on-tree","title":"\u5f85\u5b8c\u5584"},{"location":"solutions/competitions/","text":"\u6bd4\u8d5b \u00b6 NOI Online 2022 \u00b6 \u611f\u89c9 NOI Online \u50cf\u5728\u53d8\u6c34\uff0c\u63d0\u9ad8\u7ec4\u7684\u9898\u4e5f\u5c31\u4e24\u9053\u84dd\u9898\u52a0\u4e00\u9053\u7d2b\u9898\uff0c\u6570\u636e\u7ed3\u6784\u53ea\u9700\u8981\u7528\u5230\u6811\u72b6\u6570\u7ec4\u548c\u5e76\u67e5\u96c6\uff0c\u6ca1\u6709\u4efb\u4f55\u9ad8\u7ea7\u7684\u6280\u5de7\u3002\u6bd4\u8d5b\u60c5\u51b5\u662f\u6839\u636e\u6d1b\u8c37\u6c11\u95f4\u6570\u636e\uff0c\u53ea A \u6389\u4e86\u524d\u4e24\u9898\uff0c\u6700\u540e\u4e00\u9898\u5199\u7684\u662f\u66b4\u529b\u5206\u3002 T1 \u4e39\u9493\u6218 \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u6709 n \\((1\\leq n\\leq 10^5)\\) \u4e2a\u4e8c\u5143\u7ec4 \\((a_i,b_i)\\) \u3002\u73b0\u5728\u7ed9\u51fa q \\((1\\leq q\\leq 10^5)\\) \u4e2a\u8be2\u95ee\uff0c\u5c06\u4ece l \u5230 r \u7684\u6240\u6709\u4e8c\u5143\u7ec4\u987a\u6b21\u63d2\u5165\u5355\u8c03\u6808\u4e2d\uff0c\u6ee1\u8db3 b \u503c\u7531\u6808\u5e95\u5230\u6808\u9876\u4e0b\u964d\uff0c\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684 a \u503c\u4e0d\u76f8\u7b49\u3002\u6c42\u6709\u591a\u5c11\u4e8c\u5143\u7ec4\u5728\u6808\u4e2d\u5355\u72ec\u51fa\u73b0\u8fc7\u3002 \u8d5b\u65f6\u601d\u8def\uff1a\u8003\u8651\u6a21\u62df\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e0d\u51b2\u7a81\u7684\u524d\u9a71 \\(fa\\) \u3002\u6c42\u591a\u5c11\u4e8c\u5143\u7ec4\u5728\u6808\u4e2d\u51fa\u73b0\u8fc7\uff0c\u5c31\u7b49\u4e8e\u6c42\u5728 l \u5230 r \u7684\u8303\u56f4\u5185\uff0c\u6709\u591a\u5c11\u6570\u7684\u5927\u5c0f\u5c0f\u4e8e l\u3002\u5177\u4f53\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n \\log{n})\\) \uff08\u8003\u8651 n\uff0cq \u5728\u540c\u4e00\u7ea7\u522b\uff09\u3002 \u8d5b\u65f6\u4ee3\u7801/\u6b63\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <algorithm> #include <iostream> #include <stack> using namespace std ; const int maxn = 5e5 + 7 ; int n , m ; int a [ maxn ], b [ maxn ]; int s [ maxn ], scnt ; pair < int , int > pre [ maxn ]; int c [ maxn ]; pair < pair < int , int > , int > q [ maxn ]; int ans [ maxn ]; void add ( int x , int k ) { for (; x <= n ; x += x & - x ) c [ x ] += k ; } int ask ( int x ) { int k = 0 ; for (; x ; x -= x & - x ) k += c [ x ]; return k ; } int main () { freopen ( \"stack.in\" , \"r\" , stdin ); freopen ( \"stack.out\" , \"w\" , stdout ); scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & b [ i ]); s [ ++ scnt ] = 0 , b [ 0 ] = 1e7 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( a [ s [ scnt ]] == a [ i ] || b [ s [ scnt ]] <= b [ i ]) scnt -- ; pre [ i ] = make_pair ( s [ scnt ], i ); s [ ++ scnt ] = i ; } sort ( pre + 1 , pre + n + 1 ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & q [ i ]. first . first , & q [ i ]. first . second ); q [ i ]. second = i ; } sort ( q + 1 , q + m + 1 ); int p = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { while ( p <= n && pre [ p ]. first < q [ i ]. first . first ) add ( pre [ p ]. second , 1 ), p ++ ; ans [ q [ i ]. second ] = ask ( q [ i ]. first . second ) - ask ( q [ i ]. first . first - 1 ); } for ( int i = 1 ; i <= m ; i ++ ) { printf ( \"%d \\n \" , ans [ i ]); } } T2 \u8ba8\u8bba \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a n \\((1\\leq n\\leq 10^6)\\) \u4e2a\u96c6\u5408\uff0c\u6c42\u662f\u5426\u5b58\u5728\u4ea4\u53c9\u5173\u7cfb\u3002 \u8d5b\u65f6\u601d\u8def\uff1a\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u6309\u96c6\u5408\u7684\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6dfb\u52a0\uff0c\u5e76\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u603b\u662f\u5728\u5b83\u4e4b\u524d\u88ab\u6dfb\u52a0\u3002\u5982\u679c\u67d0\u4e00\u6b21\u6dfb\u52a0\u53d1\u73b0\u8fde\u901a\u5757\u7684\u5927\u5c0f\u5927\u4e8e\u8be5\u70b9\u7684\u5ea6\u6570\uff0c\u5219\u53ef\u4ee5\u5224\u5b9a\u5b58\u5728\u4ea4\u53c9\u5173\u7cfb\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n\\operatorname{\\alpha}(n))\\) \u8d5b\u65f6\u4ee3\u7801/\u6b63\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 #include <algorithm> #include <cstring> #include <iostream> using namespace std ; const int maxn = 2e6 + 7 , maxm = 4e6 + 7 ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int t , n ; int k [ maxn ]; int fa [ maxn ], siz [ maxn ]; int get_fa ( int x ) { if ( x == fa [ x ]) return x ; return fa [ x ] = get_fa ( fa [ x ]); } void merge ( int a , int b ) { int f_a = get_fa ( a ), f_b = get_fa ( b ); if ( f_a != f_b ) { siz [ f_a ] += siz [ f_b ]; fa [ f_b ] = f_a ; } } int ord [ maxn ]; int mark [ maxn ]; bool comp ( int a , int b ) { return k [ a ] < k [ b ]; } int main () { freopen ( \"discuss.in\" , \"r\" , stdin ); freopen ( \"discuss.out\" , \"w\" , stdout ); int _t ; scanf ( \"%d\" , & t ); while ( t -- ) { for ( int i = 1 ; i <= n ; i ++ ) head [ i ] = 0 ; scanf ( \"%d\" , & n ); bool flag = false ; int ansa , ansb ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & k [ i ]); for ( int j = 1 ; j <= k [ i ]; j ++ ) { scanf ( \"%d\" , & _t ); add ( i , n + _t ); } } for ( int i = 1 ; i <= n * 2 + 2 ; i ++ ) { fa [ i ] = i ; siz [ i ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { ord [ i ] = i ; siz [ i ] = 0 ; } sort ( ord + 1 , ord + n + 1 , comp ); for ( int i = 1 ; i <= n ; i ++ ) { int c = ord [ i ]; for ( int j = head [ c ]; j ; j = nxt [ j ]) merge ( c , to [ j ]); if ( siz [ get_fa ( c )] > k [ c ]) { flag = true ; ansa = c ; for ( int j = head [ c ]; j ; j = nxt [ j ]) mark [ to [ j ]] = ( t + 1 ) << 1 ; for ( int j = n + 1 ; j <= n * 2 ; j ++ ) if ( get_fa ( j ) == get_fa ( c ) && mark [ j ] != (( t + 1 ) << 1 )) mark [ j ] = (( t + 1 ) << 1 ) | 1 ; bool flaga = 0 , flagb = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { flaga = 0 , flagb = 0 ; if ( get_fa ( c ) == get_fa ( j )) for ( int l = head [ j ]; l ; l = nxt [ l ]) if ( mark [ to [ l ]] == (( t + 1 ) << 1 )) flaga = 1 ; else if ( mark [ to [ l ]] == ((( t + 1 ) << 1 ) | 1 )) flagb = 1 ; if ( flaga && flagb ) { ansb = j ; break ; } } break ; } } if ( flag == false ) { printf ( \"NO \\n \" ); } else { printf ( \"YES \\n \" ); printf ( \"%d %d \\n \" , ansa , ansb ); } } } T3 \u5982\u4f55\u6b63\u786e\u5730\u6392\u5e8f \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a \\(m\\times n\\) \u7684\u6570\u7ec4 \\(a_{i,j}\\) \uff0c\u5176\u4e2d \\(m\\leq4,n\\leq 2\\times 10^5\\) \uff0c\u6c42 \\(\\sum_{i=1}^{n}{\\sum_{j-1}^{n}{\\min_{k=1}^{m}{(a_{k,i}+a_{k,j})}+\\max_{k=1}^{m}{(a_{k,i}+a_{k,j})}}}\\) \u7684\u503c\u3002 \u8d5b\u65f6\u601d\u8def\uff1a\u66b4\u529b\u5f97\u90e8\u5206\u5206\u3002 \u8d5b\u65f6\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <algorithm> #include <iostream> using namespace std ; const int maxm = 5 ; const int maxn = 2e5 + 7 ; int m , n ; int a [ maxm ][ maxn ]; long long ans ; int main () { freopen ( \"sort.in\" , \"r\" , stdin ); freopen ( \"sort.out\" , \"w\" , stdout ); scanf ( \"%d%d\" , & m , & n ); for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]); if ( m == 2 ) { for ( int i = 1 ; i <= n ; i ++ ) ans += a [ 1 ][ i ] + a [ 2 ][ i ]; ans *= 2L L * n ; printf ( \"%lld \\n \" , ans ); } else { int c1 , c2 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) { c1 = 0x7fffffff , c2 = 0 ; for ( int k = 1 ; k <= m ; k ++ ) c1 = min ( c1 , a [ k ][ i ] + a [ k ][ j ]), c2 = max ( c2 , a [ k ][ i ] + a [ k ][ j ]); ans += c1 + c2 ; } printf ( \"%lld \\n \" , ans ); } }","title":"\u6bd4\u8d5b"},{"location":"solutions/competitions/#_1","text":"","title":"\u6bd4\u8d5b"},{"location":"solutions/competitions/#noi-online-2022","text":"\u611f\u89c9 NOI Online \u50cf\u5728\u53d8\u6c34\uff0c\u63d0\u9ad8\u7ec4\u7684\u9898\u4e5f\u5c31\u4e24\u9053\u84dd\u9898\u52a0\u4e00\u9053\u7d2b\u9898\uff0c\u6570\u636e\u7ed3\u6784\u53ea\u9700\u8981\u7528\u5230\u6811\u72b6\u6570\u7ec4\u548c\u5e76\u67e5\u96c6\uff0c\u6ca1\u6709\u4efb\u4f55\u9ad8\u7ea7\u7684\u6280\u5de7\u3002\u6bd4\u8d5b\u60c5\u51b5\u662f\u6839\u636e\u6d1b\u8c37\u6c11\u95f4\u6570\u636e\uff0c\u53ea A \u6389\u4e86\u524d\u4e24\u9898\uff0c\u6700\u540e\u4e00\u9898\u5199\u7684\u662f\u66b4\u529b\u5206\u3002","title":"NOI Online 2022"},{"location":"solutions/competitions/#t1","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u6709 n \\((1\\leq n\\leq 10^5)\\) \u4e2a\u4e8c\u5143\u7ec4 \\((a_i,b_i)\\) \u3002\u73b0\u5728\u7ed9\u51fa q \\((1\\leq q\\leq 10^5)\\) \u4e2a\u8be2\u95ee\uff0c\u5c06\u4ece l \u5230 r \u7684\u6240\u6709\u4e8c\u5143\u7ec4\u987a\u6b21\u63d2\u5165\u5355\u8c03\u6808\u4e2d\uff0c\u6ee1\u8db3 b \u503c\u7531\u6808\u5e95\u5230\u6808\u9876\u4e0b\u964d\uff0c\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684 a \u503c\u4e0d\u76f8\u7b49\u3002\u6c42\u6709\u591a\u5c11\u4e8c\u5143\u7ec4\u5728\u6808\u4e2d\u5355\u72ec\u51fa\u73b0\u8fc7\u3002 \u8d5b\u65f6\u601d\u8def\uff1a\u8003\u8651\u6a21\u62df\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e0d\u51b2\u7a81\u7684\u524d\u9a71 \\(fa\\) \u3002\u6c42\u591a\u5c11\u4e8c\u5143\u7ec4\u5728\u6808\u4e2d\u51fa\u73b0\u8fc7\uff0c\u5c31\u7b49\u4e8e\u6c42\u5728 l \u5230 r \u7684\u8303\u56f4\u5185\uff0c\u6709\u591a\u5c11\u6570\u7684\u5927\u5c0f\u5c0f\u4e8e l\u3002\u5177\u4f53\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n \\log{n})\\) \uff08\u8003\u8651 n\uff0cq \u5728\u540c\u4e00\u7ea7\u522b\uff09\u3002 \u8d5b\u65f6\u4ee3\u7801/\u6b63\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <algorithm> #include <iostream> #include <stack> using namespace std ; const int maxn = 5e5 + 7 ; int n , m ; int a [ maxn ], b [ maxn ]; int s [ maxn ], scnt ; pair < int , int > pre [ maxn ]; int c [ maxn ]; pair < pair < int , int > , int > q [ maxn ]; int ans [ maxn ]; void add ( int x , int k ) { for (; x <= n ; x += x & - x ) c [ x ] += k ; } int ask ( int x ) { int k = 0 ; for (; x ; x -= x & - x ) k += c [ x ]; return k ; } int main () { freopen ( \"stack.in\" , \"r\" , stdin ); freopen ( \"stack.out\" , \"w\" , stdout ); scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & b [ i ]); s [ ++ scnt ] = 0 , b [ 0 ] = 1e7 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( a [ s [ scnt ]] == a [ i ] || b [ s [ scnt ]] <= b [ i ]) scnt -- ; pre [ i ] = make_pair ( s [ scnt ], i ); s [ ++ scnt ] = i ; } sort ( pre + 1 , pre + n + 1 ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & q [ i ]. first . first , & q [ i ]. first . second ); q [ i ]. second = i ; } sort ( q + 1 , q + m + 1 ); int p = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { while ( p <= n && pre [ p ]. first < q [ i ]. first . first ) add ( pre [ p ]. second , 1 ), p ++ ; ans [ q [ i ]. second ] = ask ( q [ i ]. first . second ) - ask ( q [ i ]. first . first - 1 ); } for ( int i = 1 ; i <= m ; i ++ ) { printf ( \"%d \\n \" , ans [ i ]); } }","title":"T1 \u4e39\u9493\u6218"},{"location":"solutions/competitions/#t2","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a n \\((1\\leq n\\leq 10^6)\\) \u4e2a\u96c6\u5408\uff0c\u6c42\u662f\u5426\u5b58\u5728\u4ea4\u53c9\u5173\u7cfb\u3002 \u8d5b\u65f6\u601d\u8def\uff1a\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u6309\u96c6\u5408\u7684\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6dfb\u52a0\uff0c\u5e76\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u603b\u662f\u5728\u5b83\u4e4b\u524d\u88ab\u6dfb\u52a0\u3002\u5982\u679c\u67d0\u4e00\u6b21\u6dfb\u52a0\u53d1\u73b0\u8fde\u901a\u5757\u7684\u5927\u5c0f\u5927\u4e8e\u8be5\u70b9\u7684\u5ea6\u6570\uff0c\u5219\u53ef\u4ee5\u5224\u5b9a\u5b58\u5728\u4ea4\u53c9\u5173\u7cfb\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n\\operatorname{\\alpha}(n))\\) \u8d5b\u65f6\u4ee3\u7801/\u6b63\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 #include <algorithm> #include <cstring> #include <iostream> using namespace std ; const int maxn = 2e6 + 7 , maxm = 4e6 + 7 ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int t , n ; int k [ maxn ]; int fa [ maxn ], siz [ maxn ]; int get_fa ( int x ) { if ( x == fa [ x ]) return x ; return fa [ x ] = get_fa ( fa [ x ]); } void merge ( int a , int b ) { int f_a = get_fa ( a ), f_b = get_fa ( b ); if ( f_a != f_b ) { siz [ f_a ] += siz [ f_b ]; fa [ f_b ] = f_a ; } } int ord [ maxn ]; int mark [ maxn ]; bool comp ( int a , int b ) { return k [ a ] < k [ b ]; } int main () { freopen ( \"discuss.in\" , \"r\" , stdin ); freopen ( \"discuss.out\" , \"w\" , stdout ); int _t ; scanf ( \"%d\" , & t ); while ( t -- ) { for ( int i = 1 ; i <= n ; i ++ ) head [ i ] = 0 ; scanf ( \"%d\" , & n ); bool flag = false ; int ansa , ansb ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & k [ i ]); for ( int j = 1 ; j <= k [ i ]; j ++ ) { scanf ( \"%d\" , & _t ); add ( i , n + _t ); } } for ( int i = 1 ; i <= n * 2 + 2 ; i ++ ) { fa [ i ] = i ; siz [ i ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { ord [ i ] = i ; siz [ i ] = 0 ; } sort ( ord + 1 , ord + n + 1 , comp ); for ( int i = 1 ; i <= n ; i ++ ) { int c = ord [ i ]; for ( int j = head [ c ]; j ; j = nxt [ j ]) merge ( c , to [ j ]); if ( siz [ get_fa ( c )] > k [ c ]) { flag = true ; ansa = c ; for ( int j = head [ c ]; j ; j = nxt [ j ]) mark [ to [ j ]] = ( t + 1 ) << 1 ; for ( int j = n + 1 ; j <= n * 2 ; j ++ ) if ( get_fa ( j ) == get_fa ( c ) && mark [ j ] != (( t + 1 ) << 1 )) mark [ j ] = (( t + 1 ) << 1 ) | 1 ; bool flaga = 0 , flagb = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { flaga = 0 , flagb = 0 ; if ( get_fa ( c ) == get_fa ( j )) for ( int l = head [ j ]; l ; l = nxt [ l ]) if ( mark [ to [ l ]] == (( t + 1 ) << 1 )) flaga = 1 ; else if ( mark [ to [ l ]] == ((( t + 1 ) << 1 ) | 1 )) flagb = 1 ; if ( flaga && flagb ) { ansb = j ; break ; } } break ; } } if ( flag == false ) { printf ( \"NO \\n \" ); } else { printf ( \"YES \\n \" ); printf ( \"%d %d \\n \" , ansa , ansb ); } } }","title":"T2 \u8ba8\u8bba"},{"location":"solutions/competitions/#t3","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a \\(m\\times n\\) \u7684\u6570\u7ec4 \\(a_{i,j}\\) \uff0c\u5176\u4e2d \\(m\\leq4,n\\leq 2\\times 10^5\\) \uff0c\u6c42 \\(\\sum_{i=1}^{n}{\\sum_{j-1}^{n}{\\min_{k=1}^{m}{(a_{k,i}+a_{k,j})}+\\max_{k=1}^{m}{(a_{k,i}+a_{k,j})}}}\\) \u7684\u503c\u3002 \u8d5b\u65f6\u601d\u8def\uff1a\u66b4\u529b\u5f97\u90e8\u5206\u5206\u3002 \u8d5b\u65f6\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <algorithm> #include <iostream> using namespace std ; const int maxm = 5 ; const int maxn = 2e5 + 7 ; int m , n ; int a [ maxm ][ maxn ]; long long ans ; int main () { freopen ( \"sort.in\" , \"r\" , stdin ); freopen ( \"sort.out\" , \"w\" , stdout ); scanf ( \"%d%d\" , & m , & n ); for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]); if ( m == 2 ) { for ( int i = 1 ; i <= n ; i ++ ) ans += a [ 1 ][ i ] + a [ 2 ][ i ]; ans *= 2L L * n ; printf ( \"%lld \\n \" , ans ); } else { int c1 , c2 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) { c1 = 0x7fffffff , c2 = 0 ; for ( int k = 1 ; k <= m ; k ++ ) c1 = min ( c1 , a [ k ][ i ] + a [ k ][ j ]), c2 = max ( c2 , a [ k ][ i ] + a [ k ][ j ]); ans += c1 + c2 ; } printf ( \"%lld \\n \" , ans ); } }","title":"T3 \u5982\u4f55\u6b63\u786e\u5730\u6392\u5e8f"},{"location":"solutions/dp/","text":"","title":"\u52a8\u6001\u89c4\u5212"},{"location":"solutions/graph/","text":"\u56fe\u8bba \u00b6 \u56fe\u7684\u8fde\u901a\u6027 \u00b6 \u6a21\u677f\u9898 \u00b6 P2341 [USACO03FALL / HAOI2006] \u53d7\u6b22\u8fce\u7684\u725b G \u540c\u6c42\u552f\u4e00\u7684\u51fa\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <iostream> #include <vector> #include <cstring> #define MAXN 10005 using namespace std ; int m , n , mmp , sum ; vector < int > g [ MAXN ]; // original graph vector < int > gr [ MAXN ]; // reversed graph vector < int > f ; // stack int cmp [ MAXN ]; bool visited [ MAXN ]; int init () { memset ( visited , 0 , sizeof ( visited )); return 0 ; } int add ( int a , int b ) { g [ a ]. push_back ( b ); gr [ b ]. push_back ( a ); return 0 ; } int dfs1 ( int a ) { visited [ a ] = 1 ; for ( unsigned int i = 0 ; i < g [ a ]. size (); i ++ ) { if ( visited [ g [ a ][ i ]] == 0 ) { dfs1 ( g [ a ][ i ]); } } f . push_back ( a ); return 0 ; } int dfs2 ( int a , int k ) { visited [ a ] = 1 ; cmp [ a ] = k ; for ( unsigned int i = 0 ; i < gr [ a ]. size (); i ++ ) { if ( visited [ gr [ a ][ i ]] == 0 ) { dfs2 ( gr [ a ][ i ], k ); } } return 0 ; } int kosaraju () { init (); f . clear (); for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { dfs1 ( i ); } } init (); int k = 0 ; for ( int i = f . size () - 1 ; i >= 0 ; i -- ) { if ( visited [ f [ i ]] == 0 ) { dfs2 ( f [ i ], k ++ ); } } return k ; } int main () { int t , u ; cin >> n >> m ; for ( int i = 0 ; i < m ; i ++ ) { cin >> t >> u ; add ( t , u ); } int ans = kosaraju (); for ( int i = 1 ; i <= n ; i ++ ) { if ( cmp [ i ] == ans - 1 ) { mmp = i ; sum ++ ; } } init (); dfs2 ( mmp , 1 ); for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { cout << 0 << endl ; return 0 ; } } cout << sum << endl ; return 0 ; } P2863 [USACO06JAN]The Cow Prom S \u540c\u6c42\u70b9\u6570\u5927\u4e8e 1 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <algorithm> #include <iostream> #include <stack> #include <vector> using namespace std ; int n , m ; int a , b ; vector < int > g [ 20007 ]; stack < int > s ; int dfn [ 20007 ], low [ 20007 ], q [ 20007 ]; int cnt , bcnt , bs [ 20007 ], ans ; void dfs ( int cur ) { dfn [ cur ] = ++ cnt ; low [ cur ] = dfn [ cur ]; q [ cur ] = 1 ; s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ cur ], low [ nxt ]); } if ( q [ nxt ]) low [ cur ] = min ( low [ cur ], dfn [ nxt ]); } if ( dfn [ cur ] == low [ cur ]) { bcnt ++ ; while ( s . top () != cur ) { bs [ bcnt ] ++ ; q [ s . top ()] = 0 ; s . pop (); } bs [ bcnt ] ++ ; q [ s . top ()] = 0 ; s . pop (); } } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> a >> b ; g [ a ]. push_back ( b ); } for ( int i = 1 ; i <= n ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= bcnt ; i ++ ) if ( bs [ i ] > 1 ) ans ++ ; cout << ans << endl ; } P2746 [USACO5.3]\u6821\u56ed\u7f51Network of Schools \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e00\u5f20\u6709 \\(N\\) \\((2\\leq N\\leq 100)\\) \u4e2a\u8282\u70b9\u7684\u6709\u5411\u56fe\uff0c\u6c42\u51fa\u6700\u5c0f\u7684\u70b9\u96c6\u5927\u5c0f\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u4f55\u4e0d\u5728\u70b9\u96c6\u4e2d\u7684\u8282\u70b9\uff0c\u90fd\u5b58\u5728\u4e00\u6761\u70b9\u96c6\u4e2d\u67d0\u70b9\u5230\u8be5\u70b9\u7684\u7b80\u5355\u8def\u5f84\uff1b\u5e76\u6c42\u51fa\u6700\u5c0f\u7684\u52a0\u8fb9\u6570\u76ee\uff0c\u4f7f\u5f97\u8be5\u56fe\u5f3a\u8fde\u901a\u3002 \u89e3\u6cd5\uff1a\u7f29\u70b9\u540e\u7684\u56fe\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u524d\u8005\u7684\u7b54\u6848\u5c31\u662f\u68ee\u6797\u6811\u6839\u7684\u6570\u76ee\uff0c\u5373\u5165\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff1b\u8981\u901a\u8fc7\u52a0\u8fb9\u7684\u65b9\u5f0f\u4f7f\u68ee\u6797\u5f3a\u8fde\u901a\uff0c\u5c31\u8981\u628a\u6240\u6709\u53f6\u8282\u70b9\u90fd\u8fde\u5230\u6839\u8282\u70b9\u4e0a\uff0c\u5e76\u4f7f\u6240\u6709\u6839\u8282\u70b9\u76f8\u8fde\uff0c\u6b64\u65f6\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u5404\u4e2a\u8fde\u901a\u5757\u9996\u5c3e\u76f8\u8fde\uff0c\u5269\u4f59\u7684\u8282\u70b9\u4f9d\u6b21\u8fde\u5165\u73af\u4e2d\uff0c\u9700\u8981\u52a0\u8fb9\u7684\u6761\u6570\u5c31\u662f\u5165\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6570\u4e0e\u51fa\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6570\u7684\u8f83\u5927\u503c\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <algorithm> #include <iostream> #include <stack> #include <vector> using namespace std ; int n , t ; vector < int > g [ 107 ]; stack < int > s ; int dfn [ 107 ], low [ 107 ], belong [ 107 ], bs [ 107 ], cnt , bcnt , q [ 107 ]; int ind [ 107 ], oud [ 107 ], ans1 , ans2 ; void dfs ( int cur ) { dfn [ cur ] = ++ cnt ; low [ cur ] = dfn [ cur ]; q [ cur ] = 1 ; s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ cur ], low [ nxt ]); } if ( q [ nxt ]) low [ cur ] = min ( low [ cur ], dfn [ nxt ]); } if ( low [ cur ] == dfn [ cur ]) { bcnt ++ ; while ( s . top () != cur ) { bs [ bcnt ] ++ ; belong [ s . top ()] = bcnt ; q [ s . top ()] = 0 ; s . pop (); } bs [ bcnt ] ++ ; belong [ s . top ()] = bcnt ; q [ s . top ()] = 0 ; s . pop (); } } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> t ; while ( t != 0 ) { g [ i ]. push_back ( t ); cin >> t ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j : g [ i ]) if ( belong [ i ] != belong [ j ]) ind [ belong [ j ]] ++ , oud [ belong [ i ]] ++ ; for ( int i = 1 ; i <= bcnt ; i ++ ) if ( ind [ i ] == 0 ) ans1 ++ ; for ( int i = 1 ; i <= bcnt ; i ++ ) if ( oud [ i ] == 0 ) ans2 ++ ; if ( bcnt == 1 ) cout << 1 << '\\n' << 0 << endl ; else { ans2 = max ( ans1 , ans2 ); cout << ans1 << endl ; cout << ans2 << endl ; } } 2-SAT \u95ee\u9898 \u00b6 \u6a21\u677f\u9898 \u00b6 P4782 \u3010\u6a21\u677f\u30112-SAT \u95ee\u9898 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> #include <stack> #include <vector> using namespace std ; int n , m , _i , a , _j , b ; vector < int > g [ 2000007 ]; int s [ 2000007 ], scnt ; int dfn [ 2000007 ], low [ 2000007 ], q [ 2000007 ]; int belong [ 2000007 ], bs [ 2000007 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 ; s [ ++ scnt ] = cur ; for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s [ scnt ] != cur ) belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; } } int iv ( int i , int v ) { return i + v * n ; } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> _i >> a >> _j >> b ; g [ _i + n * ( a ^ 1 )]. push_back ( _j + n * ( b & 1 )); g [ _j + n * ( b ^ 1 )]. push_back ( _i + n * ( a & 1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"IMPOSSIBLE\" << endl ; return 0 ; } cout << \"POSSIBLE\" << endl ; for ( int i = 1 ; i <= n ; i ++ ) cout << ( belong [ i ] > belong [ i + n ]) << ' ' ; cout << endl ; } P5782 [POI2001] \u548c\u5e73\u59d4\u5458\u4f1a \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <stdio.h> #include <string.h> #define min(a, b) (((a) < (b)) ? (a) : (b)) int n , m , a , b ; const int maxn = 8e3 + 7 ; const int maxm = 2e4 + 7 ; int head [ maxn * 2 ], nxt [ maxm * 4 ], to [ maxm * 4 ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], ins [ maxn * 2 ], scnt ; int belong [ maxn * 2 ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; ~ i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( low [ u ] == dfn [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int main () { bool flag = 1 ; memset ( head , -1 , sizeof ( head )); memset ( to , -1 , sizeof ( to )); scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ), a -- , b -- ; add ( a , b ^ 1 ), add ( b , a ^ 1 ); } for ( int i = 0 ; i < n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] == belong [ i ^ 1 ]) flag = 0 ; if ( flag ) { for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] < belong [ i ^ 1 ]) printf ( \"%d \\n \" , i + 1 ); else printf ( \"%d \\n \" , ( i ^ 1 ) + 1 ); } else puts ( \"NIE\" ); } P4171 [JSOI2010] \u6ee1\u6c49\u5168\u5e2d \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <iostream> #include <stack> #include <vector> using namespace std ; int k ; int n , m , id1 , id2 ; char t1 , t2 ; vector < int > g [ 207 ]; stack < int > s ; int dfn [ 207 ], low [ 207 ], belong [ 207 ], bs [ 207 ], q [ 207 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 , s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s . top () != cur ) belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); } } inline int iv ( char t , int i ) { if ( t == 'h' || t == 'l' ) return i ; else return n + i ; } int main () { cin >> k ; while ( k -- ) { cin >> n >> m ; bcnt = cnt = 0 ; for (; s . size (); s . pop ()) ; for ( int i = 1 ; i <= n * 2 ; i ++ ) g [ i ]. clear (), q [ i ] = dfn [ i ] = low [ i ] = belong [ i ] = bs [ i ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> t1 >> id1 >> t2 >> id2 ; g [ iv ( t1 - 1 , id1 )]. push_back ( iv ( t2 , id2 )); g [ iv ( t2 - 1 , id2 )]. push_back ( iv ( t1 , id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"BAD\" << endl ; goto flag ; } cout << \"GOOD\" << endl ; flag :; } } P3825 [NOI2017] \u6e38\u620f \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u5c0f L \u6709 A\u3001B\u3001C \u4e09\u8f86\u8d5b\u8f66\uff0cn \u573a\u6e38\u620f\u4e2d\u6709 d \u573a \\((d \\leq 8, n \\leq 5 \\times 10^4)\\) \u4e0d\u9650\u5236\u8d5b\u8f66\uff0c\u5176\u4f59\u7684\u573a\u6b21\u4f1a\u7981\u6b62\u67d0\u4e00\u8f86\u8d5b\u8f66\u3002\u8fd8\u6709 m \u6761 \\((m \\leq 10^4)\\) \u89c4\u5219\u9650\u5236\u5982\u679c\u5728\u573a\u6b21 \\(i\\) \u4f7f\u7528\u67d0\u4e00\u8d5b\u8f66\uff0c\u5728\u573a\u6b21 \\(j\\) \u5fc5\u987b\u4f7f\u7528\u67d0\u79cd\u8d5b\u8f66\u3002\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u82e5\u6709\u89e3\uff0c\u8f93\u51fa\u4e00\u79cd\u65b9\u6848\u3002 \u89e3\u6cd5\uff1a\u8003\u8651\u5230\u7edd\u5927\u591a\u6570\u573a\u6b21\u53ea\u80fd\u4f7f\u7528\u4e24\u8f66\u4e4b\u4e00\uff0c\u679a\u4e3e \\(d\\) \u573a\u4e0d\u9650\u8d5b\u8f66\u7684\u573a\u6b21\u9650\u5236 A \u6216\u9650\u5236 B\uff0c\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O((n+m)\\cdot 2^d)\\) \u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 ; char S [ maxn ]; int n , d , m ; int head [ maxn * 2 ], nxt [ maxm * 2 ], to [ maxm * 2 ], cnt ; struct sat { int i , j ; char hi , hj ; } q [ maxm ]; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int anti ( int u ) { if ( u > n ) return u - n ; else return u + n ; } int id ( int u , char c ) { if ( c == (( S [ u ] == 'a' ) ? 'b' : 'a' )) return u ; return u + n ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], belong [ maxn * 2 ], bcnt , scnt , ins [ maxn * 2 ]; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { ++ bcnt ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int solve () { cnt = 0 , dcnt = 0 , bcnt = 0 , scnt = 0 ; memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); memset ( s , 0 , sizeof ( s )); memset ( belong , 0 , sizeof ( belong )); memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); for ( int i = 1 ; i <= m ; i ++ ) { if ( q [ i ]. i == q [ i ]. j && q [ i ]. hi == q [ i ]. hj ) continue ; if ( q [ i ]. hi == S [ q [ i ]. i ]) continue ; int id1 = id ( q [ i ]. i , q [ i ]. hi ), id2 = id ( q [ i ]. j , q [ i ]. hj ); if ( q [ i ]. hj == S [ q [ i ]. j ]) add ( id1 , anti ( id1 )); else add ( id1 , id2 ), add ( anti ( id2 ), anti ( id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( belong [ i ] == belong [ anti ( i )]) return 0 ; } return 1 ; } int xpos [ 9 ], xcnt ; bool flag ; int main () { scanf ( \"%d %d \\n %s \\n %d\" , & n , & d , S + 1 , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %c %d %c\" , & ( q [ i ]. i ), & ( q [ i ]. hi ), & ( q [ i ]. j ), & ( q [ i ]. hj )); q [ i ]. hi += 32 , q [ i ]. hj += 32 ; } for ( int i = 1 ; i <= n ; i ++ ) if ( S [ i ] == 'x' ) xpos [ xcnt ++ ] = i ; for ( int i = 0 ; i < ( 1 << d ); i ++ ) { for ( int j = 0 ; j < d ; j ++ ) if ( i & ( 1 << j )) S [ xpos [ j ]] = 'a' ; else S [ xpos [ j ]] = 'b' ; flag = flag || solve (); if ( flag ) break ; } if ( flag ) for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%c\" , ( belong [ i ] < belong [ anti ( i )]) ? (( S [ i ] == 'a' ) ? 'B' : 'A' ) : (( S [ i ] == 'c' ) ? 'B' : 'C' )); else puts ( \"-1 \\n \" ); } P3209 [HNOI2010] \u5e73\u9762\u56fe\u5224\u5b9a \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1aT \u7ec4\u6570\u636e \\((T\\leq 300)\\) \uff0c\u7ed9\u4f60\u4e00\u4e2a\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u548c\u5176\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5224\u65ad\u8be5\u56fe\u662f\u5426\u4e3a\u5e73\u9762\u56fe\u3002 \\(N\\leq 200\\) \u3002 \u89e3\u6cd5\uff1a\u4e3a\u4e86\u7b80\u5316\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u9762\u56fe\u5b9a\u7406 \\(m \\leq 3\\times n - 6\\) \uff0c\u521d\u6b65\u6392\u9664\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u60c5\u51b5\u3002\u4e00\u6761\u8fb9\u53ef\u4ee5\u5728\u73af\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u73af\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fb9\u7684\u77db\u76fe\u5efa\u7acb\u5173\u7cfb\uff0c\u4ece\u800c\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\u6c42\u89e3\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 120007 ; int t , n , m ; int _t1 , _t2 ; int head [ maxn ], nxt [ maxn ], to [ maxn ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn ], low [ maxn ], dcnt ; int s [ maxn ], ins [ maxn ], scnt ; int belong [ maxn ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ cnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } void init () { cnt = 0 , dcnt = 0 , bcnt = 0 ; memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); } int l [ maxn ], r [ maxn ]; int hid [ maxn ]; int flag ; int main () { scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); if ( m <= n * 3 - 6 ) flag = 1 ; else flag = 0 ; for ( int i = 1 ; i <= m ; i ++ ) if ( flag ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); else scanf ( \"%d%d\" , & _t1 , & _t2 ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & _t1 ), hid [ _t1 ] = i ; if ( ! flag ) { puts ( \"NO\" ); continue ; } init (); for ( int i = 1 ; i < m ; i ++ ) for ( int j = i + 1 ; j <= m ; j ++ ) { int a , b , c , d ; a = l [ i ], b = r [ i ], c = l [ j ], d = r [ j ]; a = hid [ a ], b = hid [ b ], c = hid [ c ], d = hid [ d ]; if ( b < a ) swap ( a , b ); if ( d < c ) swap ( c , d ); if (( a < c && c < b && b < d ) || ( c < a && a < d && d < b )) add ( i , j + m ), add ( i + m , j ), add ( j , i + m ), add ( j + m , i ); } for ( int i = 1 ; i <= m * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= m ; i ++ ) if ( belong [ i ] == belong [ i + m ]) { puts ( \"NO\" ), flag = 0 ; break ; } if ( flag ) puts ( \"YES\" ); } } \u70b9\u5206\u6cbb \u00b6 \u6a21\u677f\u9898 \u00b6 P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #include <algorithm> #include <iostream> using namespace std ; const int maxn = 1e4 + 7 , maxm = 2e4 + 7 , maxq = 1e2 + 7 ; int n ; int head [ maxn ], nxt [ maxm ], to [ maxm ], w [ maxm ], cnt ; bool blocked [ maxn ]; void add ( int u , int v , int a ) { nxt [ ++ cnt ] = head [ u ], head [ u ] = cnt ; to [ cnt ] = v , w [ cnt ] = a ; } int m ; int q [ maxq ], ans [ maxq ]; int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; } struct p { int dis , id , belong ; const bool operator < ( const p & b ) const { return dis < b . dis ; } } dis [ maxn ]; int dcnt , ust ; void get_dis ( int u , int fa , int d ) { if ( u == root ) dcnt = 0 , dis [ ++ dcnt ] = p { d , u , u }; else dis [ ++ dcnt ] = p { d , u , ust }; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( u == root ) ust = v ; if ( v != fa && ! blocked [ v ]) get_dis ( v , u , d + w [ i ]); } } void calc ( int u ) { get_dis ( u , 0 , 0 ); sort ( dis + 1 , dis + dcnt + 1 ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ! ans [ i ]) { int l = 1 , r = dcnt ; while ( l < r ) { if ( dis [ l ]. dis + dis [ r ]. dis > q [ i ]) r -- ; else if ( dis [ l ]. dis + dis [ r ]. dis < q [ i ]) l ++ ; else if ( dis [ l ]. belong == dis [ r ]. belong ) { if ( dis [ r ]. dis == dis [ r - 1 ]. dis ) r -- ; else l ++ ; } else { ans [ i ] = 1 ; break ; } } } } } void solve ( int u ) { blocked [ u ] = 1 ; calc ( u ); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! blocked [ v ]) { minch = n , tsiz = siz [ v ]; get_root ( v , 0 ); solve ( root ); } } } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i < n ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & q [ i ]); if ( q [ i ] == 0 ) ans [ i ] = 1 ; } minch = n , tsiz = n ; get_root ( 1 , 0 ); solve ( root ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ans [ i ]) puts ( \"AYE\" ); else puts ( \"NAY\" ); } } P4178 Tree \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u6982\u5ff5 \u00b6 \u89c1 \u6811\u94fe\u5256\u5206 \u3002\u672c\u8282\u53c2\u8003\u4e86\u8fd9\u7bc7\u6587\u7ae0 1 \u3002 CF600E Lomsat gelral \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u8282\u70b9\u7684\u6811 \\((n \\leq 10^5)\\) \uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u6c42\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u7f16\u53f7\u548c\uff08\u53ef\u80fd\u6709\u591a\u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff09\u3002 \u89e3\u6cd5\uff1a\u7531\u4e8e\u65e0\u6cd5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u6bcf\u4e00\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\uff0c\u5148\u904d\u5386\u6240\u6709\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u5f62\u6210\u7684\u5b50\u6811\uff0c\u7edf\u8ba1\u7b54\u6848\u4f46\u662f\u4e0d\u4fdd\u7559\u6570\u636e\uff0c\u7136\u540e\u904d\u5386\u91cd\u513f\u5b50\uff0c\u7edf\u8ba1\u7b54\u6848\u5e76\u4e14\u4fdd\u7559\u6570\u636e\uff0c\u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u4ee5\u53ca\u7236\u8282\u70b9\uff0c\u5408\u5e76\u91cd\u513f\u5b50\u7edf\u8ba1\u8fc7\u7684\u7b54\u6848\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> using namespace std ; const int maxn = 1e5 + 7 , maxm = 2e5 + 7 ; int n ; int c [ maxn ]; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; int cnt [ maxn ]; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int siz [ maxn ], heavy [ maxn ]; void predfs ( int u , int fa ) { siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { predfs ( v , u ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } } bool inc [ maxn ]; long long ans [ maxn ], cs , dcnt ; void calc ( int u , int fa , int k ) { cnt [ c [ u ]] += k ; if ( k == 1 && cnt [ c [ u ]] >= dcnt ) { if ( cnt [ c [ u ]] > dcnt ) { cs = 0 ; dcnt = cnt [ c [ u ]]; } cs += c [ u ]; } for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! inc [ v ]) calc ( v , u , k ); } } void dfs ( int u , int fa , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && v != heavy [ u ]) { dfs ( v , u , false ); } } if ( heavy [ u ]) { dfs ( heavy [ u ], u , true ); inc [ heavy [ u ]] = true ; } calc ( u , fa , 1 ), ans [ u ] = cs ; if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u , fa , -1 ), cs = 0 , dcnt = 0 ; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ]; int x , y ; for ( int i = 1 ; i < n ; i ++ ) { cin >> x >> y ; add ( x , y ), add ( y , x ); } predfs ( 1 , 0 ); dfs ( 1 , 0 , 1 ); for ( int i = 1 ; i <= n ; i ++ ) cout << ans [ i ] << ' ' ; cout << endl ; } \u8be5\u9898\u662f\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\u9898\u76ee\u7684\u4ee3\u8868\u3002 CF208E Blood Cousins \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u7247 n \u4e2a\u8282\u70b9 \\((n \\leq 10^5)\\) \u7684\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u70b9\u4e0e\u591a\u5c11\u4e2a\u70b9\u62e5\u6709\u5171\u540c\u7684 K \u7ea7\u7956\u5148\u3002 \u89e3\u6cd5\uff1a\u672c\u9898\u540c\u95ee\u4ee5\u7ed9\u5b9a\u70b9\u4e3a\u6839\uff0c\u6df1\u5ea6\u4e3a k \u7684\u70b9\u7684\u4e2a\u6570\u51cf\u4e00\u3002\u7ef4\u62a4\u4e00\u4e2a dis \u6570\u7ec4\u8bb0\u5f55\u7ed9\u5b9a\u6df1\u5ea6\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u65b9\u6cd5\u540c\u4e0a\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 #include <iostream> using namespace std ; const int maxn = 1e5 + 7 , maxm = 2e5 + 7 ; int n , m ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int qhead [ maxn ], qnxt [ maxn ], qto [ maxn ], qid [ maxn ], qcnt ; void qadd ( int u , int v , int id ) { qnxt [ ++ qcnt ] = qhead [ u ]; qhead [ u ] = qcnt ; qto [ qcnt ] = v ; qid [ qcnt ] = id ; } int fa [ maxn ][ 19 ], rt [ maxn ], rcnt ; int cnt [ maxn ], ans [ maxn ]; int siz [ maxn ], heavy [ maxn ], dep [ maxn ]; void predfs ( int u ) { dep [ u ] = dep [ fa [ u ][ 0 ]] + 1 ; siz [ u ] = 1 ; for ( int i = 1 ; i <= 18 ; i ++ ) fa [ u ][ i ] = fa [ fa [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; predfs ( v ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } bool inc [ maxn ]; void calc ( int u , int k ) { cnt [ dep [ u ]] += k ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! inc [ v ]) calc ( v , k ); } } void dfs ( int u , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) dfs ( v , false ); } if ( heavy [ u ]) { dfs ( heavy [ u ], true ); inc [ heavy [ u ]] = true ; } calc ( u , 1 ); for ( int i = qhead [ u ]; i ; i = qnxt [ i ]) ans [ qid [ i ]] = cnt [ qto [ i ]] - 1 ; if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u , -1 ); } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> fa [ i ][ 0 ]; if ( fa [ i ][ 0 ]) add ( fa [ i ][ 0 ], i ); else rt [ ++ rcnt ] = i ; } for ( int i = 1 ; i <= rcnt ; i ++ ) predfs ( rt [ i ]); cin >> m ; for ( int i = 1 ; i <= m ; i ++ ) { int v , p ; cin >> v >> p ; int d = dep [ v ]; for ( int k = 0 ; ( 1 << k ) <= p ; k ++ ) if ( p & ( 1 << k )) v = fa [ v ][ k ]; qadd ( v , d , i ); } for ( int i = 1 ; i <= rcnt ; i ++ ) dfs ( rt [ i ], false ); for ( int i = 1 ; i <= m ; i ++ ) cout << ans [ i ] << endl ; } \u8be5\u9898\u662f\u8bb0\u5f55\u6df1\u5ea6\u9898\u76ee\u7684\u4ee3\u8868\u3002 CF570D Tree Requests \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4ee5 1 \u4e3a\u6839\u7684 n \u4e2a\u7ed3\u70b9 \\((n \\leq 5\\times 10^5)\\) \u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u6bcd\uff08 a - z \uff09\uff0c\u6811\u7684\u6df1\u5ea6\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\u3002\u6bcf\u6b21\u8be2\u95ee a, b \u67e5\u8be2\u4ee5 a \u4e3a\u6839\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3a b \u7684\u7ed3\u70b9\u4e0a\u7684\u5b57\u6bcd\u91cd\u65b0\u6392\u5217\u4e4b\u540e\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u4e32\u3002 \u89e3\u6cd5\uff1a\u5224\u65ad\u82e5\u5e72\u4e2a\u5b57\u6bcd\u80fd\u6784\u6210\u56de\u6587\u4e32\u7684\u6761\u4ef6\u662f\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\uff0c\u6240\u4ee5\u8fd9\u4e00\u9898\u5c31\u7b49\u540c\u4e8e\u6c42\u67d0\u4e00\u70b9\u4ee5\u4e0b\u7ed9\u5b9a\u6df1\u5ea6\u51fa\u73b0\u5b57\u6bcd\u7684\u4e2a\u6570\u3002\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 dis \u8bb0\u5f55\u7ed9\u5b9a\u6df1\u5ea6\u6bcf\u4e00\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\u8be5\u9898\u9700\u8981\u6ce8\u610f IO \u5e38\u6570\u3002 Warning \u6b64\u9898\u53ef\u80fd\u8981\u6ce8\u610f IO \u5e38\u6570\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #include <iostream> using namespace std ; const int maxn = 5e5 + 7 ; int n , m ; int head [ maxn ], nxt [ maxn ], to [ maxn ], ecnt ; char val [ maxn ]; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } namespace q { int head [ maxn ], nxt [ maxn ], d [ maxn ], id [ maxn ], ecnt ; void add ( int u , int dep , int qid ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; d [ ecnt ] = dep ; id [ ecnt ] = qid ; } }; // namespace q bool ans [ maxn ]; int fa [ maxn ]; int heavy [ maxn ], siz [ maxn ], dep [ maxn ]; void predfs ( int u ) { dep [ u ] = dep [ fa [ u ]] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; predfs ( v ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ v ] > siz [ heavy [ u ]]) heavy [ u ] = v ; } } bool dis [ maxn ][ 26 ]; bool inc [ maxn ]; void calc ( int u ) { dis [ dep [ u ]][ val [ u ] - 'a' ] ^= 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! inc [ v ]) calc ( v ); } } void dfs ( int u , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) dfs ( v , false ), ans [ u ] = max ( ans [ u ], ans [ v ]); } if ( heavy [ u ]) { dfs ( heavy [ u ], true ); inc [ heavy [ u ]] = true ; } calc ( u ); for ( int i = q :: head [ u ]; i ; i = q :: nxt [ i ]) { int cnt = 0 ; for ( int j = 0 ; j < 26 ; j ++ ) cnt += dis [ q :: d [ i ]][ j ]; ans [ q :: id [ i ]] = ( cnt <= 1 ); } if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u ); } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 2 ; i <= n ; i ++ ) { scanf ( \"%d\" , & fa [ i ]); add ( fa [ i ], i ); } predfs ( 1 ); scanf ( \"%s\" , val + 1 ); int a , b ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ); q :: add ( a , b , i ); } dfs ( 1 , true ); for ( int i = 1 ; i <= m ; i ++ ) printf ( \"%s \\n \" , ( ans [ i ] ? \"Yes\" : \"No\" )); } CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u6839\u4e3a 1 \u7684 n \u4e2a\u8282\u70b9 \\((n \\leq 5\\times 10^5)\\) \u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5b57\u7b26\uff08a-v\u517122\u79cd\uff09\u3002\u4e00\u6761\u7b80\u5355\u8def\u5f84\u88ab\u79f0\u4e3a Dokhtar-kosh \u5f53\u4e14\u4ec5\u5f53\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u7ecf\u8fc7\u91cd\u65b0\u6392\u5e8f\u540e\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u6c42\u6bcf\u4e2a\u5b50\u6811\u4e2d\u6700\u957f\u7684 Dokhtar-kosh \u8def\u5f84\u7684\u957f\u5ea6\u3002 \u89e3\u6cd5\uff1a\u80fd\u5426\u6784\u6210\u56de\u6587\u4e32\u7684\u5224\u5b9a\u540c [[dsu-on-tree#cf570d-tree-requests|CF570D]]\u3002\u7531\u4e8e n \u7684\u6570\u91cf\u5c0f\u4e8e 22\uff0c\u53ef\u4ee5\u8003\u8651\u72b6\u6001\u538b\u7f29\u3002\u4f7f\u7528\u4e00\u4e2a f \u6570\u7ec4\u7ef4\u62a4\u5f53\u524d\u679a\u4e3e\u5b50\u6811\u4e0b\uff0c\u6240\u6709\u72b6\u6001\u51fa\u73b0\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <algorithm> #include <iostream> using namespace std ; const int maxn = 5e5 + 7 ; int n ; int head [ maxn ], nxt [ maxn ], to [ maxn ], w [ maxn ], ecnt ; void add ( int u , int v , char letter ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; w [ ecnt ] = 1 << ( letter - 'a' ); } int fa [ maxn ]; int sta [ maxn ], dep [ maxn ], siz [ maxn ], heavy [ maxn ]; void predfs ( int u ) { dep [ u ] = dep [ fa [ u ]] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; sta [ v ] = sta [ u ] ^ w [ i ]; predfs ( v ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ v ] > siz [ heavy [ u ]]) heavy [ u ] = v ; } } int f [ 1 << 22 ], ans [ maxn ]; void calc ( int u , int top ) { if ( f [ sta [ u ]]) ans [ top ] = max ( ans [ top ], dep [ u ] + f [ sta [ u ]] - 2 * dep [ top ]); for ( int i = 0 ; i < 22 ; i ++ ) if ( f [ sta [ u ] ^ ( 1 << i )]) ans [ top ] = max ( ans [ top ], dep [ u ] + f [ sta [ u ] ^ ( 1 << i )] - 2 * dep [ top ]); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; calc ( v , top ); } } void add ( int u ) { f [ sta [ u ]] = max ( f [ sta [ u ]], dep [ u ]); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; add ( v ); } } void del ( int u ) { f [ sta [ u ]] = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; del ( v ); } } void dfs ( int u , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) dfs ( v , false ); } if ( heavy [ u ]) dfs ( heavy [ u ], true ); if ( f [ sta [ u ]]) ans [ u ] = max ( ans [ u ], f [ sta [ u ]] - dep [ u ]); for ( int i = 0 ; i < 22 ; i ++ ) if ( f [ sta [ u ] ^ ( 1 << i )]) ans [ u ] = max ( ans [ u ], f [ sta [ u ] ^ ( 1 << i )] - dep [ u ]); f [ sta [ u ]] = max ( f [ sta [ u ]], dep [ u ]); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) { calc ( v , u ); add ( v ); } } if ( keep == false ) del ( u ); } void postdfs ( int u ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; postdfs ( v ); ans [ u ] = max ( ans [ u ], ans [ v ]); } } int main () { scanf ( \"%d\" , & n ); char _c [ 10 ]; for ( int i = 2 ; i <= n ; i ++ ) { scanf ( \"%d%s\" , & fa [ i ], _c ); add ( fa [ i ], i , _c [ 0 ]); } predfs ( 1 ); dfs ( 1 , true ); postdfs ( 1 ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d \" , ans [ i ]); printf ( \" \\n \" ); } \u8be5\u9898\u662f\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u538b\u8f74\u9898\u3002 \u6728\u6bcf\u7acb\u5144\u8c6a\u300adsu on tree(\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76)\u7b97\u6cd5\u603b\u7ed3+\u4e60\u9898\u300b \u21a9","title":"\u56fe\u8bba"},{"location":"solutions/graph/#_1","text":"","title":"\u56fe\u8bba"},{"location":"solutions/graph/#_2","text":"","title":"\u56fe\u7684\u8fde\u901a\u6027"},{"location":"solutions/graph/#_3","text":"P2341 [USACO03FALL / HAOI2006] \u53d7\u6b22\u8fce\u7684\u725b G \u540c\u6c42\u552f\u4e00\u7684\u51fa\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <iostream> #include <vector> #include <cstring> #define MAXN 10005 using namespace std ; int m , n , mmp , sum ; vector < int > g [ MAXN ]; // original graph vector < int > gr [ MAXN ]; // reversed graph vector < int > f ; // stack int cmp [ MAXN ]; bool visited [ MAXN ]; int init () { memset ( visited , 0 , sizeof ( visited )); return 0 ; } int add ( int a , int b ) { g [ a ]. push_back ( b ); gr [ b ]. push_back ( a ); return 0 ; } int dfs1 ( int a ) { visited [ a ] = 1 ; for ( unsigned int i = 0 ; i < g [ a ]. size (); i ++ ) { if ( visited [ g [ a ][ i ]] == 0 ) { dfs1 ( g [ a ][ i ]); } } f . push_back ( a ); return 0 ; } int dfs2 ( int a , int k ) { visited [ a ] = 1 ; cmp [ a ] = k ; for ( unsigned int i = 0 ; i < gr [ a ]. size (); i ++ ) { if ( visited [ gr [ a ][ i ]] == 0 ) { dfs2 ( gr [ a ][ i ], k ); } } return 0 ; } int kosaraju () { init (); f . clear (); for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { dfs1 ( i ); } } init (); int k = 0 ; for ( int i = f . size () - 1 ; i >= 0 ; i -- ) { if ( visited [ f [ i ]] == 0 ) { dfs2 ( f [ i ], k ++ ); } } return k ; } int main () { int t , u ; cin >> n >> m ; for ( int i = 0 ; i < m ; i ++ ) { cin >> t >> u ; add ( t , u ); } int ans = kosaraju (); for ( int i = 1 ; i <= n ; i ++ ) { if ( cmp [ i ] == ans - 1 ) { mmp = i ; sum ++ ; } } init (); dfs2 ( mmp , 1 ); for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { cout << 0 << endl ; return 0 ; } } cout << sum << endl ; return 0 ; } P2863 [USACO06JAN]The Cow Prom S \u540c\u6c42\u70b9\u6570\u5927\u4e8e 1 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <algorithm> #include <iostream> #include <stack> #include <vector> using namespace std ; int n , m ; int a , b ; vector < int > g [ 20007 ]; stack < int > s ; int dfn [ 20007 ], low [ 20007 ], q [ 20007 ]; int cnt , bcnt , bs [ 20007 ], ans ; void dfs ( int cur ) { dfn [ cur ] = ++ cnt ; low [ cur ] = dfn [ cur ]; q [ cur ] = 1 ; s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ cur ], low [ nxt ]); } if ( q [ nxt ]) low [ cur ] = min ( low [ cur ], dfn [ nxt ]); } if ( dfn [ cur ] == low [ cur ]) { bcnt ++ ; while ( s . top () != cur ) { bs [ bcnt ] ++ ; q [ s . top ()] = 0 ; s . pop (); } bs [ bcnt ] ++ ; q [ s . top ()] = 0 ; s . pop (); } } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> a >> b ; g [ a ]. push_back ( b ); } for ( int i = 1 ; i <= n ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= bcnt ; i ++ ) if ( bs [ i ] > 1 ) ans ++ ; cout << ans << endl ; }","title":"\u6a21\u677f\u9898"},{"location":"solutions/graph/#p2746-usaco53network-of-schools","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e00\u5f20\u6709 \\(N\\) \\((2\\leq N\\leq 100)\\) \u4e2a\u8282\u70b9\u7684\u6709\u5411\u56fe\uff0c\u6c42\u51fa\u6700\u5c0f\u7684\u70b9\u96c6\u5927\u5c0f\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u4f55\u4e0d\u5728\u70b9\u96c6\u4e2d\u7684\u8282\u70b9\uff0c\u90fd\u5b58\u5728\u4e00\u6761\u70b9\u96c6\u4e2d\u67d0\u70b9\u5230\u8be5\u70b9\u7684\u7b80\u5355\u8def\u5f84\uff1b\u5e76\u6c42\u51fa\u6700\u5c0f\u7684\u52a0\u8fb9\u6570\u76ee\uff0c\u4f7f\u5f97\u8be5\u56fe\u5f3a\u8fde\u901a\u3002 \u89e3\u6cd5\uff1a\u7f29\u70b9\u540e\u7684\u56fe\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u524d\u8005\u7684\u7b54\u6848\u5c31\u662f\u68ee\u6797\u6811\u6839\u7684\u6570\u76ee\uff0c\u5373\u5165\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff1b\u8981\u901a\u8fc7\u52a0\u8fb9\u7684\u65b9\u5f0f\u4f7f\u68ee\u6797\u5f3a\u8fde\u901a\uff0c\u5c31\u8981\u628a\u6240\u6709\u53f6\u8282\u70b9\u90fd\u8fde\u5230\u6839\u8282\u70b9\u4e0a\uff0c\u5e76\u4f7f\u6240\u6709\u6839\u8282\u70b9\u76f8\u8fde\uff0c\u6b64\u65f6\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u5404\u4e2a\u8fde\u901a\u5757\u9996\u5c3e\u76f8\u8fde\uff0c\u5269\u4f59\u7684\u8282\u70b9\u4f9d\u6b21\u8fde\u5165\u73af\u4e2d\uff0c\u9700\u8981\u52a0\u8fb9\u7684\u6761\u6570\u5c31\u662f\u5165\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6570\u4e0e\u51fa\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6570\u7684\u8f83\u5927\u503c\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <algorithm> #include <iostream> #include <stack> #include <vector> using namespace std ; int n , t ; vector < int > g [ 107 ]; stack < int > s ; int dfn [ 107 ], low [ 107 ], belong [ 107 ], bs [ 107 ], cnt , bcnt , q [ 107 ]; int ind [ 107 ], oud [ 107 ], ans1 , ans2 ; void dfs ( int cur ) { dfn [ cur ] = ++ cnt ; low [ cur ] = dfn [ cur ]; q [ cur ] = 1 ; s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ cur ], low [ nxt ]); } if ( q [ nxt ]) low [ cur ] = min ( low [ cur ], dfn [ nxt ]); } if ( low [ cur ] == dfn [ cur ]) { bcnt ++ ; while ( s . top () != cur ) { bs [ bcnt ] ++ ; belong [ s . top ()] = bcnt ; q [ s . top ()] = 0 ; s . pop (); } bs [ bcnt ] ++ ; belong [ s . top ()] = bcnt ; q [ s . top ()] = 0 ; s . pop (); } } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> t ; while ( t != 0 ) { g [ i ]. push_back ( t ); cin >> t ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j : g [ i ]) if ( belong [ i ] != belong [ j ]) ind [ belong [ j ]] ++ , oud [ belong [ i ]] ++ ; for ( int i = 1 ; i <= bcnt ; i ++ ) if ( ind [ i ] == 0 ) ans1 ++ ; for ( int i = 1 ; i <= bcnt ; i ++ ) if ( oud [ i ] == 0 ) ans2 ++ ; if ( bcnt == 1 ) cout << 1 << '\\n' << 0 << endl ; else { ans2 = max ( ans1 , ans2 ); cout << ans1 << endl ; cout << ans2 << endl ; } }","title":"P2746 [USACO5.3]\u6821\u56ed\u7f51Network of Schools"},{"location":"solutions/graph/#2-sat","text":"","title":"2-SAT \u95ee\u9898"},{"location":"solutions/graph/#_4","text":"P4782 \u3010\u6a21\u677f\u30112-SAT \u95ee\u9898 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> #include <stack> #include <vector> using namespace std ; int n , m , _i , a , _j , b ; vector < int > g [ 2000007 ]; int s [ 2000007 ], scnt ; int dfn [ 2000007 ], low [ 2000007 ], q [ 2000007 ]; int belong [ 2000007 ], bs [ 2000007 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 ; s [ ++ scnt ] = cur ; for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s [ scnt ] != cur ) belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; belong [ s [ scnt ]] = bcnt , bs [ bcnt ] ++ , q [ s [ scnt ]] = 0 , scnt -- ; } } int iv ( int i , int v ) { return i + v * n ; } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> _i >> a >> _j >> b ; g [ _i + n * ( a ^ 1 )]. push_back ( _j + n * ( b & 1 )); g [ _j + n * ( b ^ 1 )]. push_back ( _i + n * ( a & 1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"IMPOSSIBLE\" << endl ; return 0 ; } cout << \"POSSIBLE\" << endl ; for ( int i = 1 ; i <= n ; i ++ ) cout << ( belong [ i ] > belong [ i + n ]) << ' ' ; cout << endl ; } P5782 [POI2001] \u548c\u5e73\u59d4\u5458\u4f1a \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <stdio.h> #include <string.h> #define min(a, b) (((a) < (b)) ? (a) : (b)) int n , m , a , b ; const int maxn = 8e3 + 7 ; const int maxm = 2e4 + 7 ; int head [ maxn * 2 ], nxt [ maxm * 4 ], to [ maxm * 4 ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], ins [ maxn * 2 ], scnt ; int belong [ maxn * 2 ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; ~ i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( low [ u ] == dfn [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int main () { bool flag = 1 ; memset ( head , -1 , sizeof ( head )); memset ( to , -1 , sizeof ( to )); scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ), a -- , b -- ; add ( a , b ^ 1 ), add ( b , a ^ 1 ); } for ( int i = 0 ; i < n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] == belong [ i ^ 1 ]) flag = 0 ; if ( flag ) { for ( int i = 0 ; i < n * 2 ; i += 2 ) if ( belong [ i ] < belong [ i ^ 1 ]) printf ( \"%d \\n \" , i + 1 ); else printf ( \"%d \\n \" , ( i ^ 1 ) + 1 ); } else puts ( \"NIE\" ); } P4171 [JSOI2010] \u6ee1\u6c49\u5168\u5e2d \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <iostream> #include <stack> #include <vector> using namespace std ; int k ; int n , m , id1 , id2 ; char t1 , t2 ; vector < int > g [ 207 ]; stack < int > s ; int dfn [ 207 ], low [ 207 ], belong [ 207 ], bs [ 207 ], q [ 207 ], cnt , bcnt ; void dfs ( int cur ) { low [ cur ] = dfn [ cur ] = ++ cnt ; q [ cur ] = 1 , s . push ( cur ); for ( int nxt : g [ cur ]) { if ( ! dfn [ nxt ]) { dfs ( nxt ); low [ cur ] = min ( low [ nxt ], low [ cur ]); } if ( q [ nxt ]) low [ cur ] = min ( dfn [ nxt ], low [ cur ]); } if ( dfn [ cur ] == low [ cur ]) { ++ bcnt ; while ( s . top () != cur ) belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); belong [ s . top ()] = bcnt , bs [ bcnt ] ++ , q [ s . top ()] = 0 , s . pop (); } } inline int iv ( char t , int i ) { if ( t == 'h' || t == 'l' ) return i ; else return n + i ; } int main () { cin >> k ; while ( k -- ) { cin >> n >> m ; bcnt = cnt = 0 ; for (; s . size (); s . pop ()) ; for ( int i = 1 ; i <= n * 2 ; i ++ ) g [ i ]. clear (), q [ i ] = dfn [ i ] = low [ i ] = belong [ i ] = bs [ i ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> t1 >> id1 >> t2 >> id2 ; g [ iv ( t1 - 1 , id1 )]. push_back ( iv ( t2 , id2 )); g [ iv ( t2 - 1 , id2 )]. push_back ( iv ( t1 , id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) if ( belong [ i ] == belong [ i + n ]) { cout << \"BAD\" << endl ; goto flag ; } cout << \"GOOD\" << endl ; flag :; } }","title":"\u6a21\u677f\u9898"},{"location":"solutions/graph/#p3825-noi2017","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u5c0f L \u6709 A\u3001B\u3001C \u4e09\u8f86\u8d5b\u8f66\uff0cn \u573a\u6e38\u620f\u4e2d\u6709 d \u573a \\((d \\leq 8, n \\leq 5 \\times 10^4)\\) \u4e0d\u9650\u5236\u8d5b\u8f66\uff0c\u5176\u4f59\u7684\u573a\u6b21\u4f1a\u7981\u6b62\u67d0\u4e00\u8f86\u8d5b\u8f66\u3002\u8fd8\u6709 m \u6761 \\((m \\leq 10^4)\\) \u89c4\u5219\u9650\u5236\u5982\u679c\u5728\u573a\u6b21 \\(i\\) \u4f7f\u7528\u67d0\u4e00\u8d5b\u8f66\uff0c\u5728\u573a\u6b21 \\(j\\) \u5fc5\u987b\u4f7f\u7528\u67d0\u79cd\u8d5b\u8f66\u3002\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u82e5\u6709\u89e3\uff0c\u8f93\u51fa\u4e00\u79cd\u65b9\u6848\u3002 \u89e3\u6cd5\uff1a\u8003\u8651\u5230\u7edd\u5927\u591a\u6570\u573a\u6b21\u53ea\u80fd\u4f7f\u7528\u4e24\u8f66\u4e4b\u4e00\uff0c\u679a\u4e3e \\(d\\) \u573a\u4e0d\u9650\u8d5b\u8f66\u7684\u573a\u6b21\u9650\u5236 A \u6216\u9650\u5236 B\uff0c\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \\(O((n+m)\\cdot 2^d)\\) \u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> using namespace std ; const int maxn = 5e4 + 7 , maxm = 1e5 + 7 ; char S [ maxn ]; int n , d , m ; int head [ maxn * 2 ], nxt [ maxm * 2 ], to [ maxm * 2 ], cnt ; struct sat { int i , j ; char hi , hj ; } q [ maxm ]; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int anti ( int u ) { if ( u > n ) return u - n ; else return u + n ; } int id ( int u , char c ) { if ( c == (( S [ u ] == 'a' ) ? 'b' : 'a' )) return u ; return u + n ; } int dfn [ maxn * 2 ], low [ maxn * 2 ], dcnt ; int s [ maxn * 2 ], belong [ maxn * 2 ], bcnt , scnt , ins [ maxn * 2 ]; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ dcnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { ++ bcnt ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } int solve () { cnt = 0 , dcnt = 0 , bcnt = 0 , scnt = 0 ; memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); memset ( s , 0 , sizeof ( s )); memset ( belong , 0 , sizeof ( belong )); memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); for ( int i = 1 ; i <= m ; i ++ ) { if ( q [ i ]. i == q [ i ]. j && q [ i ]. hi == q [ i ]. hj ) continue ; if ( q [ i ]. hi == S [ q [ i ]. i ]) continue ; int id1 = id ( q [ i ]. i , q [ i ]. hi ), id2 = id ( q [ i ]. j , q [ i ]. hj ); if ( q [ i ]. hj == S [ q [ i ]. j ]) add ( id1 , anti ( id1 )); else add ( id1 , id2 ), add ( anti ( id2 ), anti ( id1 )); } for ( int i = 1 ; i <= n * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( belong [ i ] == belong [ anti ( i )]) return 0 ; } return 1 ; } int xpos [ 9 ], xcnt ; bool flag ; int main () { scanf ( \"%d %d \\n %s \\n %d\" , & n , & d , S + 1 , & m ); for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %c %d %c\" , & ( q [ i ]. i ), & ( q [ i ]. hi ), & ( q [ i ]. j ), & ( q [ i ]. hj )); q [ i ]. hi += 32 , q [ i ]. hj += 32 ; } for ( int i = 1 ; i <= n ; i ++ ) if ( S [ i ] == 'x' ) xpos [ xcnt ++ ] = i ; for ( int i = 0 ; i < ( 1 << d ); i ++ ) { for ( int j = 0 ; j < d ; j ++ ) if ( i & ( 1 << j )) S [ xpos [ j ]] = 'a' ; else S [ xpos [ j ]] = 'b' ; flag = flag || solve (); if ( flag ) break ; } if ( flag ) for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%c\" , ( belong [ i ] < belong [ anti ( i )]) ? (( S [ i ] == 'a' ) ? 'B' : 'A' ) : (( S [ i ] == 'c' ) ? 'B' : 'C' )); else puts ( \"-1 \\n \" ); }","title":"P3825 [NOI2017] \u6e38\u620f"},{"location":"solutions/graph/#p3209-hnoi2010","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1aT \u7ec4\u6570\u636e \\((T\\leq 300)\\) \uff0c\u7ed9\u4f60\u4e00\u4e2a\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u548c\u5176\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5224\u65ad\u8be5\u56fe\u662f\u5426\u4e3a\u5e73\u9762\u56fe\u3002 \\(N\\leq 200\\) \u3002 \u89e3\u6cd5\uff1a\u4e3a\u4e86\u7b80\u5316\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u9762\u56fe\u5b9a\u7406 \\(m \\leq 3\\times n - 6\\) \uff0c\u521d\u6b65\u6392\u9664\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u60c5\u51b5\u3002\u4e00\u6761\u8fb9\u53ef\u4ee5\u5728\u73af\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u73af\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fb9\u7684\u77db\u76fe\u5efa\u7acb\u5173\u7cfb\uff0c\u4ece\u800c\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\u6c42\u89e3\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 #include <algorithm> #include <cassert> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 120007 ; int t , n , m ; int _t1 , _t2 ; int head [ maxn ], nxt [ maxn ], to [ maxn ], cnt ; void add ( int u , int v ) { nxt [ ++ cnt ] = head [ u ]; head [ u ] = cnt ; to [ cnt ] = v ; } int dfn [ maxn ], low [ maxn ], dcnt ; int s [ maxn ], ins [ maxn ], scnt ; int belong [ maxn ], bcnt ; void dfs ( int u ) { dfn [ u ] = low [ u ] = ++ cnt ; s [ ++ scnt ] = u ; ins [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! dfn [ v ]) { dfs ( v ); low [ u ] = min ( low [ u ], low [ v ]); } if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { bcnt ++ ; while ( s [ scnt ] != u ) ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; ins [ s [ scnt ]] = 0 , belong [ s [ scnt -- ]] = bcnt ; } } void init () { cnt = 0 , dcnt = 0 , bcnt = 0 ; memset ( head , 0 , sizeof ( head )); memset ( nxt , 0 , sizeof ( nxt )); memset ( dfn , 0 , sizeof ( dfn )); memset ( low , 0 , sizeof ( low )); } int l [ maxn ], r [ maxn ]; int hid [ maxn ]; int flag ; int main () { scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); if ( m <= n * 3 - 6 ) flag = 1 ; else flag = 0 ; for ( int i = 1 ; i <= m ; i ++ ) if ( flag ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); else scanf ( \"%d%d\" , & _t1 , & _t2 ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & _t1 ), hid [ _t1 ] = i ; if ( ! flag ) { puts ( \"NO\" ); continue ; } init (); for ( int i = 1 ; i < m ; i ++ ) for ( int j = i + 1 ; j <= m ; j ++ ) { int a , b , c , d ; a = l [ i ], b = r [ i ], c = l [ j ], d = r [ j ]; a = hid [ a ], b = hid [ b ], c = hid [ c ], d = hid [ d ]; if ( b < a ) swap ( a , b ); if ( d < c ) swap ( c , d ); if (( a < c && c < b && b < d ) || ( c < a && a < d && d < b )) add ( i , j + m ), add ( i + m , j ), add ( j , i + m ), add ( j + m , i ); } for ( int i = 1 ; i <= m * 2 ; i ++ ) if ( ! dfn [ i ]) dfs ( i ); for ( int i = 1 ; i <= m ; i ++ ) if ( belong [ i ] == belong [ i + m ]) { puts ( \"NO\" ), flag = 0 ; break ; } if ( flag ) puts ( \"YES\" ); } }","title":"P3209 [HNOI2010] \u5e73\u9762\u56fe\u5224\u5b9a"},{"location":"solutions/graph/#_5","text":"","title":"\u70b9\u5206\u6cbb"},{"location":"solutions/graph/#_6","text":"P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #include <algorithm> #include <iostream> using namespace std ; const int maxn = 1e4 + 7 , maxm = 2e4 + 7 , maxq = 1e2 + 7 ; int n ; int head [ maxn ], nxt [ maxm ], to [ maxm ], w [ maxm ], cnt ; bool blocked [ maxn ]; void add ( int u , int v , int a ) { nxt [ ++ cnt ] = head [ u ], head [ u ] = cnt ; to [ cnt ] = v , w [ cnt ] = a ; } int m ; int q [ maxq ], ans [ maxq ]; int root , siz [ maxn ], minch , tsiz ; void get_root ( int u , int fa ) { siz [ u ] = 1 ; int maxch = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! blocked [ v ]) { get_root ( v , u ); siz [ u ] += siz [ v ]; maxch = max ( maxch , siz [ v ]); } } maxch = max ( maxch , tsiz - siz [ u ]); if ( maxch < minch ) minch = maxch , root = u ; } struct p { int dis , id , belong ; const bool operator < ( const p & b ) const { return dis < b . dis ; } } dis [ maxn ]; int dcnt , ust ; void get_dis ( int u , int fa , int d ) { if ( u == root ) dcnt = 0 , dis [ ++ dcnt ] = p { d , u , u }; else dis [ ++ dcnt ] = p { d , u , ust }; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( u == root ) ust = v ; if ( v != fa && ! blocked [ v ]) get_dis ( v , u , d + w [ i ]); } } void calc ( int u ) { get_dis ( u , 0 , 0 ); sort ( dis + 1 , dis + dcnt + 1 ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ! ans [ i ]) { int l = 1 , r = dcnt ; while ( l < r ) { if ( dis [ l ]. dis + dis [ r ]. dis > q [ i ]) r -- ; else if ( dis [ l ]. dis + dis [ r ]. dis < q [ i ]) l ++ ; else if ( dis [ l ]. belong == dis [ r ]. belong ) { if ( dis [ r ]. dis == dis [ r - 1 ]. dis ) r -- ; else l ++ ; } else { ans [ i ] = 1 ; break ; } } } } } void solve ( int u ) { blocked [ u ] = 1 ; calc ( u ); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! blocked [ v ]) { minch = n , tsiz = siz [ v ]; get_root ( v , 0 ); solve ( root ); } } } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i < n ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & q [ i ]); if ( q [ i ] == 0 ) ans [ i ] = 1 ; } minch = n , tsiz = n ; get_root ( 1 , 0 ); solve ( root ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ans [ i ]) puts ( \"AYE\" ); else puts ( \"NAY\" ); } } P4178 Tree","title":"\u6a21\u677f\u9898"},{"location":"solutions/graph/#_7","text":"","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"solutions/graph/#_8","text":"\u89c1 \u6811\u94fe\u5256\u5206 \u3002\u672c\u8282\u53c2\u8003\u4e86\u8fd9\u7bc7\u6587\u7ae0 1 \u3002","title":"\u6982\u5ff5"},{"location":"solutions/graph/#cf600e-lomsat-gelral","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u8282\u70b9\u7684\u6811 \\((n \\leq 10^5)\\) \uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u6c42\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u7f16\u53f7\u548c\uff08\u53ef\u80fd\u6709\u591a\u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff09\u3002 \u89e3\u6cd5\uff1a\u7531\u4e8e\u65e0\u6cd5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u6bcf\u4e00\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\uff0c\u5148\u904d\u5386\u6240\u6709\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u5f62\u6210\u7684\u5b50\u6811\uff0c\u7edf\u8ba1\u7b54\u6848\u4f46\u662f\u4e0d\u4fdd\u7559\u6570\u636e\uff0c\u7136\u540e\u904d\u5386\u91cd\u513f\u5b50\uff0c\u7edf\u8ba1\u7b54\u6848\u5e76\u4e14\u4fdd\u7559\u6570\u636e\uff0c\u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u4ee5\u53ca\u7236\u8282\u70b9\uff0c\u5408\u5e76\u91cd\u513f\u5b50\u7edf\u8ba1\u8fc7\u7684\u7b54\u6848\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> using namespace std ; const int maxn = 1e5 + 7 , maxm = 2e5 + 7 ; int n ; int c [ maxn ]; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; int cnt [ maxn ]; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int siz [ maxn ], heavy [ maxn ]; void predfs ( int u , int fa ) { siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa ) { predfs ( v , u ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } } bool inc [ maxn ]; long long ans [ maxn ], cs , dcnt ; void calc ( int u , int fa , int k ) { cnt [ c [ u ]] += k ; if ( k == 1 && cnt [ c [ u ]] >= dcnt ) { if ( cnt [ c [ u ]] > dcnt ) { cs = 0 ; dcnt = cnt [ c [ u ]]; } cs += c [ u ]; } for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && ! inc [ v ]) calc ( v , u , k ); } } void dfs ( int u , int fa , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != fa && v != heavy [ u ]) { dfs ( v , u , false ); } } if ( heavy [ u ]) { dfs ( heavy [ u ], u , true ); inc [ heavy [ u ]] = true ; } calc ( u , fa , 1 ), ans [ u ] = cs ; if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u , fa , -1 ), cs = 0 , dcnt = 0 ; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ]; int x , y ; for ( int i = 1 ; i < n ; i ++ ) { cin >> x >> y ; add ( x , y ), add ( y , x ); } predfs ( 1 , 0 ); dfs ( 1 , 0 , 1 ); for ( int i = 1 ; i <= n ; i ++ ) cout << ans [ i ] << ' ' ; cout << endl ; } \u8be5\u9898\u662f\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\u9898\u76ee\u7684\u4ee3\u8868\u3002","title":"CF600E Lomsat gelral"},{"location":"solutions/graph/#cf208e-blood-cousins","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u7247 n \u4e2a\u8282\u70b9 \\((n \\leq 10^5)\\) \u7684\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u70b9\u4e0e\u591a\u5c11\u4e2a\u70b9\u62e5\u6709\u5171\u540c\u7684 K \u7ea7\u7956\u5148\u3002 \u89e3\u6cd5\uff1a\u672c\u9898\u540c\u95ee\u4ee5\u7ed9\u5b9a\u70b9\u4e3a\u6839\uff0c\u6df1\u5ea6\u4e3a k \u7684\u70b9\u7684\u4e2a\u6570\u51cf\u4e00\u3002\u7ef4\u62a4\u4e00\u4e2a dis \u6570\u7ec4\u8bb0\u5f55\u7ed9\u5b9a\u6df1\u5ea6\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u65b9\u6cd5\u540c\u4e0a\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 #include <iostream> using namespace std ; const int maxn = 1e5 + 7 , maxm = 2e5 + 7 ; int n , m ; int head [ maxn ], nxt [ maxm ], to [ maxm ], ecnt ; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } int qhead [ maxn ], qnxt [ maxn ], qto [ maxn ], qid [ maxn ], qcnt ; void qadd ( int u , int v , int id ) { qnxt [ ++ qcnt ] = qhead [ u ]; qhead [ u ] = qcnt ; qto [ qcnt ] = v ; qid [ qcnt ] = id ; } int fa [ maxn ][ 19 ], rt [ maxn ], rcnt ; int cnt [ maxn ], ans [ maxn ]; int siz [ maxn ], heavy [ maxn ], dep [ maxn ]; void predfs ( int u ) { dep [ u ] = dep [ fa [ u ][ 0 ]] + 1 ; siz [ u ] = 1 ; for ( int i = 1 ; i <= 18 ; i ++ ) fa [ u ][ i ] = fa [ fa [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; predfs ( v ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ heavy [ u ]] < siz [ v ]) heavy [ u ] = v ; } } bool inc [ maxn ]; void calc ( int u , int k ) { cnt [ dep [ u ]] += k ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! inc [ v ]) calc ( v , k ); } } void dfs ( int u , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) dfs ( v , false ); } if ( heavy [ u ]) { dfs ( heavy [ u ], true ); inc [ heavy [ u ]] = true ; } calc ( u , 1 ); for ( int i = qhead [ u ]; i ; i = qnxt [ i ]) ans [ qid [ i ]] = cnt [ qto [ i ]] - 1 ; if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u , -1 ); } int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> fa [ i ][ 0 ]; if ( fa [ i ][ 0 ]) add ( fa [ i ][ 0 ], i ); else rt [ ++ rcnt ] = i ; } for ( int i = 1 ; i <= rcnt ; i ++ ) predfs ( rt [ i ]); cin >> m ; for ( int i = 1 ; i <= m ; i ++ ) { int v , p ; cin >> v >> p ; int d = dep [ v ]; for ( int k = 0 ; ( 1 << k ) <= p ; k ++ ) if ( p & ( 1 << k )) v = fa [ v ][ k ]; qadd ( v , d , i ); } for ( int i = 1 ; i <= rcnt ; i ++ ) dfs ( rt [ i ], false ); for ( int i = 1 ; i <= m ; i ++ ) cout << ans [ i ] << endl ; } \u8be5\u9898\u662f\u8bb0\u5f55\u6df1\u5ea6\u9898\u76ee\u7684\u4ee3\u8868\u3002","title":"CF208E Blood Cousins"},{"location":"solutions/graph/#cf570d-tree-requests","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4ee5 1 \u4e3a\u6839\u7684 n \u4e2a\u7ed3\u70b9 \\((n \\leq 5\\times 10^5)\\) \u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u6bcd\uff08 a - z \uff09\uff0c\u6811\u7684\u6df1\u5ea6\u4ece 1 \u5f00\u59cb\u8ba1\u7b97\u3002\u6bcf\u6b21\u8be2\u95ee a, b \u67e5\u8be2\u4ee5 a \u4e3a\u6839\u7684\u5b50\u6811\u5185\u6df1\u5ea6\u4e3a b \u7684\u7ed3\u70b9\u4e0a\u7684\u5b57\u6bcd\u91cd\u65b0\u6392\u5217\u4e4b\u540e\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u4e32\u3002 \u89e3\u6cd5\uff1a\u5224\u65ad\u82e5\u5e72\u4e2a\u5b57\u6bcd\u80fd\u6784\u6210\u56de\u6587\u4e32\u7684\u6761\u4ef6\u662f\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\uff0c\u6240\u4ee5\u8fd9\u4e00\u9898\u5c31\u7b49\u540c\u4e8e\u6c42\u67d0\u4e00\u70b9\u4ee5\u4e0b\u7ed9\u5b9a\u6df1\u5ea6\u51fa\u73b0\u5b57\u6bcd\u7684\u4e2a\u6570\u3002\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 dis \u8bb0\u5f55\u7ed9\u5b9a\u6df1\u5ea6\u6bcf\u4e00\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\u8be5\u9898\u9700\u8981\u6ce8\u610f IO \u5e38\u6570\u3002 Warning \u6b64\u9898\u53ef\u80fd\u8981\u6ce8\u610f IO \u5e38\u6570\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #include <iostream> using namespace std ; const int maxn = 5e5 + 7 ; int n , m ; int head [ maxn ], nxt [ maxn ], to [ maxn ], ecnt ; char val [ maxn ]; void add ( int u , int v ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; } namespace q { int head [ maxn ], nxt [ maxn ], d [ maxn ], id [ maxn ], ecnt ; void add ( int u , int dep , int qid ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; d [ ecnt ] = dep ; id [ ecnt ] = qid ; } }; // namespace q bool ans [ maxn ]; int fa [ maxn ]; int heavy [ maxn ], siz [ maxn ], dep [ maxn ]; void predfs ( int u ) { dep [ u ] = dep [ fa [ u ]] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; predfs ( v ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ v ] > siz [ heavy [ u ]]) heavy [ u ] = v ; } } bool dis [ maxn ][ 26 ]; bool inc [ maxn ]; void calc ( int u ) { dis [ dep [ u ]][ val [ u ] - 'a' ] ^= 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( ! inc [ v ]) calc ( v ); } } void dfs ( int u , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) dfs ( v , false ), ans [ u ] = max ( ans [ u ], ans [ v ]); } if ( heavy [ u ]) { dfs ( heavy [ u ], true ); inc [ heavy [ u ]] = true ; } calc ( u ); for ( int i = q :: head [ u ]; i ; i = q :: nxt [ i ]) { int cnt = 0 ; for ( int j = 0 ; j < 26 ; j ++ ) cnt += dis [ q :: d [ i ]][ j ]; ans [ q :: id [ i ]] = ( cnt <= 1 ); } if ( heavy [ u ]) inc [ heavy [ u ]] = false ; if ( keep == false ) calc ( u ); } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 2 ; i <= n ; i ++ ) { scanf ( \"%d\" , & fa [ i ]); add ( fa [ i ], i ); } predfs ( 1 ); scanf ( \"%s\" , val + 1 ); int a , b ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ); q :: add ( a , b , i ); } dfs ( 1 , true ); for ( int i = 1 ; i <= m ; i ++ ) printf ( \"%s \\n \" , ( ans [ i ] ? \"Yes\" : \"No\" )); }","title":"CF570D Tree Requests"},{"location":"solutions/graph/#cf741d-arpas-letter-marked-tree-and-mehrdads-dokhtar-kosh-paths","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u6839\u4e3a 1 \u7684 n \u4e2a\u8282\u70b9 \\((n \\leq 5\\times 10^5)\\) \u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5b57\u7b26\uff08a-v\u517122\u79cd\uff09\u3002\u4e00\u6761\u7b80\u5355\u8def\u5f84\u88ab\u79f0\u4e3a Dokhtar-kosh \u5f53\u4e14\u4ec5\u5f53\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u7ecf\u8fc7\u91cd\u65b0\u6392\u5e8f\u540e\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u56de\u6587\u4e32\u3002\u6c42\u6bcf\u4e2a\u5b50\u6811\u4e2d\u6700\u957f\u7684 Dokhtar-kosh \u8def\u5f84\u7684\u957f\u5ea6\u3002 \u89e3\u6cd5\uff1a\u80fd\u5426\u6784\u6210\u56de\u6587\u4e32\u7684\u5224\u5b9a\u540c [[dsu-on-tree#cf570d-tree-requests|CF570D]]\u3002\u7531\u4e8e n \u7684\u6570\u91cf\u5c0f\u4e8e 22\uff0c\u53ef\u4ee5\u8003\u8651\u72b6\u6001\u538b\u7f29\u3002\u4f7f\u7528\u4e00\u4e2a f \u6570\u7ec4\u7ef4\u62a4\u5f53\u524d\u679a\u4e3e\u5b50\u6811\u4e0b\uff0c\u6240\u6709\u72b6\u6001\u51fa\u73b0\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <algorithm> #include <iostream> using namespace std ; const int maxn = 5e5 + 7 ; int n ; int head [ maxn ], nxt [ maxn ], to [ maxn ], w [ maxn ], ecnt ; void add ( int u , int v , char letter ) { nxt [ ++ ecnt ] = head [ u ]; head [ u ] = ecnt ; to [ ecnt ] = v ; w [ ecnt ] = 1 << ( letter - 'a' ); } int fa [ maxn ]; int sta [ maxn ], dep [ maxn ], siz [ maxn ], heavy [ maxn ]; void predfs ( int u ) { dep [ u ] = dep [ fa [ u ]] + 1 ; siz [ u ] = 1 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; sta [ v ] = sta [ u ] ^ w [ i ]; predfs ( v ); siz [ u ] += siz [ v ]; if ( ! heavy [ u ] || siz [ v ] > siz [ heavy [ u ]]) heavy [ u ] = v ; } } int f [ 1 << 22 ], ans [ maxn ]; void calc ( int u , int top ) { if ( f [ sta [ u ]]) ans [ top ] = max ( ans [ top ], dep [ u ] + f [ sta [ u ]] - 2 * dep [ top ]); for ( int i = 0 ; i < 22 ; i ++ ) if ( f [ sta [ u ] ^ ( 1 << i )]) ans [ top ] = max ( ans [ top ], dep [ u ] + f [ sta [ u ] ^ ( 1 << i )] - 2 * dep [ top ]); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; calc ( v , top ); } } void add ( int u ) { f [ sta [ u ]] = max ( f [ sta [ u ]], dep [ u ]); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; add ( v ); } } void del ( int u ) { f [ sta [ u ]] = 0 ; for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; del ( v ); } } void dfs ( int u , bool keep ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) dfs ( v , false ); } if ( heavy [ u ]) dfs ( heavy [ u ], true ); if ( f [ sta [ u ]]) ans [ u ] = max ( ans [ u ], f [ sta [ u ]] - dep [ u ]); for ( int i = 0 ; i < 22 ; i ++ ) if ( f [ sta [ u ] ^ ( 1 << i )]) ans [ u ] = max ( ans [ u ], f [ sta [ u ] ^ ( 1 << i )] - dep [ u ]); f [ sta [ u ]] = max ( f [ sta [ u ]], dep [ u ]); for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; if ( v != heavy [ u ]) { calc ( v , u ); add ( v ); } } if ( keep == false ) del ( u ); } void postdfs ( int u ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { int v = to [ i ]; postdfs ( v ); ans [ u ] = max ( ans [ u ], ans [ v ]); } } int main () { scanf ( \"%d\" , & n ); char _c [ 10 ]; for ( int i = 2 ; i <= n ; i ++ ) { scanf ( \"%d%s\" , & fa [ i ], _c ); add ( fa [ i ], i , _c [ 0 ]); } predfs ( 1 ); dfs ( 1 , true ); postdfs ( 1 ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d \" , ans [ i ]); printf ( \" \\n \" ); } \u8be5\u9898\u662f\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u538b\u8f74\u9898\u3002 \u6728\u6bcf\u7acb\u5144\u8c6a\u300adsu on tree(\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76)\u7b97\u6cd5\u603b\u7ed3+\u4e60\u9898\u300b \u21a9","title":"CF741D Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths"},{"location":"solutions/maths/","text":"\u6570\u5b66 \u00b6 \u7ec4\u5408\u6570\u5b66 \u00b6 P2675 \u300a\u77bf\u8469\u7684\u6570\u5b57\u6e38\u620f\u300bT3-\u4e09\u89d2\u5723\u5730 \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a \\(p\\) \u662f\u4e00\u4e2a 1 \u5230 n \\((0\\leq n\\leq 10^6)\\) \u7684\u6392\u5217\uff0c\u6c42 \\(\\sum_{i=0}^{n-1}C_{n-1}^{i}\\cdot p_i\\) \u7684\u6700\u5927\u503c \\(\\bmod 10007\\) \u7684\u7ed3\u679c\u3002 \u89e3\u6cd5\uff1aLucas \u5b9a\u7406\u6c42\u7ec4\u5408\u6570\u6a21\u62df\u8ba1\u7b97\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; const int mod = 10007 ; int pmod [ mod ], pinv [ mod ]; int n ; int x , y ; int ans ; int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return a ; } int u = exgcd ( b , a % b , y , x ); y -= a / b * x ; return u ; } int C ( int n , int m ) { if ( m > n ) return 0 ; return 1L L * ( 1L L * pmod [ n ] * pinv [ m ] % mod ) * pinv [ n - m ] % mod ; } int Lucas ( int n , int m ) { if ( m == 0 ) return 1 ; else return 1L L * C ( n % mod , m % mod ) * Lucas ( n / mod , m / mod ) % mod ; } int main () { cin >> n ; pmod [ 1 ] = 1 ; for ( int i = 2 ; i < mod ; i ++ ) pmod [ i ] = 1L L * i * pmod [ i -1 ] % mod ; exgcd ( pmod [ mod -1 ], mod , x , y ); pinv [ mod -1 ] = ( x % mod + mod ) % mod ; for ( int i = mod -1 ; i >= 1 ; i -- ) pinv [ i -1 ] = 1L L * i * pinv [ i ] % mod ; for ( int i = 0 ; i < n / 2 ; i ++ ) ans = ( 0L L + ans + 1L L * ( i * 4 + 3 ) * Lucas ( n -1 , i )) % mod ; if ( n & 1 ) ans = ( 0L L + ans + 1L L * n * Lucas ( n -1 , n / 2 )) % mod ; cout << ans << endl ; } \u4f4d\u8fd0\u7b97 \u00b6 \u6982\u5ff5 \u00b6 \u57fa\u672c\u6982\u5ff5\uff1a\u539f\u7801\uff0c\u53cd\u7801\uff0c\u8865\u7801\u3002 \u6b63\u6570\u7684\u4e09\u8005\u76f8\u7b49 \uff0c\u8d1f\u6570\u7684\u53cd\u7801\u662f\u539f\u7801\u7684\u53d6\u53cd\uff0c\u8865\u7801\u662f\u53cd\u7801\u52a0 1\u3002 \u57fa\u672c\u64cd\u4f5c\uff1a lowbit , getbit , revbit , setbit \u3002 \u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\uff1a for(int t=x;t;t=x&(t-1)) \u3002 P3048 [USACO12FEB]Cow IDs S \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u51fa\u6c49\u660e\u6743\u91cd\u4e3a k \\((1 \\leq k \\leq 10)\\) \u7684\u7b2c n \\((1\\leq n\\leq 10^7)\\) \u4e2a\u4e8c\u8fdb\u5236\u6570\u3002 \u89e3\u6cd5\uff1a\u8fd9\u9053\u9898\u7684\u6807\u51c6\u89e3\u6cd5\u662f\u6392\u5217\u7ec4\u5408\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u6a21\u62df\uff0c\u5e76\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\u3002\u6c42\u76f8\u540c\u6c49\u660e\u6743\u91cd\u7684\u540e\u7ee7\u7684\u4ee3\u7801 \u89c1\u6b64 \u3002\u6ce8\u610f\uff0c\u8981\u7279\u5224 \\(k = 1,2,3\\) \u7684\u60c5\u51b5\u624d\u80fd\u8fc7\u9898\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> using namespace std ; int n , k , flag ; int main () { scanf ( \"%d%d\" , & n , & k ); if ( k == 1 ) { printf ( \"%c\" , '1' ); for ( int i = 2 ; i <= n ; i ++ ) printf ( \"%c\" , '0' ); } else if ( k == 2 ) { int s = 0 , i = 1 ; for ( i = 1 ; s < n ; i ++ ) s += i ; i -- , s -= i ; putc ( '1' , stdout ); for ( int j = 1 ; j <= i ; j ++ ) printf ( \"%c\" , ( i + 1 - n + s == j ) + '0' ); } else if ( k == 3 ) { int s = 0 , i = 2 ; for ( i = 2 ; s < n ; i ++ ) s += i * ( i - 1 ) / 2 ; i -- , s -= i * ( i - 1 ) / 2 ; int nn = n - s , ns = 0 , j = 1 ; for ( j = 1 ; ns < nn ; j ++ ) ns += j ; j -- , ns -= j ; putc ( '1' , stdout ); for ( int k = 1 ; k <= i - j - 1 ; k ++ ) printf ( \"%c\" , '0' ); putc ( '1' , stdout ); for ( int k = 1 ; k <= j ; k ++ ) printf ( \"%c\" , ( j + 1 - nn + ns == k ) + '0' ); } else { unsigned long long x = ( 1ULL << k ) - 1ULL , t ; for ( int i = 2 ; i <= n ; i ++ ) { t = x + ( x & - x ); x = t | (((( t & - t ) / ( x & - x )) >> 1ULL ) - 1ULL ); } for ( int i = 63 ; i >= 0 ; i -- ) { if ( x & ( 1ULL << i )) flag = 1 ; if ( flag ) { printf ( \"%c\" , char ((( x >> i ) & 1ULL ) + '0' )); } } printf ( \" \\n \" ); } } CF1508B Almost Sorted \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u201c\u51e0\u4e4e\u6709\u5e8f\u201d\u7684\u6392\u5217 a \u6ee1\u8db3 \\(\\forall i\\in [1,n-1]\\cap \\mathbf{N}^* , a_{i+1}\\geq a_{i}-1\\) \uff0c\u6211\u4eec\u79f0\u5176\u4e3a\u201c\u51e0\u4e4e\u6709\u5e8f\u7684\u201d\u3002\u7ed9\u5b9a\u957f\u5ea6 n\uff0ck\uff0c\u6c42\u51fa\u7b2c k \u4e2a\u957f\u5ea6\u4e3a n \u7684\u201c\u51e0\u4e4e\u6709\u5e8f\u201d\u6392\u5217\u3002 \u89e3\u6cd5\uff1a\u201c\u51e0\u4e4e\u6709\u5e8f\u201d\u7684\u6392\u5217\u80af\u5b9a\u53ef\u4ee5\u5206\u4e3a\u82e5\u5e72\u6bb5\uff0c\u5176\u4e2d\u5728\u6bcf\u4e00\u6bb5\u4e2d\uff0c\u540e\u9879\u7b49\u4e8e\u524d\u9879\u52a0 1 \u6216\u8005\u524d\u9879\u51cf 1\uff0c\u6613\u5f97\uff0c\u8fd9\u4e9b\u6392\u5217\u7684\u4e2a\u6570\u5171\u6709 \\(2^{n-1}\\) \u4e2a\uff08\u9996\u9879\u662f\u4e0a\u5347\u8fd8\u662f\u4e0b\u964d\u4e0d\u5f71\u54cd\u7ed3\u679c\uff09\u3002\u82e5\u5c06\u4e0a\u5347\u548c\u4e0b\u964d\u7684\u72b6\u6001\u770b\u4f5c\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 0 \u548c 1\uff0c\u7531\u4e8e\u8fde\u7eed\u7684 1 \u4ee3\u8868\u628a\u540e\u9762\u7684\u5927\u6570\u63d0\u524d\uff0c\u4e0d\u7ba1\u5728\u6570\u503c\u8fd8\u662f\u5bf9\u5e94\u6392\u5217\u7684\u5b57\u5178\u5e8f\u4e0a\u90fd\u5927\u4e8e\u4e2d\u95f4\u6709 0 \u7684\u6392\u5217\uff0c\u5bb9\u6613\u8bc1\u660e\uff0c\u4e8c\u8fdb\u5236\u72b6\u6001\u7684\u5927\u5c0f\u76f4\u63a5\u53cd\u6620\u6392\u5217\u7684\u987a\u5e8f\u3002\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u72b6\u6001\u53cd\u63a8\u6392\u5217\uff08\u5199\u6cd5\u7c7b\u4f3c\u53cc\u6307\u9488\uff09\u3002\u6ce8\u610f n \u8f83\u5927\u65f6\u7684\u7279\u5224\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <algorithm> #include <iostream> using namespace std ; unsigned long long t , n ; unsigned long long k ; int main () { scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%llu %llu\" , & n , & k ); k -- ; if ( n <= 60 && k >> n - 1 ) { puts ( \"-1\" ); continue ; } for ( unsigned long long l = 1 , r = 1 ; l <= n && r <= n ; r ++ , l = r ) { while ( r < n && n - r <= 60 && ( k >> ( n - r - 1 )) & 1 ) r ++ ; for ( unsigned long long i = r ; i >= l ; i -- ) printf ( \"%llu \" , i ); } printf ( \" \\n \" ); } } CF1491D Zookeeper and The Infinite Zoo \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u82e5 \\(x\\&y=y\\) \uff0c\u5219 x \u53ef\u4ee5\u53d8\u6210 x+y\uff0c\u95ee u \u662f\u5426\u53ef\u4ee5\u7ecf\u8fc7\u82e5\u5e72\u6b21\u64cd\u4f5c\u53d8\u4e3a v\u3002 \\((1\\leq u,v\\leq 2^{30})\\) \u89e3\u6cd5\uff1a \\(x\\&y=y\\) \u53ef\u4ee5\u7b49\u540c\u4e3a y \u662f x \u7684\u5b50\u96c6\u3002\u5728\u64cd\u4f5c\u540e\uff0c1 \u53ea\u4f1a\u5411\u9ad8\u4f4d\u79fb\u52a8\uff0c\u4e14\u6570\u91cf\u4e00\u5b9a\u4e0d\u53d8\u6216\u8005\u51cf\u5c11\u3002\u4ece\u4f4e\u5230\u9ad8\u679a\u4e3e\u6bcf\u4f4d\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <iostream> using namespace std ; int q ; int u , v ; void solve () { scanf ( \"%d %d\" , & u , & v ); if ( v < u ) { puts ( \"NO\" ); return ; } int ucnt = 0 , vcnt = 0 ; for ( int i = 0 ; i < 30 ; i ++ ) { ucnt += ( u >> i ) & 1 ; vcnt += ( v >> i ) & 1 ; if ( vcnt > ucnt ) { puts ( \"NO\" ); return ; } } puts ( \"YES\" ); } int main () { scanf ( \"%d\" , & q ); while ( q -- ) solve (); } CF627A XOR Equation \u00b6 \u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e24\u4e2a\u6574\u6570 a,b \u6ee1\u8db3 \\(a+b=s\\) \uff0c \\(a\\oplus b=t\\) \uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6b63\u6574\u6570 a,b \u6570\u76ee\u3002 \u89e3\u6cd5\uff1a\u5f02\u6216\u7684\u672c\u8d28\u662f\u4e0d\u8fdb\u4f4d\u7684\u52a0\u6cd5\uff0c\u6ee1\u8db3 \\(a\\oplus b+2\\times a\\&b=a+b\\) \uff0c\u6240\u4ee5 \\(a\\&b=\\frac{1}{2}(s-t)\\) \uff0c\u4e8c\u8fdb\u5236\u679a\u4e3e\u6bcf\u4e00\u4f4d\u7edf\u8ba1\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; long long s , t ; int main () { cin >> s >> t ; if ((( s - t ) & 1 ) || s < t || ((( s - t ) / 2 ) & t )) { cout << 0 << endl ; return 0 ; } else { long long ans = 0 , flag = ( s == t ? -2 : 0 ); while ( t ) { if ( t & 1 ) ans ++ ; t >>= 1 ; } ans = 1L L << ans ; cout << ans + flag << endl ; } }","title":"\u6570\u5b66"},{"location":"solutions/maths/#_1","text":"","title":"\u6570\u5b66"},{"location":"solutions/maths/#_2","text":"","title":"\u7ec4\u5408\u6570\u5b66"},{"location":"solutions/maths/#p2675-t3-","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a \\(p\\) \u662f\u4e00\u4e2a 1 \u5230 n \\((0\\leq n\\leq 10^6)\\) \u7684\u6392\u5217\uff0c\u6c42 \\(\\sum_{i=0}^{n-1}C_{n-1}^{i}\\cdot p_i\\) \u7684\u6700\u5927\u503c \\(\\bmod 10007\\) \u7684\u7ed3\u679c\u3002 \u89e3\u6cd5\uff1aLucas \u5b9a\u7406\u6c42\u7ec4\u5408\u6570\u6a21\u62df\u8ba1\u7b97\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; const int mod = 10007 ; int pmod [ mod ], pinv [ mod ]; int n ; int x , y ; int ans ; int exgcd ( int a , int b , int & x , int & y ) { if ( b == 0 ) { x = 1 , y = 0 ; return a ; } int u = exgcd ( b , a % b , y , x ); y -= a / b * x ; return u ; } int C ( int n , int m ) { if ( m > n ) return 0 ; return 1L L * ( 1L L * pmod [ n ] * pinv [ m ] % mod ) * pinv [ n - m ] % mod ; } int Lucas ( int n , int m ) { if ( m == 0 ) return 1 ; else return 1L L * C ( n % mod , m % mod ) * Lucas ( n / mod , m / mod ) % mod ; } int main () { cin >> n ; pmod [ 1 ] = 1 ; for ( int i = 2 ; i < mod ; i ++ ) pmod [ i ] = 1L L * i * pmod [ i -1 ] % mod ; exgcd ( pmod [ mod -1 ], mod , x , y ); pinv [ mod -1 ] = ( x % mod + mod ) % mod ; for ( int i = mod -1 ; i >= 1 ; i -- ) pinv [ i -1 ] = 1L L * i * pinv [ i ] % mod ; for ( int i = 0 ; i < n / 2 ; i ++ ) ans = ( 0L L + ans + 1L L * ( i * 4 + 3 ) * Lucas ( n -1 , i )) % mod ; if ( n & 1 ) ans = ( 0L L + ans + 1L L * n * Lucas ( n -1 , n / 2 )) % mod ; cout << ans << endl ; }","title":"P2675 \u300a\u77bf\u8469\u7684\u6570\u5b57\u6e38\u620f\u300bT3-\u4e09\u89d2\u5723\u5730"},{"location":"solutions/maths/#_3","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"solutions/maths/#_4","text":"\u57fa\u672c\u6982\u5ff5\uff1a\u539f\u7801\uff0c\u53cd\u7801\uff0c\u8865\u7801\u3002 \u6b63\u6570\u7684\u4e09\u8005\u76f8\u7b49 \uff0c\u8d1f\u6570\u7684\u53cd\u7801\u662f\u539f\u7801\u7684\u53d6\u53cd\uff0c\u8865\u7801\u662f\u53cd\u7801\u52a0 1\u3002 \u57fa\u672c\u64cd\u4f5c\uff1a lowbit , getbit , revbit , setbit \u3002 \u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\uff1a for(int t=x;t;t=x&(t-1)) \u3002","title":"\u6982\u5ff5"},{"location":"solutions/maths/#p3048-usaco12febcow-ids-s","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u7ed9\u51fa\u6c49\u660e\u6743\u91cd\u4e3a k \\((1 \\leq k \\leq 10)\\) \u7684\u7b2c n \\((1\\leq n\\leq 10^7)\\) \u4e2a\u4e8c\u8fdb\u5236\u6570\u3002 \u89e3\u6cd5\uff1a\u8fd9\u9053\u9898\u7684\u6807\u51c6\u89e3\u6cd5\u662f\u6392\u5217\u7ec4\u5408\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u6a21\u62df\uff0c\u5e76\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\u3002\u6c42\u76f8\u540c\u6c49\u660e\u6743\u91cd\u7684\u540e\u7ee7\u7684\u4ee3\u7801 \u89c1\u6b64 \u3002\u6ce8\u610f\uff0c\u8981\u7279\u5224 \\(k = 1,2,3\\) \u7684\u60c5\u51b5\u624d\u80fd\u8fc7\u9898\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> using namespace std ; int n , k , flag ; int main () { scanf ( \"%d%d\" , & n , & k ); if ( k == 1 ) { printf ( \"%c\" , '1' ); for ( int i = 2 ; i <= n ; i ++ ) printf ( \"%c\" , '0' ); } else if ( k == 2 ) { int s = 0 , i = 1 ; for ( i = 1 ; s < n ; i ++ ) s += i ; i -- , s -= i ; putc ( '1' , stdout ); for ( int j = 1 ; j <= i ; j ++ ) printf ( \"%c\" , ( i + 1 - n + s == j ) + '0' ); } else if ( k == 3 ) { int s = 0 , i = 2 ; for ( i = 2 ; s < n ; i ++ ) s += i * ( i - 1 ) / 2 ; i -- , s -= i * ( i - 1 ) / 2 ; int nn = n - s , ns = 0 , j = 1 ; for ( j = 1 ; ns < nn ; j ++ ) ns += j ; j -- , ns -= j ; putc ( '1' , stdout ); for ( int k = 1 ; k <= i - j - 1 ; k ++ ) printf ( \"%c\" , '0' ); putc ( '1' , stdout ); for ( int k = 1 ; k <= j ; k ++ ) printf ( \"%c\" , ( j + 1 - nn + ns == k ) + '0' ); } else { unsigned long long x = ( 1ULL << k ) - 1ULL , t ; for ( int i = 2 ; i <= n ; i ++ ) { t = x + ( x & - x ); x = t | (((( t & - t ) / ( x & - x )) >> 1ULL ) - 1ULL ); } for ( int i = 63 ; i >= 0 ; i -- ) { if ( x & ( 1ULL << i )) flag = 1 ; if ( flag ) { printf ( \"%c\" , char ((( x >> i ) & 1ULL ) + '0' )); } } printf ( \" \\n \" ); } }","title":"P3048 [USACO12FEB]Cow IDs S"},{"location":"solutions/maths/#cf1508b-almost-sorted","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u201c\u51e0\u4e4e\u6709\u5e8f\u201d\u7684\u6392\u5217 a \u6ee1\u8db3 \\(\\forall i\\in [1,n-1]\\cap \\mathbf{N}^* , a_{i+1}\\geq a_{i}-1\\) \uff0c\u6211\u4eec\u79f0\u5176\u4e3a\u201c\u51e0\u4e4e\u6709\u5e8f\u7684\u201d\u3002\u7ed9\u5b9a\u957f\u5ea6 n\uff0ck\uff0c\u6c42\u51fa\u7b2c k \u4e2a\u957f\u5ea6\u4e3a n \u7684\u201c\u51e0\u4e4e\u6709\u5e8f\u201d\u6392\u5217\u3002 \u89e3\u6cd5\uff1a\u201c\u51e0\u4e4e\u6709\u5e8f\u201d\u7684\u6392\u5217\u80af\u5b9a\u53ef\u4ee5\u5206\u4e3a\u82e5\u5e72\u6bb5\uff0c\u5176\u4e2d\u5728\u6bcf\u4e00\u6bb5\u4e2d\uff0c\u540e\u9879\u7b49\u4e8e\u524d\u9879\u52a0 1 \u6216\u8005\u524d\u9879\u51cf 1\uff0c\u6613\u5f97\uff0c\u8fd9\u4e9b\u6392\u5217\u7684\u4e2a\u6570\u5171\u6709 \\(2^{n-1}\\) \u4e2a\uff08\u9996\u9879\u662f\u4e0a\u5347\u8fd8\u662f\u4e0b\u964d\u4e0d\u5f71\u54cd\u7ed3\u679c\uff09\u3002\u82e5\u5c06\u4e0a\u5347\u548c\u4e0b\u964d\u7684\u72b6\u6001\u770b\u4f5c\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 0 \u548c 1\uff0c\u7531\u4e8e\u8fde\u7eed\u7684 1 \u4ee3\u8868\u628a\u540e\u9762\u7684\u5927\u6570\u63d0\u524d\uff0c\u4e0d\u7ba1\u5728\u6570\u503c\u8fd8\u662f\u5bf9\u5e94\u6392\u5217\u7684\u5b57\u5178\u5e8f\u4e0a\u90fd\u5927\u4e8e\u4e2d\u95f4\u6709 0 \u7684\u6392\u5217\uff0c\u5bb9\u6613\u8bc1\u660e\uff0c\u4e8c\u8fdb\u5236\u72b6\u6001\u7684\u5927\u5c0f\u76f4\u63a5\u53cd\u6620\u6392\u5217\u7684\u987a\u5e8f\u3002\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u72b6\u6001\u53cd\u63a8\u6392\u5217\uff08\u5199\u6cd5\u7c7b\u4f3c\u53cc\u6307\u9488\uff09\u3002\u6ce8\u610f n \u8f83\u5927\u65f6\u7684\u7279\u5224\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <algorithm> #include <iostream> using namespace std ; unsigned long long t , n ; unsigned long long k ; int main () { scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%llu %llu\" , & n , & k ); k -- ; if ( n <= 60 && k >> n - 1 ) { puts ( \"-1\" ); continue ; } for ( unsigned long long l = 1 , r = 1 ; l <= n && r <= n ; r ++ , l = r ) { while ( r < n && n - r <= 60 && ( k >> ( n - r - 1 )) & 1 ) r ++ ; for ( unsigned long long i = r ; i >= l ; i -- ) printf ( \"%llu \" , i ); } printf ( \" \\n \" ); } }","title":"CF1508B Almost Sorted"},{"location":"solutions/maths/#cf1491d-zookeeper-and-the-infinite-zoo","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u82e5 \\(x\\&y=y\\) \uff0c\u5219 x \u53ef\u4ee5\u53d8\u6210 x+y\uff0c\u95ee u \u662f\u5426\u53ef\u4ee5\u7ecf\u8fc7\u82e5\u5e72\u6b21\u64cd\u4f5c\u53d8\u4e3a v\u3002 \\((1\\leq u,v\\leq 2^{30})\\) \u89e3\u6cd5\uff1a \\(x\\&y=y\\) \u53ef\u4ee5\u7b49\u540c\u4e3a y \u662f x \u7684\u5b50\u96c6\u3002\u5728\u64cd\u4f5c\u540e\uff0c1 \u53ea\u4f1a\u5411\u9ad8\u4f4d\u79fb\u52a8\uff0c\u4e14\u6570\u91cf\u4e00\u5b9a\u4e0d\u53d8\u6216\u8005\u51cf\u5c11\u3002\u4ece\u4f4e\u5230\u9ad8\u679a\u4e3e\u6bcf\u4f4d\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <iostream> using namespace std ; int q ; int u , v ; void solve () { scanf ( \"%d %d\" , & u , & v ); if ( v < u ) { puts ( \"NO\" ); return ; } int ucnt = 0 , vcnt = 0 ; for ( int i = 0 ; i < 30 ; i ++ ) { ucnt += ( u >> i ) & 1 ; vcnt += ( v >> i ) & 1 ; if ( vcnt > ucnt ) { puts ( \"NO\" ); return ; } } puts ( \"YES\" ); } int main () { scanf ( \"%d\" , & q ); while ( q -- ) solve (); }","title":"CF1491D Zookeeper and The Infinite Zoo"},{"location":"solutions/maths/#cf627a-xor-equation","text":"\u9898\u76ee\u94fe\u63a5 \u5927\u610f\uff1a\u4e24\u4e2a\u6574\u6570 a,b \u6ee1\u8db3 \\(a+b=s\\) \uff0c \\(a\\oplus b=t\\) \uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6b63\u6574\u6570 a,b \u6570\u76ee\u3002 \u89e3\u6cd5\uff1a\u5f02\u6216\u7684\u672c\u8d28\u662f\u4e0d\u8fdb\u4f4d\u7684\u52a0\u6cd5\uff0c\u6ee1\u8db3 \\(a\\oplus b+2\\times a\\&b=a+b\\) \uff0c\u6240\u4ee5 \\(a\\&b=\\frac{1}{2}(s-t)\\) \uff0c\u4e8c\u8fdb\u5236\u679a\u4e3e\u6bcf\u4e00\u4f4d\u7edf\u8ba1\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; long long s , t ; int main () { cin >> s >> t ; if ((( s - t ) & 1 ) || s < t || ((( s - t ) / 2 ) & t )) { cout << 0 << endl ; return 0 ; } else { long long ans = 0 , flag = ( s == t ? -2 : 0 ); while ( t ) { if ( t & 1 ) ans ++ ; t >>= 1 ; } ans = 1L L << ans ; cout << ans + flag << endl ; } }","title":"CF627A XOR Equation"}]}